diff --git a/mobile/android/android-components/components/feature/addons/src/main/java/mozilla/components/feature/addons/worker/Extensions.kt b/mobile/android/android-components/components/feature/addons/src/main/java/mozilla/components/feature/addons/worker/Extensions.kt
index d897b9af6f..086f87d87b 100644
--- a/mobile/android/android-components/components/feature/addons/src/main/java/mozilla/components/feature/addons/worker/Extensions.kt
+++ b/mobile/android/android-components/components/feature/addons/src/main/java/mozilla/components/feature/addons/worker/Extensions.kt
@@ -12,9 +12,9 @@ import java.io.IOException
  * Indicates if an exception should be reported to the crash reporter.
  */
 internal fun Exception.shouldReport(): Boolean {
-    val isRecoverable = (this as? WebExtensionException)?.isRecoverable ?: true
-    return cause !is IOException &&
-        cause !is CancellationException &&
-        this !is CancellationException &&
-        isRecoverable
+//    val isRecoverable = (this as? WebExtensionException)?.isRecoverable ?: true
+    return false
+//        cause !is CancellationException &&
+//        this !is CancellationException &&
+//        isRecoverable
 }
diff --git a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/GleanCrashReporterService.kt b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/GleanCrashReporterService.kt
index 8efdd24f23..99107e9307 100644
--- a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/GleanCrashReporterService.kt
+++ b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/GleanCrashReporterService.kt
@@ -100,7 +100,7 @@ class GleanCrashReporterService(
         @SerialName("count")
         data class Count(val label: String) : GleanCrashAction() {
             override fun submit() {
-                CrashMetrics.crashCount[label].add()
+//                CrashMetrics.crashCount[label].add()
             }
         }
 
@@ -151,11 +151,11 @@ class GleanCrashReporterService(
                 val minidumpHash: String?,
             ) : PingCause() {
                 override fun setMetricsLater() {
-                    GleanCrash.cause.setLater("os_fault")
+/*                    GleanCrash.cause.setLater("os_fault")
                     remoteType?.let { GleanCrash.remoteType.setLater(it) }
                     minidumpHash?.let { GleanCrash.minidumpSha256Hash.setLater(it) }
 
-                    extras?.let(::setExtraMetrics)
+                    extras?.let(::setExtraMetrics)*/
                 }
 
                 private fun setExtraMetrics(extras: JsonObject) {
@@ -359,7 +359,7 @@ class GleanCrashReporterService(
                 // Perform all processing up-front in case an unexpected exception occurs. We don't
                 // want to partially set Glean metrics. The Glean metric functions do not throw
                 // exceptions.
-                val setMetrics = cause.prepareSetMetrics()
+/*                val setMetrics = cause.prepareSetMetrics()
                 var setBreadcrumbs = {}
                 if (breadcrumbs.isNotEmpty()) {
                     val value = Json.decodeFromJsonElement<GleanCrash.BreadcrumbsObject>(
@@ -388,17 +388,17 @@ class GleanCrashReporterService(
                         ),
                     )
                     setBreadcrumbs = { GleanCrash.breadcrumbs.set(value) }
-                }
+                }*/
 
                 // Set all metrics and submit the ping. We are guaranteed to not throw any
                 // exceptions here, so the metrics will never be partially set.
-                GleanEnvironment.uptime.setRawNanos(uptimeNanos)
+/*                GleanEnvironment.uptime.setRawNanos(uptimeNanos)
                 GleanCrash.processType.set(processType)
                 GleanCrash.time.set(Date(timeMillis))
                 GleanCrash.startup.set(startup)
                 setMetrics()
                 setBreadcrumbs()
-                Pings.crash.submit(reason)
+                Pings.crash.submit(reason)*/
             }
         }
     }
@@ -455,7 +455,7 @@ class GleanCrashReporterService(
             logger.error("Expected file, but found directory")
             false
         } else {
-            true
+            false
         }
     }
 
@@ -544,7 +544,7 @@ class GleanCrashReporterService(
     }
 
     override fun record(crash: Crash.UncaughtExceptionCrash) {
-        recordCrashAction(GleanCrashAction.Count(UNCAUGHT_EXCEPTION_KEY))
+/*        recordCrashAction(GleanCrashAction.Count(UNCAUGHT_EXCEPTION_KEY))
         recordCrashAction(
             GleanCrashAction.Ping(
                 uptimeNanos = uptime(),
@@ -554,7 +554,7 @@ class GleanCrashReporterService(
                 cause = GleanCrashAction.PingCause.JavaException(crash.throwable.toJson()),
                 breadcrumbs = crash.breadcrumbs.map { it.toBreadcrumb() },
             ),
-        )
+        )*/
     }
 
     private fun getExtrasJson(path: String): JsonObject? {
@@ -633,7 +633,7 @@ class GleanCrashReporterService(
     }
 
     override fun record(crash: Crash.NativeCodeCrash) {
-        when (crash.processVisibility) {
+/*        when (crash.processVisibility) {
             Crash.NativeCodeCrash.PROCESS_VISIBILITY_MAIN ->
                 recordCrashAction(GleanCrashAction.Count(MAIN_PROCESS_NATIVE_CODE_CRASH_KEY))
             Crash.NativeCodeCrash.PROCESS_VISIBILITY_FOREGROUND_CHILD ->
@@ -673,10 +673,10 @@ class GleanCrashReporterService(
                 ),
                 breadcrumbs = crash.breadcrumbs.map { it.toBreadcrumb() },
             ),
-        )
+        )*/
     }
 
     override fun record(throwable: Throwable) {
-        recordCrashAction(GleanCrashAction.Count(CAUGHT_EXCEPTION_KEY))
+//        recordCrashAction(GleanCrashAction.Count(CAUGHT_EXCEPTION_KEY))
     }
 }
diff --git a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/MozillaSocorroService.kt b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/MozillaSocorroService.kt
index 37fa83d76a..c18428dc85 100644
--- a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/MozillaSocorroService.kt
+++ b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/MozillaSocorroService.kt
@@ -103,7 +103,7 @@ class MozillaSocorroService(
     override val name: String = "Socorro"
 
     override fun createCrashReportUrl(identifier: String): String? {
-        return "https://crash-stats.mozilla.org/report/index/$identifier"
+        return ""
     }
 
     init {
@@ -556,7 +556,7 @@ class MozillaSocorroService(
     }
 
     internal fun buildServerUrl(versionName: String): String =
-        "https://crash-reports.mozilla.com/submit".toUri()
+        "".toUri()
             .buildUpon()
             .appendQueryParameter("id", appId)
             .appendQueryParameter("version", versionName)
diff --git a/mobile/android/android-components/components/lib/crash-sentry/src/main/java/mozilla/components/lib/crash/sentry/SentryService.kt b/mobile/android/android-components/components/lib/crash-sentry/src/main/java/mozilla/components/lib/crash/sentry/SentryService.kt
index 5b057f2579..7613b7ac06 100644
--- a/mobile/android/android-components/components/lib/crash-sentry/src/main/java/mozilla/components/lib/crash/sentry/SentryService.kt
+++ b/mobile/android/android-components/components/lib/crash-sentry/src/main/java/mozilla/components/lib/crash/sentry/SentryService.kt
@@ -44,7 +44,7 @@ class SentryService(
     private val environment: String? = null,
     private val sendEventForNativeCrashes: Boolean = false,
     private val sentryProjectUrl: String? = null,
-    private val sendCaughtExceptions: Boolean = true,
+    private val sendCaughtExceptions: Boolean = false,
 ) : CrashReporterService {
 
     override val id: String = "new-sentry-instance"
diff --git a/mobile/android/fenix/app/build.gradle b/mobile/android/fenix/app/build.gradle
index d9a6045423..2f788179ee 100644
--- a/mobile/android/fenix/app/build.gradle
+++ b/mobile/android/fenix/app/build.gradle
@@ -355,7 +355,7 @@ android.applicationVariants.configureEach { variant ->
 
     buildConfigField 'String', 'SENTRY_TOKEN', 'null'
     if (!isDebug) {
-        buildConfigField 'boolean', 'CRASH_REPORTING', 'true'
+        buildConfigField 'boolean', 'CRASH_REPORTING', 'false'
         // Reading sentry token from local file (if it exists). In a release task on taskcluster it will be available.
         try {
             def token = new File("${rootDir}/.sentry_token").text.trim()
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
index 13db9f3c83..6ac6401266 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
@@ -504,10 +504,10 @@ open class FenixApplication : LocaleAwareApplication(), Provider {
     }
 
     private fun setupCrashReporting() {
-        components
+/*        components
             .analytics
             .crashReporter
-            .install(this)
+            .install(this)*/
     }
 
     protected open fun initializeNimbus() {
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
index 1ad6a264c7..0b80a2807e 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
@@ -16,7 +16,7 @@ import mozilla.components.lib.crash.service.GleanCrashReporterService
 import mozilla.components.lib.crash.service.MozillaSocorroService
 import mozilla.components.support.ktx.android.content.isMainProcess
 import mozilla.components.support.utils.BrowsersCache
-import mozilla.components.support.utils.RunWhenReadyQueue
+//import mozilla.components.support.utils.RunWhenReadyQueue
 import org.mozilla.fenix.BuildConfig
 import org.mozilla.fenix.Config
 import org.mozilla.fenix.HomeActivity
@@ -45,7 +45,7 @@ import org.mozilla.geckoview.BuildConfig.MOZ_UPDATE_CHANNEL
  */
 class Analytics(
     private val context: Context,
-    private val runWhenReadyQueue: RunWhenReadyQueue,
+//    private val runWhenReadyQueue: RunWhenReadyQueue,
 ) {
     val crashReporter: CrashReporter by lazyMonitored {
         val services = mutableListOf<CrashReporterService>()
@@ -74,12 +74,12 @@ class Analytics(
 
             // We only want to initialize Sentry on startup on the main process.
             if (context.isMainProcess()) {
-                runWhenReadyQueue.runIfReadyOrQueue {
-                    sentryService.initIfNeeded()
-                }
+//                runWhenReadyQueue.runIfReadyOrQueue {
+//                    sentryService.initIfNeeded()
+//                }
             }
 
-            services.add(sentryService)
+//            services.add(sentryService)
         }
 
         // The name "Fenix" here matches the product name on Socorro and is unrelated to the actual app name:
@@ -93,7 +93,7 @@ class Analytics(
             releaseChannel = MOZ_UPDATE_CHANNEL,
             distributionId = distributionId,
         )
-        services.add(socorroService)
+//        services.add(socorroService)
 
         val intent = Intent(context, HomeActivity::class.java).apply {
             flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
@@ -119,7 +119,7 @@ class Analytics(
                 appName = context.getString(R.string.app_name),
                 organizationName = "Mozilla",
             ),
-            enabled = true,
+            enabled = false,
             nonFatalCrashIntent = pendingIntent,
             useLegacyReporting = !context.settings().crashReportAlwaysSend &&
                 !context.settings().useNewCrashReporterDialog,
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/experiments/NimbusSetup.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/experiments/NimbusSetup.kt
index 36d4b4c349..f9ff9db3bf 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/experiments/NimbusSetup.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/experiments/NimbusSetup.kt
@@ -104,7 +104,7 @@ private fun Context.reportError(message: String, e: Throwable) {
 fun NimbusException.isReportableError(): Boolean {
     return when (this) {
         is NimbusException.ClientException -> false
-        else -> true
+        else -> false
     }
 }
 
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/search/SearchDialogController.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/search/SearchDialogController.kt
index 6725aa64a0..d3e7f17a86 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/search/SearchDialogController.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/search/SearchDialogController.kt
@@ -84,13 +84,13 @@ class SearchDialogController(
         }
 
         when (url) {
-            "about:crashes" -> {
+/*            "about:crashes" -> {
                 // The list of past crashes can be accessed via "settings > about", but desktop and
                 // fennec users may be used to navigating to "about:crashes". So we intercept this here
                 // and open the crash list activity instead.
                 activity.startActivity(Intent(activity, CrashListActivity::class.java))
                 store.dispatch(AwesomeBarAction.EngagementFinished(abandoned = false))
-            }
+            }*/
             "about:addons" -> {
                 val directions =
                     SearchDialogFragmentDirections.actionGlobalAddonsManagementFragment()
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 9197b274db..77d6eee674 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -2314,10 +2314,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      * A user preference indicating that crash reports should always be automatically sent. This can be updated
      * through the unsubmitted crash dialog or through data choice preferences.
      */
-    var crashReportAlwaysSend by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_crash_reporting_always_report),
-        default = false,
-    )
+    var crashReportAlwaysSend = false
+//        appContext.getPreferenceKey(R.string.pref_key_crash_reporting_always_report),
+//        default = false,
+//    )
 
     /**
      * Indicates whether or not we should use the new crash reporter dialog.
diff --git a/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java b/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java
index 8e4b210580..e838c11913 100644
--- a/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java
+++ b/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java
@@ -38,7 +38,7 @@ public class CrashHandler implements Thread.UncaughtExceptionHandler {
   private static final String LOGTAG = "GeckoCrashHandler";
   private static final Thread MAIN_THREAD = Thread.currentThread();
   private static final String DEFAULT_SERVER_URL =
-      "https://crash-reports.mozilla.com/submit?id=%1$s&version=%2$s&buildid=%3$s";
+      "";
 
   // Context for getting device information
   private @Nullable final Context mAppContext;
