diff --git a/mobile/android/fenix/app/src/main/java/org/ironfoxoss/ironfox/NoopCrashService.kt b/mobile/android/fenix/app/src/main/java/org/ironfoxoss/ironfox/NoopCrashService.kt
new file mode 100644
index 0000000000..9dc712c3ff
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/org/ironfoxoss/ironfox/NoopCrashService.kt
@@ -0,0 +1,23 @@
+/* Hi, I'm a stub. ;) */
+
+/* Based on https://github.com/ghostery/user-agent-android/blob/b634c81054bfdf378ef1c6668053cb043995a6a1/patches/0011-Disabling-Telemetry-CrashReports.patch (MPL-2.0) */
+
+package org.ironfoxoss.ironfox
+
+import mozilla.components.lib.crash.Crash
+import mozilla.components.lib.crash.service.CrashReporterService
+import mozilla.components.concept.base.crash.Breadcrumb
+
+class NoopCrashService : CrashReporterService {
+    override val id: String = ""
+
+    override val name: String = ""
+
+    override fun createCrashReportUrl(identifier: String): String? = null
+
+    override fun report(throwable: Throwable, breadcrumbs: ArrayList<Breadcrumb>): String? = null
+
+    override fun report(crash: Crash.NativeCodeCrash): String? = null
+
+    override fun report(crash: Crash.UncaughtExceptionCrash): String? = null
+}
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/debugsettings/navigation/DebugDrawerRoute.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/debugsettings/navigation/DebugDrawerRoute.kt
index 8d4b2daebe..283ba2f3a6 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/debugsettings/navigation/DebugDrawerRoute.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/debugsettings/navigation/DebugDrawerRoute.kt
@@ -65,10 +65,10 @@ enum class DebugDrawerRoute(val route: String, @param:StringRes val title: Int)
         route = "addons_debug_tools",
         title = R.string.debug_drawer_addons_tools_title,
     ),
-    CrashDebugTools(
+/*    CrashDebugTools(
         route = "crash_debug_tools",
         title = R.string.crash_debug_tools_title,
-    ),
+    ),*/
     ;
 
     companion object {
@@ -173,14 +173,14 @@ enum class DebugDrawerRoute(val route: String, @param:StringRes val title: Int)
                         }
                     }
 
-                    CrashDebugTools -> {
+/*                   CrashDebugTools -> {
                         onClick = {
                             debugDrawerStore.dispatch(DebugDrawerAction.NavigateTo.CrashDebugTools)
                         }
                         content = {
                             CrashTools()
                         }
-                    }
+                    }*/
                 }
 
                 DebugDrawerDestination(
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/debugsettings/store/DebugDrawerAction.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/debugsettings/store/DebugDrawerAction.kt
index 15ff8f9459..1fc422fef7 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/debugsettings/store/DebugDrawerAction.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/debugsettings/store/DebugDrawerAction.kt
@@ -76,7 +76,7 @@ sealed class DebugDrawerAction : Action {
         /**
          * [NavigateTo] action fired when the debug drawer needs to navigate to [CrashTools].
          */
-        object CrashDebugTools : NavigateTo()
+        // object CrashDebugTools : NavigateTo()
     }
 
     /**
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/debugsettings/store/DebugDrawerNavigationMiddleware.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/debugsettings/store/DebugDrawerNavigationMiddleware.kt
index 1e17f81bda..a0fe4020fb 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/debugsettings/store/DebugDrawerNavigationMiddleware.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/debugsettings/store/DebugDrawerNavigationMiddleware.kt
@@ -49,8 +49,8 @@ class DebugDrawerNavigationMiddleware(
                     navController.navigate(route = DebugDrawerRoute.RegionDebugTools.route)
                 is DebugDrawerAction.NavigateTo.AddonsDebugTools ->
                     navController.navigate(route = DebugDrawerRoute.AddonsDebugTools.route)
-                is DebugDrawerAction.NavigateTo.CrashDebugTools ->
-                    navController.navigate(route = DebugDrawerRoute.CrashDebugTools.route)
+                // is DebugDrawerAction.NavigateTo.CrashDebugTools ->
+                    // navController.navigate(route = DebugDrawerRoute.CrashDebugTools.route)
                 is DebugDrawerAction.OnBackPressed -> navController.popBackStack()
                 is DebugDrawerAction.DrawerOpened, DebugDrawerAction.DrawerClosed -> Unit // no-op
             }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
index 5340aa5258..fbaf09b577 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
@@ -496,10 +496,10 @@ open class FenixApplication : LocaleAwareApplication(), Provider {
     }
 
     private fun setupCrashReporting() {
-        components
+/*        components
             .analytics
             .crashReporter
-            .install(this)
+            .install(this)*/
     }
 
     protected open fun initializeNimbus() {
@@ -527,7 +527,7 @@ open class FenixApplication : LocaleAwareApplication(), Provider {
      */
     private fun beginSetupMegazord() {
         // Rust components must be initialized at the very beginning, before any other Rust call, ...
-        AppServicesInitializer.init(components.analytics.crashReporter)
+        AppServicesInitializer.init()
     }
 
     @OptIn(DelicateCoroutinesApi::class) // GlobalScope usage
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/search/SearchDialogController.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/search/SearchDialogController.kt
index 819b24954e..0f9bb0a905 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/search/SearchDialogController.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/search/SearchDialogController.kt
@@ -83,13 +83,13 @@ class SearchDialogController(
         }
 
         when (url) {
-            "about:crashes" -> {
+/*            "about:crashes" -> {
                 // The list of past crashes can be accessed via "settings > about", but desktop and
                 // fennec users may be used to navigating to "about:crashes". So we intercept this here
                 // and open the crash list activity instead.
                 val directions = SearchDialogFragmentDirections.actionCrashListFragment()
                 navController.navigate(directions)
-            }
+            }*/
             "about:addons" -> {
                 val directions =
                     SearchDialogFragmentDirections.actionGlobalAddonsManagementFragment()
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
index b2b40dd764..c767a93a99 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
@@ -218,7 +218,7 @@ class SecretSettingsFragment : PreferenceFragmentCompat() {
         }
 
         requirePreference<SwitchPreference>(R.string.pref_key_use_new_crash_reporter).apply {
-            isVisible = true
+            isVisible = false
             isChecked = context.settings().useNewCrashReporterDialog
             onPreferenceChangeListener =
                 Preference.OnPreferenceChangeListener { _, newValue ->
@@ -286,7 +286,7 @@ class SecretSettingsFragment : PreferenceFragmentCompat() {
         }
 
         requirePreference<SwitchPreference>(R.string.pref_key_crash_pull_never_show_again).apply {
-            isVisible = true
+            isVisible = false
             isChecked = context.settings().crashPullNeverShowAgain
             onPreferenceChangeListener = SharedPreferenceUpdater()
         }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 0bd15b53a6..96bc5909d5 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -534,10 +534,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
                 true,
             )
 
-    var crashReportChoice by stringPreference(
-        appContext.getPreferenceKey(R.string.pref_key_crash_reporting_choice),
-        default = CrashReportOption.Ask.toString(),
-    )
+    var crashReportChoice = CrashReportOption.Never.toString()
+//        appContext.getPreferenceKey(R.string.pref_key_crash_reporting_choice),
+//        default = CrashReportOption.Ask.toString(),
+//    )
 
     val isRemoteDebuggingEnabled by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_remote_debugging),
@@ -847,10 +847,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      * Indicates if the user denies to ever see again the Remote Settings crash
      * pull UI.
      */
-    var crashPullNeverShowAgain: Boolean by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_crash_pull_never_show_again),
-        default = false,
-    )
+    var crashPullNeverShowAgain: Boolean = true
+//        appContext.getPreferenceKey(R.string.pref_key_crash_pull_never_show_again),
+//        default = false,
+//    )
 
     @VisibleForTesting
     internal fun timeNowInMillis(): Long = System.currentTimeMillis()
