diff --git a/.buildconfig.yml b/.buildconfig.yml
index d0a9cd0..ffa04fc 100644
--- a/.buildconfig.yml
+++ b/.buildconfig.yml
@@ -8,15 +8,15 @@ projects:
       - name: glean
         type: aar
     description: 'The Glean SDK is a modern approach for a Telemetry library and is part of the Glean project.'
-  glean-native:
-    path: glean-core/android-native
-    artifactId: glean-native
-    publications:
-      - name: glean-native
-        type: aar
-      - name: glean-native-forUnitTests
-        type: jar
-    description: 'The native libglean_ffi library for use with the Glean SDK.'
+#  glean-native:
+#    path: glean-core/android-native
+#    artifactId: glean-native
+#    publications:
+#      - name: glean-native
+#        type: aar
+#      - name: glean-native-forUnitTests
+#        type: jar
+#    description: 'The native libglean_ffi library for use with the Glean SDK.'
   glean-sample-app:
     path: samples/android/app
     artifactId: glean-sample-app
diff --git a/settings.gradle b/settings.gradle
index 23a74d7..c481541 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -38,7 +38,7 @@ def setupProject(name, projectProps) {
 def yaml = new Yaml()
 def buildconfig = yaml.load(new File(rootDir, '.buildconfig.yml').newInputStream())
 buildconfig.projects.each { project ->
-    setupProject(project.key, project.value)
+    if (!project.key.startsWith("glean-sample") || !project.key.startsWith("glean-native")) { setupProject(project.key, project.value) }
 }
 
 gradle.projectsLoaded { ->
diff --git a/glean-core/android/build.gradle b/glean-core/android/build.gradle
index d2d114a..c8d2019 100644
--- a/glean-core/android/build.gradle
+++ b/glean-core/android/build.gradle
@@ -99,14 +99,14 @@ afterEvaluate {
         def testTask = tasks["test${variantName}UnitTest"]
     }
 
-    def gleanNative = configurations.getByName("gleanNative")
+/*    def gleanNative = configurations.getByName("gleanNative")
     android.libraryVariants.all { variant ->
         def variantName = variant.name.capitalize();
         def compileTask = tasks["compile${variantName}Kotlin"]
 
         compileTask.dependsOn(generateUniffiBindings)
         variant.registerJavaGeneratingTask(generateUniffiBindings, gleanNative.singleFile)
-    }
+    }*/
 
     if (project.hasProperty("coverage")) {
         jacoco {
