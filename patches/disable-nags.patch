diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingFragment.kt
index e5ab956ac3..4d1ef3de39 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingFragment.kt
@@ -349,7 +349,7 @@ class OnboardingFragment : Fragment() {
     }
 
     private fun enableSearchBarCFRForNewUser() {
-        requireContext().settings().shouldShowSearchBarCFR = FxNimbus.features.encourageSearchCfr.value().enabled
+        requireContext().settings().shouldShowSearchBarCFR = false
     }
 
     private fun isNotDefaultBrowser(context: Context) =
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 7f19ba4304..0f29d724a6 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -198,7 +198,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     )
 
     val canShowCfr: Boolean
-        get() = (System.currentTimeMillis() - lastCfrShownTimeInMillis) > THREE_DAYS_MS
+        get() = false
 
     var forceEnableZoom by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_accessibility_force_enable_zoom),
@@ -611,10 +611,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     /**
      * Indicates if the user has completed successfully first translation.
      */
-    var showFirstTimeTranslation: Boolean by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_show_first_time_translation),
-        default = true,
-    )
+    var showFirstTimeTranslation: Boolean = false
+//        appContext.getPreferenceKey(R.string.pref_key_show_first_time_translation),
+//        default = true,
+//    )
 
     /**
      * Indicates if the user wants translations to automatically be offered as a popup of the dialog.
@@ -783,12 +783,12 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      * This will lead to a performance regression since that function can be expensive to call.
      */
     fun checkIfFenixIsDefaultBrowserOnAppResume(): Boolean {
-        val prefKey = appContext.getPreferenceKey(R.string.pref_key_default_browser)
-        val isDefaultBrowserNow = isDefaultBrowserBlocking()
-        val wasDefaultBrowserOnLastResume =
-            this.preferences.getBoolean(prefKey, isDefaultBrowserNow)
-        this.preferences.edit { putBoolean(prefKey, isDefaultBrowserNow) }
-        return isDefaultBrowserNow && !wasDefaultBrowserOnLastResume
+//        val prefKey = appContext.getPreferenceKey(R.string.pref_key_default_browser)
+//        val isDefaultBrowserNow = isDefaultBrowserBlocking()
+//        val wasDefaultBrowserOnLastResume =
+//            this.preferences.getBoolean(prefKey, isDefaultBrowserNow)
+//        this.preferences.edit { putBoolean(prefKey, isDefaultBrowserNow) }
+        return false
     }
 
     /**
@@ -800,40 +800,40 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         return browsers.isDefaultBrowser
     }
 
-    var reEngagementNotificationShown by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_re_engagement_notification_shown),
-        default = false,
-    )
+    var reEngagementNotificationShown = true
+//        appContext.getPreferenceKey(R.string.pref_key_re_engagement_notification_shown),
+//        default = false,
+//    )
 
     /**
      * Check if we should set the re-engagement notification.
      */
     fun shouldSetReEngagementNotification(): Boolean {
-        return numberOfAppLaunches <= 1 && !reEngagementNotificationShown
+        return false
     }
 
     /**
      * Check if we should show the re-engagement notification.
      */
     fun shouldShowReEngagementNotification(): Boolean {
-        return !reEngagementNotificationShown && !isDefaultBrowserBlocking()
+        return false
     }
 
     /**
      * Indicates if the re-engagement notification feature is enabled
      */
-    var reEngagementNotificationEnabled by lazyFeatureFlagPreference(
-        key = appContext.getPreferenceKey(R.string.pref_key_re_engagement_notification_enabled),
-        default = { FxNimbus.features.reEngagementNotification.value().enabled },
-        featureFlag = true,
-    )
+    var reEngagementNotificationEnabled = false
+//        key = appContext.getPreferenceKey(R.string.pref_key_re_engagement_notification_enabled),
+//        default = { FxNimbus.features.reEngagementNotification.value().enabled },
+//        featureFlag = true,
+//    )
 
     /**
      * Indicates if the re-engagement notification feature is enabled
      */
     val reEngagementNotificationType: Int
         get() =
-            FxNimbus.features.reEngagementNotification.value().type
+            0
 
     val shouldUseAutoBatteryTheme by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_auto_battery_theme),
@@ -893,30 +893,30 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     /**
      * Indicates if the total cookie protection CRF should be shown.
      */
-    var shouldShowEraseActionCFR by lazyFeatureFlagPreference(
-        appContext.getPreferenceKey(R.string.pref_key_should_show_erase_action_popup),
-        featureFlag = true,
-        default = { feltPrivateBrowsingEnabled },
-    )
+    var shouldShowEraseActionCFR = false
+//        appContext.getPreferenceKey(R.string.pref_key_should_show_erase_action_popup),
+//        featureFlag = true,
+//        default = { feltPrivateBrowsingEnabled },
+//    )
 
     /**
      * Indicates if the cookie banners CRF should be shown.
      */
-    var shouldShowCookieBannersCFR by lazyFeatureFlagPreference(
-        appContext.getPreferenceKey(R.string.pref_key_should_show_cookie_banners_action_popup),
-        featureFlag = true,
-        default = { shouldShowCookieBannerUI },
-    )
+    var shouldShowCookieBannersCFR = false
+//        appContext.getPreferenceKey(R.string.pref_key_should_show_cookie_banners_action_popup),
+//        featureFlag = true,
+//        default = { shouldShowCookieBannerUI },
+//    )
 
-    var shouldShowTabSwipeCFR by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_toolbar_tab_swipe_cfr),
-        default = false,
-    )
+    var shouldShowTabSwipeCFR = false
+//        appContext.getPreferenceKey(R.string.pref_key_toolbar_tab_swipe_cfr),
+//        default = false,
+//    )
 
-    var hasShownTabSwipeCFR by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_toolbar_has_shown_tab_swipe_cfr),
-        default = false,
-    )
+    var hasShownTabSwipeCFR = true
+//        appContext.getPreferenceKey(R.string.pref_key_toolbar_has_shown_tab_swipe_cfr),
+//        default = false,
+//    )
 
     val blockCookiesSelectionInCustomTrackingProtection by stringPreference(
         key = appContext.getPreferenceKey(R.string.pref_key_tracking_protection_custom_cookies_select),
@@ -1192,11 +1192,11 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     )
 
     private val userNeedsToVisitInstallableSites: Boolean
-        get() = pwaInstallableVisitCount.underMaxCount()
+        get() = false
 
     val shouldShowPwaCfr: Boolean
         get() {
-            if (!canShowCfr) return false
+            return false
             // We only want to show this on the 3rd time a user visits a site
             if (userNeedsToVisitInstallableSites) return false
 
@@ -1212,42 +1212,42 @@ class Settings(private val appContext: Context) : PreferencesHolder {
             return !userKnowsAboutPwas
         }
 
-    var userKnowsAboutPwas by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_user_knows_about_pwa),
-        default = false,
-    )
+    var userKnowsAboutPwas = true
+//        appContext.getPreferenceKey(R.string.pref_key_user_knows_about_pwa),
+//        default = false,
+//    )
 
-    var shouldShowOpenInAppBanner by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_should_show_open_in_app_banner),
-        default = true,
-    )
+    var shouldShowOpenInAppBanner = false
+//        appContext.getPreferenceKey(R.string.pref_key_should_show_open_in_app_banner),
+//        default = true,
+//    )
 
     val shouldShowOpenInAppCfr: Boolean
-        get() = canShowCfr && shouldShowOpenInAppBanner
+        get() = false
 
-    var shouldShowAutoCloseTabsBanner by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_should_show_auto_close_tabs_banner),
-        default = true,
-    )
+    var shouldShowAutoCloseTabsBanner = false
+//        appContext.getPreferenceKey(R.string.pref_key_should_show_auto_close_tabs_banner),
+//        default = true,
+//    )
 
-    var shouldShowLockPbmBanner by lazyFeatureFlagPreference(
-        appContext.getPreferenceKey(R.string.pref_key_should_show_lock_pbm_banner),
-        featureFlag = FxNimbus.features.privateBrowsingLock.value().enabled,
-        default = { true },
-    )
+    var shouldShowLockPbmBanner = false
+//        appContext.getPreferenceKey(R.string.pref_key_should_show_lock_pbm_banner),
+//        featureFlag = FxNimbus.features.privateBrowsingLock.value().enabled,
+//        default = { true },
+//    )
 
-    var shouldShowInactiveTabsOnboardingPopup by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_should_show_inactive_tabs_popup),
-        default = true,
-    )
+    var shouldShowInactiveTabsOnboardingPopup = false
+//        appContext.getPreferenceKey(R.string.pref_key_should_show_inactive_tabs_popup),
+//        default = true,
+//    )
 
     /**
      * Indicates if the auto-close dialog for inactive tabs has been dismissed before.
      */
-    var hasInactiveTabsAutoCloseDialogBeenDismissed by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_has_inactive_tabs_auto_close_dialog_dismissed),
-        default = false,
-    )
+    var hasInactiveTabsAutoCloseDialogBeenDismissed = true
+//        appContext.getPreferenceKey(R.string.pref_key_has_inactive_tabs_auto_close_dialog_dismissed),
+//        default = false,
+//    )
 
     /**
      * Indicates if the auto-close dialog should be visible based on
@@ -1256,7 +1256,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      * and if the auto-close setting is already set to [closeTabsAfterOneMonth].
      */
     fun shouldShowInactiveTabsAutoCloseDialog(numbersOfTabs: Int): Boolean {
-        return !hasInactiveTabsAutoCloseDialogBeenDismissed &&
+        return false &&
             numbersOfTabs >= INACTIVE_TAB_MINIMUM_TO_SHOW_AUTO_CLOSE_DIALOG &&
             !closeTabsAfterOneMonth
     }
@@ -1665,11 +1665,11 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     /**
      * Indicates if sync onboarding CFR should be shown.
      */
-    var showSyncCFR by lazyFeatureFlagPreference(
-        appContext.getPreferenceKey(R.string.pref_key_should_show_sync_cfr),
-        featureFlag = true,
-        default = { mr2022Sections[Mr2022Section.SYNC_CFR] == true },
-    )
+    var showSyncCFR = false
+//        appContext.getPreferenceKey(R.string.pref_key_should_show_sync_cfr),
+//        featureFlag = true,
+//        default = { mr2022Sections[Mr2022Section.SYNC_CFR] == true },
+//    )
 
     /**
      * Indicates if home onboarding dialog should be shown.
@@ -1883,10 +1883,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     /**
      * Indicates if the search bar CFR should be displayed to the user.
      */
-    var shouldShowSearchBarCFR by booleanPreference(
-        key = appContext.getPreferenceKey(R.string.pref_key_should_searchbar_cfr),
-        default = false,
-    )
+    var shouldShowSearchBarCFR = false
+//        key = appContext.getPreferenceKey(R.string.pref_key_should_searchbar_cfr),
+//        default = false,
+//    )
 
     /**
      * Indicates whether or not to use remote server search configuration.
@@ -1900,10 +1900,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     /**
      * Indicates if the menu CFR should be displayed to the user.
      */
-    var shouldShowMenuCFR by booleanPreference(
-        key = appContext.getPreferenceKey(R.string.pref_key_menu_cfr),
-        default = true,
-    )
+    var shouldShowMenuCFR = false
+//        key = appContext.getPreferenceKey(R.string.pref_key_menu_cfr),
+//        default = true,
+//    )
 
     /**
      * Get the current mode for how https-only is enabled.
@@ -2114,10 +2114,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     /**
      * Indicates first time engaging with signup
      */
-    var isFirstTimeEngagingWithSignup: Boolean by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_first_time_engage_with_signup),
-        default = true,
-    )
+    var isFirstTimeEngagingWithSignup: Boolean = false
+//        appContext.getPreferenceKey(R.string.pref_key_first_time_engage_with_signup),
+//        default = true,
+//    )
 
     /**
      * Indicates if the user has chosen to show sponsored search suggestions in the awesomebar.
@@ -2269,7 +2269,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      */
     val shouldShowSetAsDefaultPrompt: Boolean
         get() =
-            (System.currentTimeMillis() - lastSetAsDefaultPromptShownTimeInMillis) >
+            false && (System.currentTimeMillis() - lastSetAsDefaultPromptShownTimeInMillis) >
                 DAYS_BETWEEN_DEFAULT_BROWSER_PROMPTS * ONE_DAY_MS &&
                 numberOfSetAsDefaultPromptShownTimes < MAX_NUMBER_OF_DEFAULT_BROWSER_PROMPTS &&
                 coldStartsBetweenSetAsDefaultPrompts >= APP_COLD_STARTS_TO_SHOW_DEFAULT_PROMPT
@@ -2430,44 +2430,44 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     /**
      * Indicates if the user has completed the setup step for choosing the toolbar location
      */
-    var hasCompletedSetupStepToolbar by booleanPreference(
-        key = appContext.getPreferenceKey(R.string.pref_key_setup_step_toolbar),
-        default = false,
-    )
+    var hasCompletedSetupStepToolbar = true
+//        key = appContext.getPreferenceKey(R.string.pref_key_setup_step_toolbar),
+//        default = false,
+//    )
 
     /**
      * Indicates if the user has completed the setup step for choosing the theme
      */
-    var hasCompletedSetupStepTheme by booleanPreference(
-        key = appContext.getPreferenceKey(R.string.pref_key_setup_step_theme),
-        default = false,
-    )
+    var hasCompletedSetupStepTheme = true
+//        key = appContext.getPreferenceKey(R.string.pref_key_setup_step_theme),
+//        default = false,
+//    )
 
     /**
      * Indicates if the user has completed the setup step for exploring extensions
      */
-    var hasCompletedSetupStepExtensions by booleanPreference(
-        key = appContext.getPreferenceKey(R.string.pref_key_setup_step_extensions),
-        default = false,
-    )
+    var hasCompletedSetupStepExtensions = true
+//        key = appContext.getPreferenceKey(R.string.pref_key_setup_step_extensions),
+//        default = false,
+//    )
 
     /**
      * Indicates if this is the default browser.
      */
-    var isDefaultBrowser by booleanPreference(
-        key = appContext.getPreferenceKey(R.string.pref_key_default_browser),
-        default = false,
-    )
+    var isDefaultBrowser = true
+//        key = appContext.getPreferenceKey(R.string.pref_key_default_browser),
+//        default = false,
+//    )
 
     /**
      * Indicates whether or not to show the checklist feature.
      */
-    var showSetupChecklist by lazyFeatureFlagPreference(
-        key = appContext.getPreferenceKey(R.string.pref_key_setup_checklist_complete),
-        default = {
-            FxNimbus.features.setupChecklist.value().enabled &&
-                    canShowAddSearchWidgetPrompt(AppWidgetManager.getInstance(appContext))
-        },
-        featureFlag = true,
-    )
+    var showSetupChecklist = false
+//        key = appContext.getPreferenceKey(R.string.pref_key_setup_checklist_complete),
+//        default = {
+//            FxNimbus.features.setupChecklist.value().enabled &&
+//                    canShowAddSearchWidgetPrompt(AppWidgetManager.getInstance(appContext))
+//        },
+//        featureFlag = true,
+//    )
 }
