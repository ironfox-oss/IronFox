diff --git a/mobile/android/fenix/app/proguard-rules.pro b/mobile/android/fenix/app/proguard-rules.pro
index 982ef996de..4002614795 100644
--- a/mobile/android/fenix/app/proguard-rules.pro
+++ b/mobile/android/fenix/app/proguard-rules.pro
@@ -6,16 +6,16 @@
 
 # Recommended config via https://docs.sentry.io/clients/java/modules/android/#manual-integration
 # Since we don't obfuscate, we don't need to use their Gradle plugin to upload ProGuard mappings.
--keepattributes LineNumberTable,SourceFile
--dontwarn org.slf4j.**
--dontwarn javax.**
+#-keepattributes LineNumberTable,SourceFile
+#-dontwarn org.slf4j.**
+#-dontwarn javax.**
 
 # Our addition: this class is saved to disk via Serializable, which ProGuard doesn't like.
 # If we exclude this, upload silently fails (Sentry swallows a NPE so we don't crash).
 # I filed https://github.com/getsentry/sentry-java/issues/572
 #
 # If Sentry ever mysteriously stops working after we upgrade it, this could be why.
--keep class io.sentry.event.Event { *; }
+#-keep class io.sentry.event.Event { *; }
 
 ####################################################################################################
 # Android and GeckoView built-ins
@@ -73,53 +73,53 @@
 # Adjust
 ####################################################################################################
 
--keep public class com.adjust.sdk.** { *; }
--keep class com.google.android.gms.common.ConnectionResult {
-    int SUCCESS;
-}
--keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {
-    com.google.android.gms.ads.identifier.AdvertisingIdClient$Info getAdvertisingIdInfo(android.content.Context);
-}
--keep class com.google.android.gms.ads.identifier.AdvertisingIdClient$Info {
-    java.lang.String getId();
-    boolean isLimitAdTrackingEnabled();
-}
--keep public class com.android.installreferrer.** { *; }
--keep class dalvik.system.VMRuntime {
-    java.lang.String getRuntime();
-}
--keep class android.os.Build {
-    java.lang.String[] SUPPORTED_ABIS;
-    java.lang.String CPU_ABI;
-}
--keep class android.content.res.Configuration {
-    android.os.LocaledList getLocales();
-    java.util.Locale locale;
-}
--keep class android.os.LocaleList {
-    java.util.Locale get(int);
-}
+#-keep public class com.adjust.sdk.** { *; }
+#-keep class com.google.android.gms.common.ConnectionResult {
+#    int SUCCESS;
+#}
+#-keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {
+#    com.google.android.gms.ads.identifier.AdvertisingIdClient$Info getAdvertisingIdInfo(android.content.Context);
+#}
+#-keep class com.google.android.gms.ads.identifier.AdvertisingIdClient$Info {
+#    java.lang.String getId();
+#    boolean isLimitAdTrackingEnabled();
+#}
+#-keep public class com.android.installreferrer.** { *; }
+#-keep class dalvik.system.VMRuntime {
+#    java.lang.String getRuntime();
+#}
+#-keep class android.os.Build {
+#    java.lang.String[] SUPPORTED_ABIS;
+#    java.lang.String CPU_ABI;
+#}
+#-keep class android.content.res.Configuration {
+#    android.os.LocaledList getLocales();
+#    java.util.Locale locale;
+#}
+#-keep class android.os.LocaleList {
+#    java.util.Locale get(int);
+#}
 
 # Keep code generated from Glean Metrics
--keep class org.mozilla.fenix.GleanMetrics.** {  *; }
+#-keep class org.mozilla.fenix.GleanMetrics.** {  *; }
 
 # Keep motionlayout internal methods
 # https://github.com/mozilla-mobile/fenix/issues/2094
--keep class androidx.constraintlayout.** { *; }
+#-keep class androidx.constraintlayout.** { *; }
 
 # Keep adjust relevant classes
--keep class com.adjust.sdk.** { *; }
--keep class com.google.android.gms.common.ConnectionResult {
-    int SUCCESS;
-}
--keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {
-    com.google.android.gms.ads.identifier.AdvertisingIdClient$Info getAdvertisingIdInfo(android.content.Context);
-}
--keep class com.google.android.gms.ads.identifier.AdvertisingIdClient$Info {
-    java.lang.String getId();
-    boolean isLimitAdTrackingEnabled();
-}
--keep public class com.android.installreferrer.** { *; }
+#-keep class com.adjust.sdk.** { *; }
+#-keep class com.google.android.gms.common.ConnectionResult {
+#    int SUCCESS;
+#}
+#-keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {
+#    com.google.android.gms.ads.identifier.AdvertisingIdClient$Info getAdvertisingIdInfo(android.content.Context);
+#}
+#-keep class com.google.android.gms.ads.identifier.AdvertisingIdClient$Info {
+#    java.lang.String getId();
+#    boolean isLimitAdTrackingEnabled();
+#}
+#-keep public class com.android.installreferrer.** { *; }
 
 # Keep Android Lifecycle methods
 # https://bugzilla.mozilla.org/show_bug.cgi?id=1596302
@@ -130,3 +130,11 @@
 -dontwarn java.beans.IntrospectionException
 -dontwarn java.beans.Introspector
 -dontwarn java.beans.PropertyDescriptor
+
+####################################################################################################
+# Checker Framework
+####################################################################################################
+
+-dontwarn org.checkerframework.checker.nullness.qual.EnsuresNonNull
+-dontwarn org.checkerframework.checker.nullness.qual.EnsuresNonNullIf
+-dontwarn org.checkerframework.checker.nullness.qual.RequiresNonNull
diff --git a/mobile/android/fenix/app/src/main/AndroidManifest.xml b/mobile/android/fenix/app/src/main/AndroidManifest.xml
index 600faec5bd..ff22a251d1 100644
--- a/mobile/android/fenix/app/src/main/AndroidManifest.xml
+++ b/mobile/android/fenix/app/src/main/AndroidManifest.xml
@@ -740,7 +740,7 @@
             android:name=".messaging.NotificationDismissedService"
             android:exported="false" />
 
-        <service
+        <!-- <service
             android:name=".push.FirebasePushService"
             android:exported="false">
             <intent-filter>
@@ -756,7 +756,7 @@
             android:value="false" />
         <meta-data
             android:name="firebase_analytics_collection_deactivated"
-            android:value="true" />
+            android:value="true" /> -->
         <!-- Removes the default Workmanager  initialization so that we can use on-demand initializer. -->
         <provider
             android:name="androidx.startup.InitializationProvider"
@@ -771,14 +771,14 @@
 
         <!-- For adjust pre-installs -->
         <!-- https://dev.adjust.com/en/sdk/android/setup/preinstalled#system-installer-receiver-->
-        <receiver
+        <!-- <receiver
             android:name="com.adjust.sdk.AdjustPreinstallReferrerReceiver"
             android:exported="true"
             tools:ignore="ExportedReceiver">
             <intent-filter>
                 <action android:name="com.attribution.SYSTEM_INSTALLER_REFERRER" />
             </intent-filter>
-        </receiver>
+        </receiver> -->
     </application>
 
 </manifest>
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/home/HomeFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/home/HomeFragment.kt
index 8892db30a2..288797595f 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/home/HomeFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/home/HomeFragment.kt
@@ -82,8 +82,8 @@ import org.mozilla.fenix.components.appstate.AppAction
 import org.mozilla.fenix.components.appstate.AppAction.ContentRecommendationsAction
 import org.mozilla.fenix.components.appstate.AppAction.MessagingAction
 import org.mozilla.fenix.components.appstate.AppAction.MessagingAction.MicrosurveyAction
-import org.mozilla.fenix.components.appstate.AppAction.ReviewPromptAction.CheckIfEligibleForReviewPrompt
-import org.mozilla.fenix.components.appstate.AppAction.ReviewPromptAction.ReviewPromptShown
+//import org.mozilla.fenix.components.appstate.AppAction.ReviewPromptAction.CheckIfEligibleForReviewPrompt
+//import org.mozilla.fenix.components.appstate.AppAction.ReviewPromptAction.ReviewPromptShown
 import org.mozilla.fenix.components.appstate.AppState
 import org.mozilla.fenix.components.components
 import org.mozilla.fenix.components.toolbar.BottomToolbarContainerView
@@ -143,8 +143,8 @@ import org.mozilla.fenix.onboarding.HomeScreenPopupManager
 import org.mozilla.fenix.onboarding.WidgetPinnedReceiver
 import org.mozilla.fenix.perf.MarkersFragmentLifecycleCallbacks
 import org.mozilla.fenix.perf.StartupTimeline
-import org.mozilla.fenix.reviewprompt.ReviewPromptState
-import org.mozilla.fenix.reviewprompt.ReviewPromptState.Eligible.Type
+//import org.mozilla.fenix.reviewprompt.ReviewPromptState
+//import org.mozilla.fenix.reviewprompt.ReviewPromptState.Eligible.Type
 import org.mozilla.fenix.search.SearchDialogFragment
 import org.mozilla.fenix.search.awesomebar.AwesomeBarComposable
 import org.mozilla.fenix.search.toolbar.DefaultSearchSelectorController
@@ -1114,7 +1114,7 @@ class HomeFragment : Fragment() {
         requireComponents.core.tabCollectionStorage.unregister(collectionStorageObserver)
 
         // Trigger review prompt logic and show the appropriate prompt variation if applicable
-        requireComponents.appStore.dispatch(CheckIfEligibleForReviewPrompt)
+//        requireComponents.appStore.dispatch(CheckIfEligibleForReviewPrompt)
     }
 
     @VisibleForTesting
@@ -1316,7 +1316,7 @@ class HomeFragment : Fragment() {
     }
 
     private fun observeReviewPromptState() {
-        consumeFlow(requireComponents.appStore) { appStates ->
+/*        consumeFlow(requireComponents.appStore) { appStates ->
             observeReviewPromptState(
                 appStates = appStates,
                 dispatchAction = requireComponents.appStore::dispatch,
@@ -1330,7 +1330,7 @@ class HomeFragment : Fragment() {
                     )
                 },
             )
-        }
+        }*/
     }
 
     @VisibleForTesting
@@ -1340,7 +1340,7 @@ class HomeFragment : Fragment() {
         tryShowPlayStorePrompt: suspend () -> Unit,
         showCustomPrompt: () -> Unit,
     ) {
-        appStates
+/*        appStates
             .map { it.reviewPrompt }
             .distinctUntilChanged()
             .collect {
@@ -1355,7 +1355,7 @@ class HomeFragment : Fragment() {
                         dispatchAction(ReviewPromptShown)
                     }
                 }
-            }
+            }*/
     }
 
     companion object {
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 3fa564af49..b4d9ae3831 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -1981,7 +1981,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      */
     var shouldShowMarketingOnboarding by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_should_show_marketing_onboarding),
-        default = true,
+        default = false,
     )
 
     var shouldUseComposableToolbar by lazyFeatureFlagPreference(
diff --git a/mobile/android/fenix/app/src/main/res/xml/preferences.xml b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
index 5058f40c0b..0c0a575f53 100644
--- a/mobile/android/fenix/app/src/main/res/xml/preferences.xml
+++ b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
@@ -206,10 +206,10 @@
         android:title="@string/preferences_category_about"
         app:iconSpaceReserved="false"
         android:layout="@layout/preference_category_no_icon_style">
-        <androidx.preference.Preference
+        <!-- <androidx.preference.Preference
             android:key="@string/pref_key_rate"
             app:iconSpaceReserved="false"
-            android:title="@string/preferences_rate" />
+            android:title="@string/preferences_rate" /> -->
 
         <androidx.preference.Preference
             android:key="@string/pref_key_about"
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/Adjust.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/Adjust.java
new file mode 100644
index 000000000000..d377e98bbf05
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/Adjust.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+import android.content.Context;
+
+public class Adjust {
+    public static void initSdk(AdjustConfig adjustConfig) {
+    }
+
+    public static void trackEvent(AdjustEvent event) {
+    }
+
+    public static void onResume() {
+    }
+
+    public static void onPause() {
+    }
+
+    public static void enable() {
+    }
+
+    public static void disable() {
+    }
+
+    public static void gdprForgetMe(final Context context) {
+    }
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustAttribution.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustAttribution.java
new file mode 100644
index 000000000000..ab6b3badbdb1
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustAttribution.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+import java.io.Serializable;
+
+public class AdjustAttribution implements Serializable {
+    public String network;
+    public String campaign;
+    public String adgroup;
+    public String creative;
+
+    @Override
+    public boolean equals(Object other) {
+        return false;
+    }
+
+    @Override
+    public int hashCode() {
+        return 0;
+    }
+
+    @Override
+    public String toString() {
+        return "";
+    }
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustConfig.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustConfig.java
new file mode 100644
index 000000000000..f563917d2070
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustConfig.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+import android.content.Context;
+
+import java.util.List;
+
+public class AdjustConfig {
+    public static final String ENVIRONMENT_SANDBOX = "sandbox";
+    public static final String ENVIRONMENT_PRODUCTION = "production";
+
+    public AdjustConfig(Context context, String appToken, String environment) {
+    }
+
+    public AdjustConfig(Context context, String appToken, String environment, boolean allowSuppressLogLevel) {
+    }
+
+    public void setOnAttributionChangedListener(OnAttributionChangedListener onAttributionChangedListener) {
+    }
+
+    public void enablePreinstallTracking() {
+    }
+
+    public void setLogLevel(LogLevel logLevel) {
+    }
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustEvent.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustEvent.java
new file mode 100644
index 000000000000..0b4d80ed4b2c
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustEvent.java
@@ -0,0 +1,31 @@
+package com.adjust.sdk;
+
+/**
+ * Created by pfms on 05/11/14.
+ */
+public class AdjustEvent {
+
+    public AdjustEvent(String eventToken) {
+    }
+
+    public void setRevenue(double revenue, String currency) {
+    }
+
+    public void addCallbackParameter(String key, String value) {
+    }
+
+    public void addPartnerParameter(String key, String value) {
+    }
+
+    public void setOrderId(String orderId) {
+    }
+
+    public void setCallbackId(String callbackId) {
+    }
+
+    public void setProductId(String productId) {
+    }
+
+    public void setPurchaseToken(String purchaseToken) {
+    }
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/Constants.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/Constants.java
new file mode 100644
index 000000000000..bfaeee26e8e1
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/Constants.java
@@ -0,0 +1,18 @@
+//
+//  Constants.java
+//  Adjust
+//
+//  Created by keyboardsurfer on 2013-11-08.
+//  Copyright (c) 2012-2014 adjust GmbH. All rights reserved.
+//  See the file MIT-LICENSE for copying permission.
+//
+
+package com.adjust.sdk;
+
+/**
+ * @author keyboardsurfer
+ * @since 8.11.13
+ */
+public interface Constants {
+    String ADJUST_PREINSTALL_SYSTEM_PROPERTY_PATH = "adjust.preinstall.path";
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/LogLevel.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/LogLevel.java
new file mode 100644
index 000000000000..f4ef17f4c492
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/LogLevel.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+import android.util.Log;
+
+/**
+ * Created by pfms on 11/03/15.
+ */
+public enum LogLevel {
+    VERBOSE(Log.VERBOSE), DEBUG(Log.DEBUG), INFO(Log.INFO), WARN(Log.WARN), ERROR(Log.ERROR), ASSERT(Log.ASSERT), SUPPRESS(8);
+    final int androidLogLevel;
+
+    LogLevel(final int androidLogLevel) {
+        this.androidLogLevel = androidLogLevel;
+    }
+
+    public int getAndroidLogLevel() {
+        return androidLogLevel;
+    }
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/OnAttributionChangedListener.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/OnAttributionChangedListener.java
new file mode 100644
index 000000000000..7efa1c6804c6
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/OnAttributionChangedListener.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+public interface OnAttributionChangedListener {
+    void onAttributionChanged(AdjustAttribution attribution);
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/google/android/play/core/review/FakeReviewManager.java b/mobile/android/fenix/app/src/main/java/com/google/android/play/core/review/FakeReviewManager.java
new file mode 100644
index 000000000000..0e6e73cc6248
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/google/android/play/core/review/FakeReviewManager.java
@@ -0,0 +1,24 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+package com.google.android.play.core.review;
+
+import android.app.Activity;
+import android.content.Context;
+import com.google.android.gms.tasks.Task;
+
+public class FakeReviewManager implements ReviewManager {
+
+    public FakeReviewManager(Context context) {
+    }
+
+    public Task<Void> launchReviewFlow(Activity activity, ReviewInfo reviewInfo) {
+        return null;
+    }
+
+    public Task<ReviewInfo> requestReviewFlow() {
+        return null;
+    }
+
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/google/android/play/core/review/ReviewInfo.java b/mobile/android/fenix/app/src/main/java/com/google/android/play/core/review/ReviewInfo.java
new file mode 100644
index 000000000000..04cbef9f1395
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/google/android/play/core/review/ReviewInfo.java
@@ -0,0 +1,10 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+package com.google.android.play.core.review;
+
+import android.os.Parcelable;
+
+public abstract class ReviewInfo extends Object implements Parcelable {
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/google/android/play/core/review/ReviewManager.java b/mobile/android/fenix/app/src/main/java/com/google/android/play/core/review/ReviewManager.java
new file mode 100644
index 000000000000..dd2c36c50411
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/google/android/play/core/review/ReviewManager.java
@@ -0,0 +1,14 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+package com.google.android.play.core.review;
+
+import android.app.Activity;
+import com.google.android.gms.tasks.Task;
+
+public interface ReviewManager {
+
+    abstract Task<Void> launchReviewFlow(Activity activity, ReviewInfo reviewInfo);
+    abstract Task<ReviewInfo> requestReviewFlow();
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/google/android/play/core/review/ReviewManagerFactory.java b/mobile/android/fenix/app/src/main/java/com/google/android/play/core/review/ReviewManagerFactory.java
new file mode 100644
index 000000000000..9bc9c5841f23
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/google/android/play/core/review/ReviewManagerFactory.java
@@ -0,0 +1,15 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+package com.google.android.play.core.review;
+
+import android.content.Context;
+
+public class ReviewManagerFactory {
+
+    static public ReviewManager create(Context context) {
+        return new FakeReviewManager(context);
+    }
+
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/google/firebase/messaging/FirebaseMessagingService.java b/mobile/android/fenix/app/src/main/java/com/google/firebase/messaging/FirebaseMessagingService.java
new file mode 100644
index 0000000000..4d5fd8153d
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/google/firebase/messaging/FirebaseMessagingService.java
@@ -0,0 +1,42 @@
+// Copyright 2020 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+package com.google.firebase.messaging;
+
+import android.app.Service;
+import android.content.Intent;
+import android.os.Binder;
+import android.os.IBinder;
+
+public class FirebaseMessagingService extends Service {
+
+    private final IBinder mBinder = new Binder();
+
+    public void onMessageReceived(RemoteMessage message) {
+    }
+
+    public void onMessageSent(String msgId) {
+    }
+
+    public void onNewToken(String token) {
+    }
+
+    public void onSendError(String msgId, Exception exception) {
+    }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return mBinder;
+    }
+
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/google/firebase/messaging/RemoteMessage.java b/mobile/android/fenix/app/src/main/java/com/google/firebase/messaging/RemoteMessage.java
new file mode 100644
index 0000000000..9ad59a31e4
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/google/firebase/messaging/RemoteMessage.java
@@ -0,0 +1,33 @@
+// Copyright 2020 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+package com.google.firebase.messaging;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import java.util.Map;
+
+public class RemoteMessage implements Parcelable {
+
+    public int describeContents() {
+        return 0;
+    }
+
+    public void writeToParcel(Parcel out, int flags) {
+    }
+
+    public Map<String, String> getData() {
+        return null;
+    }
+
+}
diff --git a/mobile/android/fenix/app/src/main/java/mozilla/components/lib/crash/sentry/SentryService.kt b/mobile/android/fenix/app/src/main/java/mozilla/components/lib/crash/sentry/SentryService.kt
new file mode 100644
index 0000000000..422132a996
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/mozilla/components/lib/crash/sentry/SentryService.kt
@@ -0,0 +1,41 @@
+/* Hi, I'm a stub. ;) */
+
+package mozilla.components.lib.crash.sentry
+
+import android.content.Context
+import mozilla.components.concept.base.crash.Breadcrumb as MozillaBreadcrumb
+import mozilla.components.lib.crash.Crash
+import mozilla.components.lib.crash.service.CrashReporterService
+
+class SentryService(
+    private val applicationContext: Context,
+    private val dsn: String,
+    private val tags: Map<String, String> = emptyMap(),
+    private val environment: String? = null,
+    private val sendEventForNativeCrashes: Boolean = false,
+    private val sentryProjectUrl: String? = null,
+    private val sendCaughtExceptions: Boolean = false,
+) : CrashReporterService {
+
+    override val id: String = ""
+    override val name: String = ""
+
+    override fun createCrashReportUrl(identifier: String): String? = null
+
+    override fun report(crash: Crash.UncaughtExceptionCrash): String? {
+        return null
+    }
+
+    override fun report(crash: Crash.NativeCodeCrash): String? {
+        return null
+    }
+
+    override fun report(throwable: Throwable, breadcrumbs: ArrayList<MozillaBreadcrumb>): String? {
+        return null
+    }
+
+    @Synchronized
+    fun initIfNeeded() {
+        return
+    }
+}
diff --git a/mobile/android/fenix/app/src/main/java/mozilla/components/lib/push/firebase/AbstractFirebasePushService.kt b/mobile/android/fenix/app/src/main/java/mozilla/components/lib/push/firebase/AbstractFirebasePushService.kt
new file mode 100644
index 0000000000..b50a6f03a2
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/mozilla/components/lib/push/firebase/AbstractFirebasePushService.kt
@@ -0,0 +1,32 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+package mozilla.components.lib.push.firebase
+
+import android.content.Context
+import com.google.firebase.messaging.FirebaseMessagingService
+import com.google.firebase.messaging.RemoteMessage
+import mozilla.components.concept.push.PushService
+
+abstract class AbstractFirebasePushService() : FirebaseMessagingService(), PushService {
+
+    override fun start(context: Context) {
+    }
+
+    override fun onNewToken(newToken: String) {
+    }
+
+    override fun onMessageReceived(remoteMessage: RemoteMessage?) {
+    }
+
+    final override fun stop() {
+    }
+
+    override fun deleteToken() {
+    }
+
+    override fun isServiceAvailable(context: Context): Boolean {
+        return false
+    }
+}
