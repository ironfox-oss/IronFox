diff --git a/mobile/android/android-components/.buildconfig.yml b/mobile/android/android-components/.buildconfig.yml
--- a/mobile/android/android-components/.buildconfig.yml
+++ b/mobile/android/android-components/.buildconfig.yml
@@ -1586,16 +1586,6 @@
     - support-base
     - support-test
     - tooling-lint
-  lib-push-firebase:
-    description: An implementation of concept-push for the Firebase Message Service.
-    path: components/lib/push-firebase
-    publish: true
-    upstream_dependencies:
-    - concept-base
-    - concept-push
-    - support-base
-    - support-test
-    - tooling-lint
   lib-state:
     description: A library for maintaining application state.
     path: components/lib/state
diff --git a/mobile/android/android-components/plugins/dependencies/src/main/java/DependenciesPlugin.kt b/mobile/android/android-components/plugins/dependencies/src/main/java/DependenciesPlugin.kt
--- a/mobile/android/android-components/plugins/dependencies/src/main/java/DependenciesPlugin.kt
+++ b/mobile/android/android-components/plugins/dependencies/src/main/java/DependenciesPlugin.kt
@@ -89,13 +89,8 @@
     const val protobuf_plugin = "0.9.4"
     object Google {
         const val accompanist = "0.37.0"
-        const val firebase_messaging = "24.1.0"
         const val material = "1.12.0"
         const val osslicenses_plugin = "0.10.6"
-        const val play_review = "2.0.2"
-        const val play_services_ads_id = "18.1.0"
-        const val play_services_base = "18.5.0"
-        const val play_services_fido = "21.1.0"
         const val protobuf = "4.29.0" // Keep Protobuf in sync with the version used by AppServices.
     }
 
@@ -272,14 +267,8 @@
     const val thirdparty_disklrucache = "com.jakewharton:disklrucache:${Versions.disklrucache}"
     const val thirdparty_androidsvg = "com.caverock:androidsvg-aar:${Versions.androidsvg}"
 
-    const val firebase_messaging = "com.google.firebase:firebase-messaging:${Versions.Google.firebase_messaging}"
 
     const val osslicenses_plugin = "com.google.android.gms:oss-licenses-plugin:${Versions.Google.osslicenses_plugin}"
-    const val play_review = "com.google.android.play:review:${Versions.Google.play_review}"
-    const val play_review_ktx = "com.google.android.play:review-ktx:${Versions.Google.play_review}"
-    const val play_services_ads_id = "com.google.android.gms:play-services-ads-identifier:${Versions.Google.play_services_ads_id}"
-    const val play_services_base = "com.google.android.gms:play-services-base:${Versions.Google.play_services_base}"
-    const val play_services_fido = "com.google.android.gms:play-services-fido:${Versions.Google.play_services_fido}"
     const val protobuf_compiler = "com.google.protobuf:protoc:${Versions.Google.protobuf}"
     const val protobuf_javalite = "com.google.protobuf:protobuf-javalite:${Versions.Google.protobuf}"
 }
diff --git a/mobile/android/fenix/.buildconfig.yml b/mobile/android/fenix/.buildconfig.yml
--- a/mobile/android/fenix/.buildconfig.yml
+++ b/mobile/android/fenix/.buildconfig.yml
@@ -64,7 +64,6 @@
     - lib-crash-sentry
     - lib-dataprotect
     - lib-publicsuffixlist
-    - lib-push-firebase
     - lib-state
     - service-digitalassetlinks
     - service-firefox-accounts
diff --git a/mobile/android/fenix/app/build.gradle b/mobile/android/fenix/app/build.gradle
--- a/mobile/android/fenix/app/build.gradle
+++ b/mobile/android/fenix/app/build.gradle
@@ -657,7 +657,6 @@
 
     implementation project(':lib-crash')
     implementation project(':lib-crash-sentry')
-    implementation project(':lib-push-firebase')
     implementation project(':lib-state')
     implementation project(':lib-dataprotect')
     testImplementation project(':support-test-fakes')
@@ -708,16 +707,6 @@
     implementation ComponentsDependencies.protobuf_javalite
     implementation ComponentsDependencies.google_material
 
-    implementation(libs.adjust)
-    implementation(libs.installreferrer)
-
-    // Required for the Google Advertising ID
-    implementation ComponentsDependencies.play_services_ads_id
-
-    // Required for in-app reviews
-    implementation ComponentsDependencies.play_review
-    implementation ComponentsDependencies.play_review_ktx
-
     androidTestImplementation ComponentsDependencies.testing_fastlane
     androidTestImplementation ComponentsDependencies.testing_falcon
 
diff --git a/mobile/android/fenix/app/proguard-rules.pro b/mobile/android/fenix/app/proguard-rules.pro
--- a/mobile/android/fenix/app/proguard-rules.pro
+++ b/mobile/android/fenix/app/proguard-rules.pro
@@ -1,23 +1,6 @@
 -dontobfuscate
 
 ####################################################################################################
-# Sentry
-####################################################################################################
-
-# Recommended config via https://docs.sentry.io/clients/java/modules/android/#manual-integration
-# Since we don't obfuscate, we don't need to use their Gradle plugin to upload ProGuard mappings.
--keepattributes LineNumberTable,SourceFile
--dontwarn org.slf4j.**
--dontwarn javax.**
-
-# Our addition: this class is saved to disk via Serializable, which ProGuard doesn't like.
-# If we exclude this, upload silently fails (Sentry swallows a NPE so we don't crash).
-# I filed https://github.com/getsentry/sentry-java/issues/572
-#
-# If Sentry ever mysteriously stops working after we upgrade it, this could be why.
--keep class io.sentry.event.Event { *; }
-
-####################################################################################################
 # Android and GeckoView built-ins
 ####################################################################################################
 
@@ -69,58 +52,6 @@
 
 -keep class org.mozilla.fenix.**ViewModel { *; }
 
-####################################################################################################
-# Adjust
-####################################################################################################
-
--keep public class com.adjust.sdk.** { *; }
--keep class com.google.android.gms.common.ConnectionResult {
-    int SUCCESS;
-}
--keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {
-    com.google.android.gms.ads.identifier.AdvertisingIdClient$Info getAdvertisingIdInfo(android.content.Context);
-}
--keep class com.google.android.gms.ads.identifier.AdvertisingIdClient$Info {
-    java.lang.String getId();
-    boolean isLimitAdTrackingEnabled();
-}
--keep public class com.android.installreferrer.** { *; }
--keep class dalvik.system.VMRuntime {
-    java.lang.String getRuntime();
-}
--keep class android.os.Build {
-    java.lang.String[] SUPPORTED_ABIS;
-    java.lang.String CPU_ABI;
-}
--keep class android.content.res.Configuration {
-    android.os.LocaledList getLocales();
-    java.util.Locale locale;
-}
--keep class android.os.LocaleList {
-    java.util.Locale get(int);
-}
-
-# Keep code generated from Glean Metrics
--keep class org.mozilla.fenix.GleanMetrics.** {  *; }
-
-# Keep motionlayout internal methods
-# https://github.com/mozilla-mobile/fenix/issues/2094
--keep class androidx.constraintlayout.** { *; }
-
-# Keep adjust relevant classes
--keep class com.adjust.sdk.** { *; }
--keep class com.google.android.gms.common.ConnectionResult {
-    int SUCCESS;
-}
--keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {
-    com.google.android.gms.ads.identifier.AdvertisingIdClient$Info getAdvertisingIdInfo(android.content.Context);
-}
--keep class com.google.android.gms.ads.identifier.AdvertisingIdClient$Info {
-    java.lang.String getId();
-    boolean isLimitAdTrackingEnabled();
-}
--keep public class com.android.installreferrer.** { *; }
-
 # Keep Android Lifecycle methods
 # https://bugzilla.mozilla.org/show_bug.cgi?id=1596302
 -keep class androidx.lifecycle.** { *; }
@@ -130,3 +61,11 @@
 -dontwarn java.beans.IntrospectionException
 -dontwarn java.beans.Introspector
 -dontwarn java.beans.PropertyDescriptor
+
+####################################################################################################
+# Checker Framework
+####################################################################################################
+
+-dontwarn org.checkerframework.checker.nullness.qual.EnsuresNonNull
+-dontwarn org.checkerframework.checker.nullness.qual.EnsuresNonNullIf
+-dontwarn org.checkerframework.checker.nullness.qual.RequiresNonNull
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/Adjust.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/Adjust.java
new file mode 100644
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/Adjust.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+import android.content.Context;
+
+public class Adjust {
+    public static void onCreate(AdjustConfig adjustConfig) {
+    }
+
+    public static void trackEvent(AdjustEvent event) {
+    }
+
+    public static void onResume() {
+    }
+
+    public static void onPause() {
+    }
+
+    public static void setEnabled(boolean enabled) {
+    }
+
+    public static void gdprForgetMe(final Context context) {
+    }
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustAttribution.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustAttribution.java
new file mode 100644
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustAttribution.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+import java.io.Serializable;
+
+public class AdjustAttribution implements Serializable {
+    public String network;
+    public String campaign;
+    public String adgroup;
+    public String creative;
+
+    @Override
+    public boolean equals(Object other) {
+        return false;
+    }
+
+    @Override
+    public int hashCode() {
+        return 0;
+    }
+
+    @Override
+    public String toString() {
+        return "";
+    }
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustConfig.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustConfig.java
new file mode 100644
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustConfig.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+import android.content.Context;
+
+import java.util.List;
+
+public class AdjustConfig {
+    public static final String ENVIRONMENT_SANDBOX = "sandbox";
+    public static final String ENVIRONMENT_PRODUCTION = "production";
+
+    public AdjustConfig(Context context, String appToken, String environment) {
+    }
+
+    public AdjustConfig(Context context, String appToken, String environment, boolean allowSuppressLogLevel) {
+    }
+
+    public void setOnAttributionChangedListener(OnAttributionChangedListener onAttributionChangedListener) {
+    }
+
+    public void setPreinstallTrackingEnabled(boolean preinstallTrackingEnabled) {
+    }
+
+    public void setLogLevel(LogLevel logLevel) {
+    }
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustEvent.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustEvent.java
new file mode 100644
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/AdjustEvent.java
@@ -0,0 +1,31 @@
+package com.adjust.sdk;
+
+/**
+ * Created by pfms on 05/11/14.
+ */
+public class AdjustEvent {
+
+    public AdjustEvent(String eventToken) {
+    }
+
+    public void setRevenue(double revenue, String currency) {
+    }
+
+    public void addCallbackParameter(String key, String value) {
+    }
+
+    public void addPartnerParameter(String key, String value) {
+    }
+
+    public void setOrderId(String orderId) {
+    }
+
+    public void setCallbackId(String callbackId) {
+    }
+
+    public void setProductId(String productId) {
+    }
+
+    public void setPurchaseToken(String purchaseToken) {
+    }
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/Constants.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/Constants.java
new file mode 100644
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/Constants.java
@@ -0,0 +1,18 @@
+//
+//  Constants.java
+//  Adjust
+//
+//  Created by keyboardsurfer on 2013-11-08.
+//  Copyright (c) 2012-2014 adjust GmbH. All rights reserved.
+//  See the file MIT-LICENSE for copying permission.
+//
+
+package com.adjust.sdk;
+
+/**
+ * @author keyboardsurfer
+ * @since 8.11.13
+ */
+public interface Constants {
+    String ADJUST_PREINSTALL_SYSTEM_PROPERTY_PATH = "adjust.preinstall.path";
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/LogLevel.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/LogLevel.java
new file mode 100644
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/LogLevel.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+import android.util.Log;
+
+/**
+ * Created by pfms on 11/03/15.
+ */
+public enum LogLevel {
+    VERBOSE(Log.VERBOSE), DEBUG(Log.DEBUG), INFO(Log.INFO), WARN(Log.WARN), ERROR(Log.ERROR), ASSERT(Log.ASSERT), SUPRESS(8);
+    final int androidLogLevel;
+
+    LogLevel(final int androidLogLevel) {
+        this.androidLogLevel = androidLogLevel;
+    }
+
+    public int getAndroidLogLevel() {
+        return androidLogLevel;
+    }
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/adjust/sdk/OnAttributionChangedListener.java b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/OnAttributionChangedListener.java
new file mode 100644
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/adjust/sdk/OnAttributionChangedListener.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2012-2017 adjust GmbH,
+ * http://www.adjust.com
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.adjust.sdk;
+
+public interface OnAttributionChangedListener {
+    void onAttributionChanged(AdjustAttribution attribution);
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/google/firebase/messaging/FirebaseMessagingService.java b/mobile/android/fenix/app/src/main/java/com/google/firebase/messaging/FirebaseMessagingService.java
new file mode 100644
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/google/firebase/messaging/FirebaseMessagingService.java
@@ -0,0 +1,42 @@
+// Copyright 2020 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+package com.google.firebase.messaging;
+
+import android.app.Service;
+import android.content.Intent;
+import android.os.Binder;
+import android.os.IBinder;
+
+public class FirebaseMessagingService extends Service {
+
+    private final IBinder mBinder = new Binder();
+
+    public void onMessageReceived(RemoteMessage message) {
+    }
+
+    public void onMessageSent(String msgId) {
+    }
+
+    public void onNewToken(String token) {
+    }
+
+    public void onSendError(String msgId, Exception exception) {
+    }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return mBinder;
+    }
+
+}
diff --git a/mobile/android/fenix/app/src/main/java/com/google/firebase/messaging/RemoteMessage.java b/mobile/android/fenix/app/src/main/java/com/google/firebase/messaging/RemoteMessage.java
new file mode 100644
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/com/google/firebase/messaging/RemoteMessage.java
@@ -0,0 +1,33 @@
+// Copyright 2020 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+package com.google.firebase.messaging;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import java.util.Map;
+
+public class RemoteMessage implements Parcelable {
+
+    public int describeContents() {
+        return 0;
+    }
+
+    public void writeToParcel(Parcel out, int flags) {
+    }
+
+    public Map<String, String> getData() {
+        return null;
+    }
+
+}
diff --git a/mobile/android/fenix/app/src/main/java/mozilla/components/lib/push/firebase/AbstractFirebasePushService.kt b/mobile/android/fenix/app/src/main/java/mozilla/components/lib/push/firebase/AbstractFirebasePushService.kt
new file mode 100644
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/mozilla/components/lib/push/firebase/AbstractFirebasePushService.kt
@@ -0,0 +1,32 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+package mozilla.components.lib.push.firebase
+
+import android.content.Context
+import com.google.firebase.messaging.FirebaseMessagingService
+import com.google.firebase.messaging.RemoteMessage
+import mozilla.components.concept.push.PushService
+
+abstract class AbstractFirebasePushService() : FirebaseMessagingService(), PushService {
+
+    override fun start(context: Context) {
+    }
+
+    override fun onNewToken(newToken: String) {
+    }
+
+    override fun onMessageReceived(remoteMessage: RemoteMessage?) {
+    }
+
+    final override fun stop() {
+    }
+
+    override fun deleteToken() {
+    }
+
+    override fun isServiceAvailable(context: Context): Boolean {
+        return false
+    }
+}
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt
@@ -10,7 +10,6 @@
 import androidx.compose.runtime.Composable
 import androidx.compose.ui.platform.LocalContext
 import androidx.core.app.NotificationManagerCompat
-import com.google.android.play.core.review.ReviewManagerFactory
 import mozilla.components.feature.addons.AddonManager
 import mozilla.components.feature.addons.amo.AMOAddonsProvider
 import mozilla.components.feature.addons.migration.DefaultSupportedAddonsChecker
@@ -180,7 +179,6 @@
 
     val reviewPromptController by lazyMonitored {
         ReviewPromptController(
-            manager = ReviewManagerFactory.create(context),
             reviewSettings = FenixReviewSettings(settings),
         )
     }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/ReviewPromptController.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/ReviewPromptController.kt
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/ReviewPromptController.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/ReviewPromptController.kt
@@ -6,8 +6,6 @@
 
 import android.app.Activity
 import androidx.annotation.VisibleForTesting
-import com.google.android.play.core.review.ReviewInfo
-import com.google.android.play.core.review.ReviewManager
 import kotlinx.coroutines.Dispatchers.Main
 import kotlinx.coroutines.withContext
 import org.mozilla.fenix.GleanMetrics.ReviewPrompt
@@ -45,24 +43,9 @@
  * Controls the Review Prompt behavior.
  */
 class ReviewPromptController(
-    private val manager: ReviewManager,
     private val reviewSettings: ReviewSettings,
     private val timeNowInMillis: () -> Long = { System.currentTimeMillis() },
-    private val tryPromptReview: suspend (Activity) -> Unit = { activity ->
-        val flow = manager.requestReviewFlow()
-
-        withContext(Main) {
-            flow.addOnCompleteListener {
-                if (it.isSuccessful) {
-                    manager.launchReviewFlow(activity, it.result)
-                    recordReviewPromptEvent(
-                        it.result.toString(),
-                        reviewSettings.numberOfAppLaunches,
-                        Date(),
-                    )
-                }
-            }
-        }
+    private val tryPromptReview: suspend (Activity) -> Unit = { _ ->
     },
 ) {
     @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/InstallReferrerMetricsService.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/InstallReferrerMetricsService.kt
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/InstallReferrerMetricsService.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/InstallReferrerMetricsService.kt
@@ -6,14 +6,10 @@
 
 import android.content.Context
 import android.os.RemoteException
-import com.android.installreferrer.api.InstallReferrerClient
-import com.android.installreferrer.api.InstallReferrerStateListener
 import mozilla.components.support.base.log.logger.Logger
 import org.json.JSONException
 import org.json.JSONObject
 import org.mozilla.fenix.FeatureFlags
-import org.mozilla.fenix.GleanMetrics.MetaAttribution
-import org.mozilla.fenix.GleanMetrics.PlayStoreAttribution
 import org.mozilla.fenix.ext.settings
 import org.mozilla.fenix.utils.Settings
 import java.io.UnsupportedEncodingException
@@ -29,83 +25,10 @@
     private val logger = Logger("InstallReferrerMetricsService")
     override val type = MetricServiceType.Data
 
-    private var referrerClient: InstallReferrerClient? = null
-
     override fun start() {
-        if (context.settings().utmParamsKnown) {
-            return
-        }
-
-        val timerId = PlayStoreAttribution.attributionTime.start()
-        val client = InstallReferrerClient.newBuilder(context).build()
-        referrerClient = client
-
-        client.startConnection(
-            object : InstallReferrerStateListener {
-                override fun onInstallReferrerSetupFinished(responseCode: Int) {
-                    PlayStoreAttribution.attributionTime.stopAndAccumulate(timerId)
-                    val firstSession = FirstSessionPing(context)
-                    when (responseCode) {
-                        InstallReferrerClient.InstallReferrerResponse.OK -> {
-                            // Connection established.
-                            val installReferrerResponse = try {
-                                client.installReferrer.installReferrer
-                            } catch (e: RemoteException) {
-                                // We can't do anything about this.
-                                logger.error("Failed to retrieve install referrer response", e)
-                                null
-                            } catch (e: SecurityException) {
-                                logger.error("Failed to retrieve install referrer response", e)
-                                null
-                            }
-
-                            if (installReferrerResponse.isNullOrBlank()) {
-                                return
-                            }
-
-                            PlayStoreAttribution.installReferrerResponse.set(installReferrerResponse)
-
-                            val utmParams = UTMParams.parseUTMParameters(installReferrerResponse)
-                            if (FeatureFlags.META_ATTRIBUTION_ENABLED) {
-                                MetaParams.extractMetaAttribution(utmParams.content)
-                                    ?.recordMetaAttribution()
-                            }
-
-                            utmParams.recordInstallReferrer(context.settings())
-                            context.settings().utmParamsKnown = true
-
-                            firstSession.checkAndSend()
-                        }
-
-                        InstallReferrerClient.InstallReferrerResponse.FEATURE_NOT_SUPPORTED,
-                        InstallReferrerClient.InstallReferrerResponse.DEVELOPER_ERROR,
-                        InstallReferrerClient.InstallReferrerResponse.PERMISSION_ERROR,
-                        -> {
-                            // unrecoverable errors, but we still want to send the first-session ping.
-                            context.settings().utmParamsKnown = true
-                            firstSession.checkAndSend()
-                        }
-
-                        InstallReferrerClient.InstallReferrerResponse.SERVICE_UNAVAILABLE -> {
-                            // Connection couldn't be established.
-                        }
-                    }
-                    // End the connection, and null out the client.
-                    stop()
-                }
-
-                override fun onInstallReferrerServiceDisconnected() {
-                    // Try to restart the connection on the next request to
-                    // Google Play by calling the startConnection() method.
-                    referrerClient = null
-                }
-            },
-        )
     }
 
     override fun stop() {
-        referrerClient?.endConnection()
-        referrerClient = null
     }
 
     override fun track(event: Event) = Unit
@@ -224,12 +147,6 @@
             return
         }
         intoSettings(settings)
-
-        PlayStoreAttribution.source.set(source)
-        PlayStoreAttribution.medium.set(medium)
-        PlayStoreAttribution.campaign.set(campaign)
-        PlayStoreAttribution.content.set(content)
-        PlayStoreAttribution.term.set(term)
     }
 }
 
@@ -324,9 +241,6 @@
      * record META attribution params to telemetry
      */
     fun recordMetaAttribution() {
-        MetaAttribution.app.set(app)
-        MetaAttribution.t.set(t)
-        MetaAttribution.data.set(data)
-        MetaAttribution.nonce.set(nonce)
+        return
     }
 }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MarketingAttributionService.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MarketingAttributionService.kt
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MarketingAttributionService.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MarketingAttributionService.kt
@@ -5,12 +5,7 @@
 package org.mozilla.fenix.components.metrics
 
 import android.content.Context
-import android.os.RemoteException
 import androidx.annotation.VisibleForTesting
-import com.android.installreferrer.api.InstallReferrerClient
-import com.android.installreferrer.api.InstallReferrerStateListener
-import mozilla.components.support.base.log.logger.Logger
-import org.mozilla.fenix.ext.settings
 
 const val GCLID_PREFIX = "gclid="
 const val ADJUST_REFTAG_PREFIX = "adjust_reftag="
@@ -22,67 +17,17 @@
  * This should be only used when user has not gone through the onboarding flow.
  */
 class MarketingAttributionService(private val context: Context) {
-    private val logger = Logger("MarketingAttributionService")
-    private var referrerClient: InstallReferrerClient? = null
 
     /**
      * Starts the connection with the install referrer and handle the response.
      */
     fun start() {
-        val client = InstallReferrerClient.newBuilder(context).build()
-        referrerClient = client
-
-        client.startConnection(
-            object : InstallReferrerStateListener {
-                override fun onInstallReferrerSetupFinished(responseCode: Int) {
-                    when (responseCode) {
-                        InstallReferrerClient.InstallReferrerResponse.OK -> {
-                            // Connection established.
-                            val installReferrerResponse = try {
-                                client.installReferrer.installReferrer
-                            } catch (e: RemoteException) {
-                                // We can't do anything about this.
-                                logger.error("Failed to retrieve install referrer response", e)
-                                null
-                            } catch (e: SecurityException) {
-                                // https://issuetracker.google.com/issues/72926755
-                                logger.error("Failed to retrieve install referrer response", e)
-                                null
-                            }
-
-                            context.settings().shouldShowMarketingOnboarding =
-                                shouldShowMarketingOnboarding(installReferrerResponse)
-
-                            return
-                        }
-
-                        InstallReferrerClient.InstallReferrerResponse.FEATURE_NOT_SUPPORTED,
-                        InstallReferrerClient.InstallReferrerResponse.DEVELOPER_ERROR,
-                        InstallReferrerClient.InstallReferrerResponse.PERMISSION_ERROR,
-                        InstallReferrerClient.InstallReferrerResponse.SERVICE_UNAVAILABLE,
-                        -> {
-                            context.settings().shouldShowMarketingOnboarding = false
-                            return
-                        }
-                    }
-
-                    // End the connection, and null out the client.
-                    stop()
-                }
-
-                override fun onInstallReferrerServiceDisconnected() {
-                    referrerClient = null
-                }
-            },
-        )
     }
 
     /**
      * Stops the connection with the install referrer.
      */
     fun stop() {
-        referrerClient?.endConnection()
-        referrerClient = null
     }
 
     /**
@@ -90,15 +35,10 @@
      * showing the marketing onboarding flow.
      */
     companion object {
-        private val marketingPrefixes = listOf(GCLID_PREFIX, ADJUST_REFTAG_PREFIX)
-
         @VisibleForTesting
+        @Suppress("UNUSED_PARAMETER")
         internal fun shouldShowMarketingOnboarding(installReferrerResponse: String?): Boolean {
-            if (installReferrerResponse.isNullOrBlank()) {
-                return false
-            }
-
-            return marketingPrefixes.any { installReferrerResponse.startsWith(it, ignoreCase = true) }
+            return false
         }
     }
 }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MetricsUtils.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MetricsUtils.kt
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MetricsUtils.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MetricsUtils.kt
@@ -7,9 +7,6 @@
 import android.content.Context
 import android.util.Base64
 import androidx.annotation.VisibleForTesting
-import com.google.android.gms.ads.identifier.AdvertisingIdClient
-import com.google.android.gms.common.GooglePlayServicesNotAvailableException
-import com.google.android.gms.common.GooglePlayServicesRepairableException
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.withContext
 import mozilla.components.browser.state.search.SearchEngine
@@ -107,26 +104,8 @@
      */
     @Suppress("TooGenericExceptionCaught")
     @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
-    internal fun getAdvertisingID(context: Context): String? {
-        return try {
-            AdvertisingIdClient.getAdvertisingIdInfo(context).id
-        } catch (e: GooglePlayServicesNotAvailableException) {
-            Logger.debug("getAdvertisingID() - Google Play not installed on the device")
-            null
-        } catch (e: GooglePlayServicesRepairableException) {
-            Logger.debug("getAdvertisingID() - recoverable error connecting to Google Play Services")
-            null
-        } catch (e: IllegalStateException) {
-            // This is unlikely to happen, as this should be running off the main thread.
-            Logger.debug("getAdvertisingID() - AdvertisingIdClient must be called off the main thread")
-            null
-        } catch (e: IOException) {
-            Logger.debug("getAdvertisingID() - unable to connect to Google Play Services")
-            null
-        } catch (e: NullPointerException) {
-            Logger.debug("getAdvertisingID() - no Google Advertising ID available")
-            null
-        }
+    internal fun getAdvertisingID(@Suppress("UNUSED_PARAMETER") context: Context): String? {
+        return null
     }
 
     /**
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -1781,10 +1781,7 @@
     /**
      * Indicates if the marketing onboarding card should be shown to the user.
      */
-    var shouldShowMarketingOnboarding by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_should_show_marketing_onboarding),
-        default = true,
-    )
+    var shouldShowMarketingOnboarding = false
 
     val feltPrivateBrowsingEnabled by lazyFeatureFlagPreference(
         key = appContext.getPreferenceKey(R.string.pref_key_should_enable_felt_privacy),
diff --git a/mobile/android/fenix/app/src/main/res/xml/site_permissions_details_exceptions_preferences.xml b/mobile/android/fenix/app/src/main/res/xml/site_permissions_details_exceptions_preferences.xml
--- a/mobile/android/fenix/app/src/main/res/xml/site_permissions_details_exceptions_preferences.xml
+++ b/mobile/android/fenix/app/src/main/res/xml/site_permissions_details_exceptions_preferences.xml
@@ -3,7 +3,8 @@
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <androidx.preference.PreferenceScreen
-        xmlns:android="http://schemas.android.com/apk/res/android">
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto">
     <androidx.preference.Preference
             android:icon="@drawable/ic_camera_enabled"
             android:key="@string/pref_key_phone_feature_camera"
@@ -44,7 +45,8 @@
         android:icon="@drawable/ic_link"
         android:key="@string/pref_key_browser_feature_media_key_system_access"
         android:title="@string/preference_phone_feature_media_key_system_access"
-        android:summary="@string/preference_option_phone_feature_ask_to_allow"/>
+        android:summary="@string/preference_option_phone_feature_ask_to_allow"
+        app:isPreferenceVisible="false"/>
 
     <androidx.preference.Preference
         android:icon="@drawable/ic_autoplay"
diff --git a/mobile/android/fenix/app/src/main/res/xml/site_permissions_preferences.xml b/mobile/android/fenix/app/src/main/res/xml/site_permissions_preferences.xml
--- a/mobile/android/fenix/app/src/main/res/xml/site_permissions_preferences.xml
+++ b/mobile/android/fenix/app/src/main/res/xml/site_permissions_preferences.xml
@@ -81,6 +81,7 @@
             android:key="@string/pref_key_browser_feature_media_key_system_access"
             android:title="@string/preference_phone_feature_media_key_system_access"
             android:summary="@string/preference_option_phone_feature_ask_to_allow"
+            app:isPreferenceVisible="false"
             app:allowDividerBelow="true"/>
 
         <androidx.preference.Preference
diff --git a/mobile/android/focus-android/app/build.gradle b/mobile/android/focus-android/app/build.gradle
--- a/mobile/android/focus-android/app/build.gradle
+++ b/mobile/android/focus-android/app/build.gradle
@@ -266,10 +266,6 @@
     implementation ComponentsDependencies.androidx_transition
     implementation ComponentsDependencies.androidx_work_runtime
 
-    // Required for in-app reviews
-    implementation ComponentsDependencies.play_review
-    implementation ComponentsDependencies.play_review_ktx
-
     implementation ComponentsDependencies.google_material
 
     implementation ComponentsDependencies.thirdparty_sentry
