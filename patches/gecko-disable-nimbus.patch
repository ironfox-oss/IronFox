diff --git a/toolkit/components/nimbus/ExperimentAPI.sys.mjs b/toolkit/components/nimbus/ExperimentAPI.sys.mjs
index 1f4d51c643..a2507eb8d1 100644
--- a/toolkit/components/nimbus/ExperimentAPI.sys.mjs
+++ b/toolkit/components/nimbus/ExperimentAPI.sys.mjs
@@ -30,13 +30,13 @@ const CRASHREPORTER_ENABLED =
   AppConstants.MOZ_CRASHREPORTER && AppConstants.MOZ_APP_NAME !== "thunderbird";
 
 const IS_MAIN_PROCESS =
-  Services.appinfo.processType === Services.appinfo.PROCESS_TYPE_DEFAULT;
+  false;
 
 const UPLOAD_ENABLED_PREF = "datareporting.healthreport.uploadEnabled";
 const STUDIES_OPT_OUT_PREF = "app.shield.optoutstudies.enabled";
 
 const COLLECTION_ID_PREF = "messaging-system.rsexperimentloader.collection_id";
-const COLLECTION_ID_FALLBACK = "nimbus-desktop-experiments";
+const COLLECTION_ID_FALLBACK = "";
 XPCOMUtils.defineLazyPreferenceGetter(
   lazy,
   "COLLECTION_ID",
diff --git a/toolkit/components/nimbus/lib/ExperimentManager.sys.mjs b/toolkit/components/nimbus/lib/ExperimentManager.sys.mjs
index 165309d17b..b196258d06 100644
--- a/toolkit/components/nimbus/lib/ExperimentManager.sys.mjs
+++ b/toolkit/components/nimbus/lib/ExperimentManager.sys.mjs
@@ -32,7 +32,7 @@ ChromeUtils.defineLazyGetter(lazy, "log", () => {
 /** @typedef {import("./PrefFlipsFeature.sys.mjs").PrefBranch} PrefBranch */
 
 const IS_MAIN_PROCESS =
-  Services.appinfo.processType === Services.appinfo.PROCESS_TYPE_DEFAULT;
+  false;
 
 export const UnenrollmentCause = {
   fromCheckRecipeResult(result) {
@@ -146,57 +146,57 @@ export class ExperimentManager {
         return new Date();
       },
     };
-    Object.defineProperty(context, "activeExperiments", {
-      enumerable: true,
-      get: async () => {
-        await this.store.ready();
-        return this.store.getAllActiveExperiments().map(exp => exp.slug);
-      },
-    });
-    Object.defineProperty(context, "activeRollouts", {
-      enumerable: true,
-      get: async () => {
-        await this.store.ready();
-        return this.store.getAllActiveRollouts().map(rollout => rollout.slug);
-      },
-    });
-    Object.defineProperty(context, "previousExperiments", {
-      enumerable: true,
-      get: async () => {
-        await this.store.ready();
-        return this.store
-          .getAll()
-          .filter(enrollment => !enrollment.active && !enrollment.isRollout)
-          .map(exp => exp.slug);
-      },
-    });
-    Object.defineProperty(context, "previousRollouts", {
-      enumerable: true,
-      get: async () => {
-        await this.store.ready();
-        return this.store
-          .getAll()
-          .filter(enrollment => !enrollment.active && enrollment.isRollout)
-          .map(rollout => rollout.slug);
-      },
-    });
-    Object.defineProperty(context, "enrollments", {
-      enumerable: true,
-      get: async () => {
-        await this.store.ready();
-        return this.store.getAll().map(enrollment => enrollment.slug);
-      },
-    });
-    Object.defineProperty(context, "enrollmentsMap", {
-      enumerable: true,
-      get: async () => {
-        await this.store.ready();
-        return this.store.getAll().reduce((acc, enrollment) => {
-          acc[enrollment.slug] = enrollment.branch.slug;
-          return acc;
-        }, {});
-      },
-    });
+//    Object.defineProperty(context, "activeExperiments", {
+//      enumerable: true,
+//      get: async () => {
+//        await this.store.ready();
+//        return this.store.getAllActiveExperiments().map(exp => exp.slug);
+//      },
+//    });
+//    Object.defineProperty(context, "activeRollouts", {
+//      enumerable: true,
+//      get: async () => {
+//        await this.store.ready();
+//        return this.store.getAllActiveRollouts().map(rollout => rollout.slug);
+//      },
+//    });
+//    Object.defineProperty(context, "previousExperiments", {
+//      enumerable: true,
+//      get: async () => {
+//        await this.store.ready();
+//        return this.store
+//          .getAll()
+//          .filter(enrollment => !enrollment.active && !enrollment.isRollout)
+//          .map(exp => exp.slug);
+//      },
+//    });
+//    Object.defineProperty(context, "previousRollouts", {
+//      enumerable: true,
+//      get: async () => {
+//        await this.store.ready();
+//        return this.store
+//          .getAll()
+//          .filter(enrollment => !enrollment.active && enrollment.isRollout)
+//          .map(rollout => rollout.slug);
+//      },
+//    });
+//    Object.defineProperty(context, "enrollments", {
+//      enumerable: true,
+//      get: async () => {
+//        await this.store.ready();
+//        return this.store.getAll().map(enrollment => enrollment.slug);
+//      },
+//    });
+//    Object.defineProperty(context, "enrollmentsMap", {
+//      enumerable: true,
+//      get: async () => {
+//        await this.store.ready();
+//        return this.store.getAll().reduce((acc, enrollment) => {
+//          acc[enrollment.slug] = enrollment.branch.slug;
+//          return acc;
+//        }, {});
+//      },
+//    });
     return context;
   }
 
diff --git a/toolkit/components/nimbus/lib/RemoteSettingsExperimentLoader.sys.mjs b/toolkit/components/nimbus/lib/RemoteSettingsExperimentLoader.sys.mjs
index d3ab385732..700465258c 100644
--- a/toolkit/components/nimbus/lib/RemoteSettingsExperimentLoader.sys.mjs
+++ b/toolkit/components/nimbus/lib/RemoteSettingsExperimentLoader.sys.mjs
@@ -37,7 +37,7 @@ XPCOMUtils.defineLazyServiceGetter(
 );
 
 const COLLECTION_ID_PREF = "messaging-system.rsexperimentloader.collection_id";
-const COLLECTION_ID_FALLBACK = "nimbus-desktop-experiments";
+const COLLECTION_ID_FALLBACK = "";
 const TARGETING_CONTEXT_TELEMETRY_ENABLED_PREF =
   "nimbus.telemetry.targetingContextEnabled";
 
@@ -49,13 +49,13 @@ const NIMBUS_DEBUG_PREF = "nimbus.debug";
 const NIMBUS_VALIDATION_PREF = "nimbus.validation.enabled";
 const NIMBUS_APPID_PREF = "nimbus.appId";
 
-const SECURE_EXPERIMENTS_COLLECTION_ID = "nimbus-secure-experiments";
+const SECURE_EXPERIMENTS_COLLECTION_ID = "";
 
-const EXPERIMENTS_COLLECTION = "experiments";
-const SECURE_EXPERIMENTS_COLLECTION = "secureExperiments";
+const EXPERIMENTS_COLLECTION = "";
+const SECURE_EXPERIMENTS_COLLECTION = "";
 
 const IS_MAIN_PROCESS =
-  Services.appinfo.processType === Services.appinfo.PROCESS_TYPE_DEFAULT;
+  false;
 
 const RS_COLLECTION_OPTIONS = {
   [EXPERIMENTS_COLLECTION]: {
diff --git a/toolkit/components/normandy/lib/RecipeRunner.sys.mjs b/toolkit/components/normandy/lib/RecipeRunner.sys.mjs
index 087e4ed51e..256972093f 100644
--- a/toolkit/components/normandy/lib/RecipeRunner.sys.mjs
+++ b/toolkit/components/normandy/lib/RecipeRunner.sys.mjs
@@ -36,7 +36,7 @@ ChromeUtils.defineESModuleGetters(lazy, {
 
 const log = LogManager.getLogger("recipe-runner");
 const TIMER_NAME = "recipe-client-addon-run";
-const REMOTE_SETTINGS_COLLECTION = "normandy-recipes-capabilities";
+const REMOTE_SETTINGS_COLLECTION = "";
 const PREF_CHANGED_TOPIC = "nsPref:changed";
 
 const RUN_INTERVAL_PREF = "app.normandy.run_interval_seconds";
diff --git a/toolkit/modules/AppConstants.sys.mjs b/toolkit/modules/AppConstants.sys.mjs
index a794e82288..b14fa739bb 100644
--- a/toolkit/modules/AppConstants.sys.mjs
+++ b/toolkit/modules/AppConstants.sys.mjs
@@ -116,7 +116,7 @@ export var AppConstants = Object.freeze({
 
   MOZ_CRASHREPORTER: @MOZ_CRASHREPORTER_BOOL@,
 
-  MOZ_NORMANDY: @MOZ_NORMANDY_BOOL@,
+  MOZ_NORMANDY: false,
 
   MOZ_MAINTENANCE_SERVICE: @MOZ_MAINTENANCE_SERVICE_BOOL@,
 
diff --git a/toolkit/mozapps/extensions/AddonManager.sys.mjs b/toolkit/mozapps/extensions/AddonManager.sys.mjs
index e09ea87de8..aedc380a5c 100644
--- a/toolkit/mozapps/extensions/AddonManager.sys.mjs
+++ b/toolkit/mozapps/extensions/AddonManager.sys.mjs
@@ -4591,8 +4591,8 @@ AMRemoteSettings = {
    */
   RS_ENTRIES_MAP: {
     installTriggerDeprecation: [
-      "extensions.InstallTriggerImpl.enabled",
-      "extensions.InstallTrigger.enabled",
+//      "extensions.InstallTriggerImpl.enabled",
+//      "extensions.InstallTrigger.enabled",
     ],
     quarantinedDomains: ["extensions.quarantinedDomains.list"],
   },
diff --git a/tools/@types/subs/AppConstants.sys.d.mts b/tools/@types/subs/AppConstants.sys.d.mts
index 04273576bd..0ad1edbda4 100644
--- a/tools/@types/subs/AppConstants.sys.d.mts
+++ b/tools/@types/subs/AppConstants.sys.d.mts
@@ -68,7 +68,7 @@ export const AppConstants: Readonly<{
 
   MOZ_CRASHREPORTER: boolean;
 
-  MOZ_NORMANDY: boolean;
+  MOZ_NORMANDY: false;
 
   MOZ_MAINTENANCE_SERVICE: boolean;
 
