diff --git a/mobile/android/fenix/app/nimbus.fml.yaml b/mobile/android/fenix/app/nimbus.fml.yaml
index 15cacaa7c5..f06b7229f3 100644
--- a/mobile/android/fenix/app/nimbus.fml.yaml
+++ b/mobile/android/fenix/app/nimbus.fml.yaml
@@ -13,15 +13,15 @@ includes:
   - onboarding.fml.yaml
   - messaging-fenix.fml.yaml
 import:
-  - path: ../../android-components/components/browser/engine-gecko/geckoview.fml.yaml
-    channel: release
-    features:
-      pdfjs:
-        - channel: developer
-          value: {
-          download-button: true,
-          open-in-app-button: true
-        }
+#  - path: ../../android-components/components/browser/engine-gecko/geckoview.fml.yaml
+#    channel: release
+#    features:
+#      pdfjs:
+#        - channel: developer
+#          value: {
+#          download-button: true,
+#          open-in-app-button: true
+#        }
   - path: ../../android-components/components/feature/fxsuggest/fxsuggest.fml.yaml
     channel: release
     features:
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/browser/BrowserFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/browser/BrowserFragment.kt
index 935a71c0bb..af5460e2f6 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/browser/BrowserFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/browser/BrowserFragment.kt
@@ -56,7 +56,7 @@ import org.mozilla.fenix.ext.requireComponents
 import org.mozilla.fenix.ext.runIfFragmentIsAttached
 import org.mozilla.fenix.ext.settings
 import org.mozilla.fenix.home.HomeFragment
-import org.mozilla.fenix.nimbus.FxNimbus
+// import org.mozilla.fenix.nimbus.FxNimbus
 import org.mozilla.fenix.settings.quicksettings.protections.cookiebanners.getCookieBannerUIMode
 import org.mozilla.fenix.shortcut.PwaOnboardingObserver
 import org.mozilla.fenix.theme.ThemeManager
@@ -188,7 +188,7 @@ class BrowserFragment : BaseBrowserFragment(), UserInteractionHandler {
 
     private fun initTranslationsAction(context: Context, view: View) {
         if (
-            !FxNimbus.features.translations.value().mainFlowToolbarEnabled
+            false
         ) {
             return
         }
@@ -271,7 +271,7 @@ class BrowserFragment : BaseBrowserFragment(), UserInteractionHandler {
     }
 
     private fun initTranslationsUpdates(context: Context, view: View) {
-        if (!FxNimbus.features.translations.value().mainFlowToolbarEnabled) return
+//        if (!FxNimbus.features.translations.value().mainFlowToolbarEnabled) return
 
         translationsBinding.set(
             feature = TranslationsBinding(
@@ -599,7 +599,7 @@ class BrowserFragment : BaseBrowserFragment(), UserInteractionHandler {
 
     override fun navToQuickSettingsSheet(tab: SessionState, sitePermissions: SitePermissions?) {
         val useCase = requireComponents.useCases.trackingProtectionUseCases
-        FxNimbus.features.cookieBanners.recordExposure()
+//        FxNimbus.features.cookieBanners.recordExposure()
         useCase.containsException(tab.id) { hasTrackingProtectionException ->
             lifecycleScope.launch {
                 val cookieBannersStorage = requireComponents.core.cookieBannersStorage
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/menu/MenuDialogFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/menu/MenuDialogFragment.kt
index aa74e21d1d..e7c5e4722a 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/menu/MenuDialogFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/menu/MenuDialogFragment.kt
@@ -92,7 +92,7 @@ import org.mozilla.fenix.ext.pixelSizeFor
 import org.mozilla.fenix.ext.requireComponents
 import org.mozilla.fenix.ext.runIfFragmentIsAttached
 import org.mozilla.fenix.ext.settings
-import org.mozilla.fenix.nimbus.FxNimbus
+// import org.mozilla.fenix.nimbus.FxNimbus
 import org.mozilla.fenix.settings.SupportUtils
 import org.mozilla.fenix.settings.deletebrowsingdata.deleteAndQuit
 import org.mozilla.fenix.theme.FirefoxTheme
@@ -383,7 +383,7 @@ class MenuDialogFragment : BottomSheetDialogFragment() {
                         browserStore.state.translationEngine.isEngineSupported ?: false
                     val isTranslationSupported =
                         isTranslationEngineSupported &&
-                            FxNimbus.features.translations.value().mainFlowBrowserMenuEnabled
+                            true
                     val isPdf = selectedTab?.content?.isPdf ?: false
                     val isWebCompatEnabled by store.observeAsState(store.state.isWebCompatEnabled) {
                         it.isWebCompatEnabled
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/toolbar/DefaultToolbarMenu.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/toolbar/DefaultToolbarMenu.kt
index e7e19273f9..1aaf569e14 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/toolbar/DefaultToolbarMenu.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/toolbar/DefaultToolbarMenu.kt
@@ -43,7 +43,7 @@ import org.mozilla.fenix.automotive.isAndroidAutomotiveAvailable
 import org.mozilla.fenix.components.accounts.FenixAccountManager
 import org.mozilla.fenix.ext.components
 import org.mozilla.fenix.ext.settings
-import org.mozilla.fenix.nimbus.FxNimbus
+// import org.mozilla.fenix.nimbus.FxNimbus
 import org.mozilla.fenix.theme.ThemeManager
 
 /**
@@ -82,7 +82,7 @@ open class DefaultToolbarMenu(
         get() = store.state.selectedTab
 
     override val menuBuilder by lazy {
-        FxNimbus.features.print.recordExposure()
+//        FxNimbus.features.print.recordExposure()
         WebExtensionBrowserMenuBuilder(
             items = coreMenuItems,
             endOfMenuAlwaysVisible = shouldUseBottomToolbar,
@@ -205,7 +205,7 @@ open class DefaultToolbarMenu(
         val isEngineSupported = store.state.translationEngine.isEngineSupported
         return selectedSession?.let {
             isEngineSupported == true &&
-                FxNimbus.features.translations.value().mainFlowBrowserMenuEnabled
+                true
         } ?: false
     }
 
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
index 5340aa5258..f2f3d0973e 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
@@ -88,7 +88,7 @@ import org.mozilla.fenix.components.appstate.AppAction
 import org.mozilla.fenix.components.initializeGlean
 import org.mozilla.fenix.components.metrics.MozillaProductDetector
 import org.mozilla.fenix.components.startMetricsIfEnabled
-import org.mozilla.fenix.experiments.maybeFetchExperiments
+// import org.mozilla.fenix.experiments.maybeFetchExperiments
 import org.mozilla.fenix.ext.components
 import org.mozilla.fenix.ext.containsQueryParameters
 import org.mozilla.fenix.ext.isCustomEngine
@@ -419,13 +419,13 @@ open class FenixApplication : LocaleAwareApplication(), Provider {
 
         @OptIn(DelicateCoroutinesApi::class) // GlobalScope usage
         fun queueNimbusFetchInForeground() {
-            queue.runIfReadyOrQueue {
+/*            queue.runIfReadyOrQueue {
                 GlobalScope.launch(IO) {
                     components.nimbus.sdk.maybeFetchExperiments(
                         context = this@FenixApplication,
                     )
                 }
-            }
+            }*/
         }
 
         @OptIn(DelicateCoroutinesApi::class) // GlobalScope usage
@@ -506,9 +506,9 @@ open class FenixApplication : LocaleAwareApplication(), Provider {
         beginSetupMegazord()
 
         // This lazily constructs the Nimbus object…
-        val nimbus = components.nimbus.sdk
+        // val nimbus = components.nimbus.sdk
         // … which we then can populate the feature configuration.
-        FxNimbus.initialize { nimbus }
+        // FxNimbus.initialize { nimbus }
     }
 
     /**
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/advanced/DefaultLocaleSettingsController.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/advanced/DefaultLocaleSettingsController.kt
index e387bc4ae0..c8482a0f6b 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/advanced/DefaultLocaleSettingsController.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/advanced/DefaultLocaleSettingsController.kt
@@ -11,7 +11,7 @@ import mozilla.components.browser.state.action.SearchAction
 import mozilla.components.browser.state.store.BrowserStore
 import mozilla.components.support.locale.LocaleManager
 import mozilla.components.support.locale.LocaleUseCases
-import org.mozilla.fenix.nimbus.FxNimbus
+// import org.mozilla.fenix.nimbus.FxNimbus
 import java.util.Locale
 
 interface LocaleSettingsController {
@@ -39,7 +39,7 @@ class DefaultLocaleSettingsController(
         LocaleManager.updateBaseConfiguration(activity, locale)
 
         // Invalidate cached values to use the new locale
-        FxNimbus.features.nimbusValidation.withCachedValue(null)
+//        FxNimbus.features.nimbusValidation.withCachedValue(null)
         activity.recreate()
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
             activity.overrideActivityTransition(Activity.OVERRIDE_TRANSITION_OPEN, 0, 0)
@@ -59,7 +59,7 @@ class DefaultLocaleSettingsController(
         LocaleManager.updateBaseConfiguration(activity, localeSettingsStore.state.localeList[0])
 
         // Invalidate cached values to use the default locale
-        FxNimbus.features.nimbusValidation.withCachedValue(null)
+//        FxNimbus.features.nimbusValidation.withCachedValue(null)
         activity.recreate()
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
             activity.overrideActivityTransition(Activity.OVERRIDE_TRANSITION_OPEN, 0, 0)
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
index b2b40dd764..cfb4a444e9 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
@@ -57,7 +57,7 @@ class SecretSettingsFragment : PreferenceFragmentCompat() {
         }
 
         requirePreference<SwitchPreference>(R.string.pref_key_nimbus_use_preview).apply {
-            isVisible = true
+            isVisible = false
             isChecked = context.settings().nimbusUsePreview
             onPreferenceChangeListener = SharedPreferenceUpdater()
         }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt
index 03d80ed014..b4850bb3eb 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt
@@ -66,7 +66,7 @@ import org.mozilla.fenix.ext.openSetDefaultBrowserOption
 import org.mozilla.fenix.ext.requireComponents
 import org.mozilla.fenix.ext.settings
 import org.mozilla.fenix.ext.showToolbar
-import org.mozilla.fenix.nimbus.FxNimbus
+// import org.mozilla.fenix.nimbus.FxNimbus
 import org.mozilla.fenix.perf.ProfilerViewModel
 import org.mozilla.fenix.settings.account.AccountUiView
 import org.mozilla.fenix.snackbar.FenixSnackbarDelegate
@@ -180,7 +180,7 @@ class SettingsFragment : PreferenceFragmentCompat() {
 
         findPreference<Preference>(
             getPreferenceKey(R.string.pref_key_translation),
-        )?.isVisible = FxNimbus.features.translations.value().globalSettingsEnabled &&
+        )?.isVisible = true &&
             components.core.store.state.translationEngine.isEngineSupported == true
     }
 
@@ -211,10 +211,10 @@ class SettingsFragment : PreferenceFragmentCompat() {
         super.onResume()
 
         // Use nimbus to set the title, and a trivial addition
-        val nimbusValidation = FxNimbus.features.nimbusValidation.value()
+//        val nimbusValidation = FxNimbus.features.nimbusValidation.value()
 
-        val title = nimbusValidation.settingsTitle
-        val suffix = nimbusValidation.settingsPunctuation
+        val title = getString(R.string.settings_title)
+        val suffix = ""
 
         showToolbar("$title$suffix")
 
@@ -561,7 +561,7 @@ class SettingsFragment : PreferenceFragmentCompat() {
         with(settings) {
             findPreference<Preference>(
                 getPreferenceKey(R.string.pref_key_nimbus_experiments),
-            )?.isVisible = showSecretDebugMenuThisSession
+            )?.isVisible = false
             findPreference<Preference>(
                 getPreferenceKey(R.string.pref_key_debug_settings),
             )?.isVisible = showSecretDebugMenuThisSession
@@ -734,7 +734,7 @@ class SettingsFragment : PreferenceFragmentCompat() {
 
     @VisibleForTesting
     internal fun setupCookieBannerPreference(settings: Settings) {
-        FxNimbus.features.cookieBanners.recordExposure()
+//        FxNimbus.features.cookieBanners.recordExposure()
         if (settings.shouldShowCookieBannerUI) {
             with(requirePreference<SwitchPreference>(R.string.pref_key_cookie_banner_private_mode)) {
                 isVisible = settings.shouldShowCookieBannerUI
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationsDialogFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationsDialogFragment.kt
index 472e3bf5a8..1314a912ad 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationsDialogFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationsDialogFragment.kt
@@ -44,7 +44,7 @@ import org.mozilla.fenix.ext.components
 import org.mozilla.fenix.ext.requireComponents
 import org.mozilla.fenix.ext.runIfFragmentIsAttached
 import org.mozilla.fenix.ext.settings
-import org.mozilla.fenix.nimbus.FxNimbus
+// import org.mozilla.fenix.nimbus.FxNimbus
 import org.mozilla.fenix.settings.SupportUtils
 import org.mozilla.fenix.theme.FirefoxTheme
 import org.mozilla.fenix.translations.preferences.downloadlanguages.DownloadLanguageFileDialog
@@ -176,7 +176,7 @@ class TranslationsDialogFragment : BottomSheetDialogFragment() {
                                 translationsDialogState?.let {
                                     TranslationsDialogContent(
                                         learnMoreUrl = learnMoreUrl,
-                                        showPageSettings = FxNimbus.features.translations.value().pageSettingsEnabled,
+                                        showPageSettings = true,
                                         translationsDialogState = it,
                                         onSettingClicked = {
                                             Translations.action.record(
@@ -202,7 +202,7 @@ class TranslationsDialogFragment : BottomSheetDialogFragment() {
                             ) {
                                 TranslationsOptionsDialogContent(
                                     learnMoreUrl = learnMoreUrl,
-                                    showGlobalSettings = FxNimbus.features.translations.value().globalSettingsEnabled,
+                                    showGlobalSettings = true,
                                     isTranslated = translationsDialogState?.isTranslated == true,
                                     initialFrom = translationsDialogState?.initialFrom,
                                     onBackClicked = { translationsVisibility = true },
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationSettingsFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationSettingsFragment.kt
index 7ba0ffb8a8..5124d36172 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationSettingsFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationSettingsFragment.kt
@@ -27,7 +27,7 @@ import org.mozilla.fenix.R
 import org.mozilla.fenix.ext.requireComponents
 import org.mozilla.fenix.ext.settings
 import org.mozilla.fenix.ext.showToolbar
-import org.mozilla.fenix.nimbus.FxNimbus
+// import org.mozilla.fenix.nimbus.FxNimbus
 import org.mozilla.fenix.theme.FirefoxTheme
 
 /**
@@ -49,9 +49,9 @@ class TranslationSettingsFragment : Fragment(), UserInteractionHandler {
         FirefoxTheme {
             TranslationSettings(
                 translationSwitchList = getTranslationSwitchItemList(),
-                showAutomaticTranslations = FxNimbus.features.translations.value().globalLangSettingsEnabled,
-                showNeverTranslate = FxNimbus.features.translations.value().globalSiteSettingsEnabled,
-                showDownloads = FxNimbus.features.translations.value().downloadsEnabled,
+                showAutomaticTranslations = true,
+                showNeverTranslate = true,
+                showDownloads = true,
                 pageSettingsError = browserStore.observeAsComposableState { state ->
                     state.selectedTab?.translationsState?.settingsError
                 }.value,
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index f0eeec863d..33a3e32cfb 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -361,10 +361,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         default = "",
     )
 
-    var nimbusExperimentsFetched by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_nimbus_experiments_fetched),
-        default = false,
-    )
+    var nimbusExperimentsFetched = true
+//        appContext.getPreferenceKey(R.string.pref_key_nimbus_experiments_fetched),
+//        default = false,
+//    )
 
     var utmParamsKnown by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_utm_params_known),
@@ -591,19 +591,19 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         persistDefaultIfNotExists = true,
     )
 
-    var isExperimentationEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_experimentation_v2),
-        default = isTelemetryEnabled,
-    )
+    var isExperimentationEnabled = false
+//        appContext.getPreferenceKey(R.string.pref_key_experimentation_v2),
+//        default = isTelemetryEnabled,
+//    )
 
     /**
      * This lets us know if the user has disabled experimentation manually so that we know
      * if we should re-enable experimentation if the user disables and re-enables telemetry.
      */
-    var hasUserDisabledExperimentation by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_user_disabled_experimentation),
-        default = false,
-    )
+    var hasUserDisabledExperimentation = true
+//        appContext.getPreferenceKey(R.string.pref_key_user_disabled_experimentation),
+//        default = false,
+//    )
 
     var isOverrideTPPopupsForPerformanceTest = false
 
@@ -727,15 +727,15 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         default = false,
     )
 
-    var nimbusUsePreview by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_nimbus_use_preview),
-        default = false,
-    )
+    var nimbusUsePreview = false
+//        appContext.getPreferenceKey(R.string.pref_key_nimbus_use_preview),
+//        default = false,
+//    )
 
-    var isFirstNimbusRun: Boolean by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_is_first_run),
-        default = true,
-    )
+    var isFirstNimbusRun: Boolean = true
+//        appContext.getPreferenceKey(R.string.pref_key_is_first_run),
+//       default = true,
+//    )
 
     var isFirstSplashScreenShown: Boolean by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_is_first_splash_screen_shown),
@@ -2327,7 +2327,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      * Indicates if the feature to close synced tabs is enabled.
      */
     val enableCloseSyncedTabs: Boolean
-        get() = FxNimbus.features.remoteTabManagement.value().closeTabsEnabled
+        get() = true
 
     /**
      * Returns the height of the bottom toolbar.
