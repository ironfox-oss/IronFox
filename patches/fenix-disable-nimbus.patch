diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/browser/BrowserFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/browser/BrowserFragment.kt
index 1dfd8e2b51..987e6b6afb 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/browser/BrowserFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/browser/BrowserFragment.kt
@@ -167,11 +167,11 @@ class BrowserFragment : BaseBrowserFragment(), UserInteractionHandler {
     }
 
     private fun initTranslationsAction(context: Context, view: View) {
-        if (
-            !FxNimbus.features.translations.value().mainFlowToolbarEnabled
-        ) {
-            return
-        }
+//        if (
+//            !FxNimbus.features.translations.value().mainFlowToolbarEnabled
+//        ) {
+//            return
+//        }
 
         val translationsAction = Toolbar.ActionButton(
             AppCompatResources.getDrawable(
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/menu/MenuDialogFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/menu/MenuDialogFragment.kt
index 1443661bb8..fbec347f11 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/menu/MenuDialogFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/menu/MenuDialogFragment.kt
@@ -76,7 +76,7 @@ import org.mozilla.fenix.components.menu.store.MenuStore
 import org.mozilla.fenix.components.menu.store.WebExtensionMenuItem
 import org.mozilla.fenix.ext.runIfFragmentIsAttached
 import org.mozilla.fenix.ext.settings
-import org.mozilla.fenix.nimbus.FxNimbus
+//import org.mozilla.fenix.nimbus.FxNimbus
 import org.mozilla.fenix.settings.SupportUtils
 import org.mozilla.fenix.settings.deletebrowsingdata.deleteAndQuit
 import org.mozilla.fenix.theme.FirefoxTheme
@@ -307,7 +307,7 @@ class MenuDialogFragment : BottomSheetDialogFragment() {
                         browserStore.state.translationEngine.isEngineSupported ?: false
                     val isTranslationSupported =
                         isTranslationEngineSupported &&
-                            FxNimbus.features.translations.value().mainFlowBrowserMenuEnabled
+                            true
                     val isPdf = selectedTab?.content?.isPdf ?: false
                     val isWebCompatEnabled by store.observeAsState(store.state.isWebCompatEnabled) {
                         it.isWebCompatEnabled
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/toolbar/DefaultToolbarMenu.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/toolbar/DefaultToolbarMenu.kt
index e7e19273f9..ec21fc3a54 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/toolbar/DefaultToolbarMenu.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/toolbar/DefaultToolbarMenu.kt
@@ -205,7 +205,7 @@ open class DefaultToolbarMenu(
         val isEngineSupported = store.state.translationEngine.isEngineSupported
         return selectedSession?.let {
             isEngineSupported == true &&
-                FxNimbus.features.translations.value().mainFlowBrowserMenuEnabled
+                true
         } ?: false
     }
 
@@ -454,7 +454,7 @@ open class DefaultToolbarMenu(
                 addAppToHomeScreenItem.apply { visible = ::canAddAppToHomescreen },
                 if (shouldShowTopSites) addRemoveTopSitesItem else null,
                 saveToCollectionItem,
-                if (FxNimbus.features.print.value().browserPrintEnabled &&
+                if (true &&
                     !context.isAndroidAutomotiveAvailable()
                 ) {
                     printPageItem
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/advanced/DefaultLocaleSettingsController.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/advanced/DefaultLocaleSettingsController.kt
index e387bc4ae0..17a5b647e0 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/advanced/DefaultLocaleSettingsController.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/advanced/DefaultLocaleSettingsController.kt
@@ -11,7 +11,7 @@ import mozilla.components.browser.state.action.SearchAction
 import mozilla.components.browser.state.store.BrowserStore
 import mozilla.components.support.locale.LocaleManager
 import mozilla.components.support.locale.LocaleUseCases
-import org.mozilla.fenix.nimbus.FxNimbus
+//import org.mozilla.fenix.nimbus.FxNimbus
 import java.util.Locale
 
 interface LocaleSettingsController {
@@ -39,7 +39,7 @@ class DefaultLocaleSettingsController(
         LocaleManager.updateBaseConfiguration(activity, locale)
 
         // Invalidate cached values to use the new locale
-        FxNimbus.features.nimbusValidation.withCachedValue(null)
+//        FxNimbus.features.nimbusValidation.withCachedValue(null)
         activity.recreate()
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
             activity.overrideActivityTransition(Activity.OVERRIDE_TRANSITION_OPEN, 0, 0)
@@ -59,7 +59,7 @@ class DefaultLocaleSettingsController(
         LocaleManager.updateBaseConfiguration(activity, localeSettingsStore.state.localeList[0])
 
         // Invalidate cached values to use the default locale
-        FxNimbus.features.nimbusValidation.withCachedValue(null)
+//        FxNimbus.features.nimbusValidation.withCachedValue(null)
         activity.recreate()
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
             activity.overrideActivityTransition(Activity.OVERRIDE_TRANSITION_OPEN, 0, 0)
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
index 43bea16286..5b239c74b3 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
@@ -58,7 +58,7 @@ class SecretSettingsFragment : PreferenceFragmentCompat() {
         }
 
         requirePreference<SwitchPreference>(R.string.pref_key_nimbus_use_preview).apply {
-            isVisible = true
+            isVisible = false
             isChecked = context.settings().nimbusUsePreview
             onPreferenceChangeListener = SharedPreferenceUpdater()
         }
@@ -225,7 +225,7 @@ class SecretSettingsFragment : PreferenceFragmentCompat() {
         }
 
         requirePreference<SwitchPreference>(R.string.pref_key_use_remote_search_configuration).apply {
-            isVisible = true
+            isVisible = false
             isChecked = context.settings().useRemoteSearchConfiguration
             onPreferenceChangeListener = object : SharedPreferenceUpdater() {
                 override fun onPreferenceChange(preference: Preference, newValue: Any?): Boolean {
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt
index 325e5d2141..fc8ce20d0a 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt
@@ -176,7 +176,7 @@ class SettingsFragment : PreferenceFragmentCompat() {
 
         findPreference<Preference>(
             getPreferenceKey(R.string.pref_key_translation),
-        )?.isVisible = FxNimbus.features.translations.value().globalSettingsEnabled &&
+        )?.isVisible = true &&
             requireContext().components.core.store.state.translationEngine.isEngineSupported == true
     }
 
@@ -207,10 +207,10 @@ class SettingsFragment : PreferenceFragmentCompat() {
         super.onResume()
 
         // Use nimbus to set the title, and a trivial addition
-        val nimbusValidation = FxNimbus.features.nimbusValidation.value()
+//        val nimbusValidation = FxNimbus.features.nimbusValidation.value()
 
-        val title = nimbusValidation.settingsTitle
-        val suffix = nimbusValidation.settingsPunctuation
+        val title = getString(R.string.settings_title)
+        val suffix = ""
 
         showToolbar("$title$suffix")
 
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationSettingsFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationSettingsFragment.kt
index 1a02f82498..728024b7b3 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationSettingsFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationSettingsFragment.kt
@@ -28,7 +28,7 @@ import org.mozilla.fenix.R
 import org.mozilla.fenix.ext.requireComponents
 import org.mozilla.fenix.ext.settings
 import org.mozilla.fenix.ext.showToolbar
-import org.mozilla.fenix.nimbus.FxNimbus
+//import org.mozilla.fenix.nimbus.FxNimbus
 import org.mozilla.fenix.theme.FirefoxTheme
 
 /**
@@ -51,9 +51,9 @@ class TranslationSettingsFragment : Fragment(), UserInteractionHandler {
             FirefoxTheme {
                 TranslationSettings(
                     translationSwitchList = getTranslationSwitchItemList(),
-                    showAutomaticTranslations = FxNimbus.features.translations.value().globalLangSettingsEnabled,
-                    showNeverTranslate = FxNimbus.features.translations.value().globalSiteSettingsEnabled,
-                    showDownloads = FxNimbus.features.translations.value().downloadsEnabled,
+                    showAutomaticTranslations = true,
+                    showNeverTranslate = true,
+                    showDownloads = true,
                     pageSettingsError = browserStore.observeAsComposableState { state ->
                         state.selectedTab?.translationsState?.settingsError
                     }.value,
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationsDialogFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationsDialogFragment.kt
index 472e3bf5a8..b2a4842c16 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationsDialogFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/translations/TranslationsDialogFragment.kt
@@ -44,7 +44,7 @@ import org.mozilla.fenix.ext.components
 import org.mozilla.fenix.ext.requireComponents
 import org.mozilla.fenix.ext.runIfFragmentIsAttached
 import org.mozilla.fenix.ext.settings
-import org.mozilla.fenix.nimbus.FxNimbus
+//import org.mozilla.fenix.nimbus.FxNimbus
 import org.mozilla.fenix.settings.SupportUtils
 import org.mozilla.fenix.theme.FirefoxTheme
 import org.mozilla.fenix.translations.preferences.downloadlanguages.DownloadLanguageFileDialog
@@ -176,7 +176,7 @@ class TranslationsDialogFragment : BottomSheetDialogFragment() {
                                 translationsDialogState?.let {
                                     TranslationsDialogContent(
                                         learnMoreUrl = learnMoreUrl,
-                                        showPageSettings = FxNimbus.features.translations.value().pageSettingsEnabled,
+                                        showPageSettings = true,
                                         translationsDialogState = it,
                                         onSettingClicked = {
                                             Translations.action.record(
@@ -202,7 +202,7 @@ class TranslationsDialogFragment : BottomSheetDialogFragment() {
                             ) {
                                 TranslationsOptionsDialogContent(
                                     learnMoreUrl = learnMoreUrl,
-                                    showGlobalSettings = FxNimbus.features.translations.value().globalSettingsEnabled,
+                                    showGlobalSettings = true,
                                     isTranslated = translationsDialogState?.isTranslated == true,
                                     initialFrom = translationsDialogState?.initialFrom,
                                     onBackClicked = { translationsVisibility = true },
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 7f19ba4304..f35f7d2bab 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -225,10 +225,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         default = "",
     )
 
-    var nimbusExperimentsFetched by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_nimbus_experiments_fetched),
-        default = false,
-    )
+    var nimbusExperimentsFetched = true
+//        appContext.getPreferenceKey(R.string.pref_key_nimbus_experiments_fetched),
+//        default = false,
+//    )
 
     var utmParamsKnown by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_utm_params_known),
@@ -316,10 +316,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     /**
      * Indicates if the wallpaper onboarding dialog should be shown.
      */
-    var showWallpaperOnboarding by lazyFeatureFlagPreference(
+    var showWallpaperOnboarding by booleanPreference(
         key = appContext.getPreferenceKey(R.string.pref_key_wallpapers_onboarding),
-        featureFlag = true,
-        default = { mr2022Sections[Mr2022Section.WALLPAPERS_SELECTION_TOOL] == true },
+//        featureFlag = true,
+        default = true,
     )
 
     var openLinksInAPrivateTab by booleanPreference(
@@ -332,10 +332,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         default = false,
     )
 
-    var privateBrowsingLockedEnabled by lazyFeatureFlagPreference(
+    var privateBrowsingLockedEnabled by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_private_browsing_locked_enabled),
-        featureFlag = FxNimbus.features.privateBrowsingLock.value().enabled,
-        default = { false },
+//        featureFlag = FxNimbus.features.privateBrowsingLock.value().enabled,
+        default = false ,
     )
 
     var shouldReturnToBrowser by booleanPreference(
@@ -407,10 +407,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         persistDefaultIfNotExists = true,
     )
 
-    var isExperimentationEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_experimentation_v2),
-        default = isTelemetryEnabled,
-    )
+    var isExperimentationEnabled = false
+//        appContext.getPreferenceKey(R.string.pref_key_experimentation_v2),
+//        default = isTelemetryEnabled,
+//    )
 
     var isOverrideTPPopupsForPerformanceTest = false
 
@@ -529,10 +529,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         default = false,
     )
 
-    var nimbusUsePreview by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_nimbus_use_preview),
-        default = false,
-    )
+    var nimbusUsePreview = false
+//        appContext.getPreferenceKey(R.string.pref_key_nimbus_use_preview),
+//        default = false,
+//    )
 
     var isFirstNimbusRun: Boolean by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_is_first_run),
@@ -1674,10 +1674,10 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     /**
      * Indicates if home onboarding dialog should be shown.
      */
-    var showHomeOnboardingDialog by lazyFeatureFlagPreference(
+    var showHomeOnboardingDialog by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_should_show_home_onboarding_dialog),
-        featureFlag = true,
-        default = { mr2022Sections[Mr2022Section.HOME_ONBOARDING_DIALOG_EXISTING_USERS] == true },
+//        featureFlag = true,
+        default = true,
     )
 
     /**
@@ -2153,7 +2153,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      * Indicates if the feature to close synced tabs is enabled.
      */
     val enableCloseSyncedTabs: Boolean
-        get() = FxNimbus.features.remoteTabManagement.value().closeTabsEnabled
+        get() = true
 
     /**
      * Returns the height of the bottom toolbar.
diff --git a/mobile/android/fenix/app/src/main/res/xml/preferences.xml b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
index 4c6b14bf87..c74795e584 100644
--- a/mobile/android/fenix/app/src/main/res/xml/preferences.xml
+++ b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
@@ -227,11 +227,11 @@
             app:iconSpaceReserved="false"
             android:title="@string/preferences_debug_info"
             app:isPreferenceVisible="false" />
-        <androidx.preference.Preference
+<!--        <androidx.preference.Preference
             android:key="@string/pref_key_nimbus_experiments"
             app:iconSpaceReserved="false"
             android:title="@string/preferences_nimbus_experiments"
-            app:isPreferenceVisible="false" />
+            app:isPreferenceVisible="false" /> -->
         <androidx.preference.Preference
             android:key="@string/pref_key_start_profiler"
             app:iconSpaceReserved="false"
