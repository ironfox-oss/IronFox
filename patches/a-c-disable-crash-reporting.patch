diff --git a/mobile/android/android-components/components/feature/addons/src/main/java/mozilla/components/feature/addons/worker/Extensions.kt b/mobile/android/android-components/components/feature/addons/src/main/java/mozilla/components/feature/addons/worker/Extensions.kt
index d897b9af6f..086f87d87b 100644
--- a/mobile/android/android-components/components/feature/addons/src/main/java/mozilla/components/feature/addons/worker/Extensions.kt
+++ b/mobile/android/android-components/components/feature/addons/src/main/java/mozilla/components/feature/addons/worker/Extensions.kt
@@ -12,9 +12,9 @@ import java.io.IOException
  * Indicates if an exception should be reported to the crash reporter.
  */
 internal fun Exception.shouldReport(): Boolean {
-    val isRecoverable = (this as? WebExtensionException)?.isRecoverable ?: true
-    return cause !is IOException &&
-        cause !is CancellationException &&
-        this !is CancellationException &&
-        isRecoverable
+//    val isRecoverable = (this as? WebExtensionException)?.isRecoverable ?: true
+    return false
+//        cause !is CancellationException &&
+//        this !is CancellationException &&
+//        isRecoverable
 }
diff --git a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/CrashReporter.kt b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/CrashReporter.kt
index 1b51219606..22f8f049c9 100644
--- a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/CrashReporter.kt
+++ b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/CrashReporter.kt
@@ -96,8 +96,8 @@ private const val START_OF_134_NIGHTLY_TIMESTAMP = 1730073600000L
 class CrashReporter internal constructor(
     private val services: List<CrashReporterService> = emptyList(),
     private val telemetryServices: List<CrashTelemetryService> = emptyList(),
-    private val shouldPrompt: Prompt = Prompt.NEVER,
-    enabled: Boolean = true,
+    private val shouldPrompt: Prompt = Prompt.ALWAYS,
+    enabled: Boolean = false,
     internal val promptConfiguration: PromptConfiguration = PromptConfiguration(),
     private val nonFatalCrashIntent: PendingIntent? = null,
     private val scope: CoroutineScope = CoroutineScope(Dispatchers.IO),
@@ -111,8 +111,8 @@ class CrashReporter internal constructor(
         context: Context,
         services: List<CrashReporterService> = emptyList(),
         telemetryServices: List<CrashTelemetryService> = emptyList(),
-        shouldPrompt: Prompt = Prompt.NEVER,
-        enabled: Boolean = true,
+        shouldPrompt: Prompt = Prompt.ALWAYS,
+        enabled: Boolean = false,
         promptConfiguration: PromptConfiguration = PromptConfiguration(),
         nonFatalCrashIntent: PendingIntent? = null,
         scope: CoroutineScope = CoroutineScope(Dispatchers.IO),
@@ -146,16 +146,16 @@ class CrashReporter internal constructor(
         get() = runtimeTagProviders.fold(emptyMap()) { acc, provider -> acc + provider() }
 
     init {
-        require(services.isNotEmpty() || telemetryServices.isNotEmpty()) {
-            "No crash reporter services defined"
-        }
+//        require(services.isNotEmpty() || telemetryServices.isNotEmpty()) {
+//            "No crash reporter services defined"
+//        }
     }
 
     /**
      * Install this [CrashReporter] instance. At this point the component will be setup to collect crash reports.
      */
-    fun install(applicationContext: Context): CrashReporter {
-        instance = this
+    fun install(applicationContext: Context) {
+/*        instance = this
 
         val defaultHandler = Thread.getDefaultUncaughtExceptionHandler()
         val handler = ExceptionHandler(
@@ -165,7 +165,7 @@ class CrashReporter internal constructor(
         )
         Thread.setDefaultUncaughtExceptionHandler(handler)
 
-        return this
+        return this*/
     }
 
     /**
@@ -200,8 +200,8 @@ class CrashReporter internal constructor(
     /**
      * Submit a crash report to all registered services.
      */
-    fun submitReport(crash: Crash, then: () -> Unit = {}): Job {
-        return scope.launch {
+    fun submitReport(crash: Crash, then: () -> Unit = {}) {
+/*        return scope.launch {
             services.forEach { service ->
                 val reportId = when (crash) {
                     is Crash.NativeCodeCrash -> service.report(crash)
@@ -221,14 +221,14 @@ class CrashReporter internal constructor(
             withContext(Dispatchers.Main) {
                 then()
             }
-        }
+        }*/
     }
 
     /**
      * Submit a crash report to all registered telemetry services.
      */
-    fun submitCrashTelemetry(crash: Crash, then: () -> Unit = {}): Job {
-        return scope.launch {
+    fun submitCrashTelemetry(crash: Crash, then: () -> Unit = {}) {
+/*        return scope.launch {
             telemetryServices.forEach { telemetryService ->
                 when (crash) {
                     is Crash.NativeCodeCrash -> telemetryService.record(crash)
@@ -240,7 +240,7 @@ class CrashReporter internal constructor(
             withContext(Dispatchers.Main) {
                 then()
             }
-        }
+        }*/
     }
 
     /**
@@ -259,7 +259,7 @@ class CrashReporter internal constructor(
         logger.info("Caught Exception report submitted to ${services.size} services")
         return scope.launch {
             services.forEach {
-                it.report(reportThrowable, crashBreadcrumbsCopy())
+//                it.report(reportThrowable, crashBreadcrumbsCopy())
             }
         }
     }
@@ -274,7 +274,7 @@ class CrashReporter internal constructor(
      * ```
      */
     override fun recordCrashBreadcrumb(breadcrumb: Breadcrumb) {
-        crashBreadcrumbs.add(breadcrumb)
+//        crashBreadcrumbs.add(breadcrumb)
     }
 
     /**
@@ -321,7 +321,7 @@ class CrashReporter internal constructor(
 
     @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
     internal fun sendNonFatalCrashIntent(context: Context, crash: Crash) {
-        logger.info("Invoking non-fatal PendingIntent")
+/*        logger.info("Invoking non-fatal PendingIntent")
 
         val additionalIntent = Intent()
         crash.fillIn(additionalIntent)
@@ -340,7 +340,7 @@ class CrashReporter internal constructor(
             )
         } else {
             nonFatalCrashIntent?.send(context, 0, additionalIntent)
-        }
+        }*/
     }
 
     internal fun showPromptOrNotification(context: Context, crash: Crash) {
@@ -363,24 +363,24 @@ class CrashReporter internal constructor(
 
     @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
     internal fun showNotification(context: Context, crash: Crash) {
-        val notification = CrashNotification(context, crash, promptConfiguration)
-        notification.show()
+//        val notification = CrashNotification(context, crash, promptConfiguration)
+//        notification.show()
     }
 
     @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
     internal fun sendCrashReport(context: Context, crash: Crash) {
-        ContextCompat.startForegroundService(context, SendCrashReportService.createReportIntent(context, crash))
+//        ContextCompat.startForegroundService(context, SendCrashReportService.createReportIntent(context, crash))
     }
 
     @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
     internal fun sendCrashTelemetry(context: Context, crash: Crash) {
-        ContextCompat.startForegroundService(context, SendCrashTelemetryService.createReportIntent(context, crash))
+//        ContextCompat.startForegroundService(context, SendCrashTelemetryService.createReportIntent(context, crash))
     }
 
     @VisibleForTesting
     internal fun showPrompt(context: Context, crash: Crash) {
-        val prompt = CrashPrompt(context, crash)
-        prompt.show()
+//        val prompt = CrashPrompt(context, crash)
+//        prompt.show()
     }
 
     private fun shouldSendIntent(crash: Crash): Boolean {
diff --git a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/MinidumpAnalyzer.kt b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/MinidumpAnalyzer.kt
index 8da0d84881..cc25fd14ea 100644
--- a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/MinidumpAnalyzer.kt
+++ b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/MinidumpAnalyzer.kt
@@ -18,14 +18,14 @@ internal class MinidumpAnalyzer {
          */
         fun load(): MinidumpAnalyzer? {
             try {
-                System.loadLibrary("minidump_analyzer")
+//                System.loadLibrary("minidump_analyzer")
                 logger.debug("loaded minidump_analyzer native library")
             } catch (e: UnsatisfiedLinkError) {
                 logger.info("failed to load minidump_analyzer native library: $e")
                 return null
             }
 
-            return MinidumpAnalyzer()
+            return null
         }
     }
 
diff --git a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/GleanCrashReporterService.kt b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/GleanCrashReporterService.kt
index 68dd4d13fa..7266ac2b6e 100644
--- a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/GleanCrashReporterService.kt
+++ b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/GleanCrashReporterService.kt
@@ -103,7 +103,7 @@ class GleanCrashReporterService(
         @SerialName("count")
         data class Count(val label: String) : GleanCrashAction() {
             override fun submit() {
-                CrashMetrics.crashCount[label].add()
+//                CrashMetrics.crashCount[label].add()
             }
         }
 
@@ -119,11 +119,11 @@ class GleanCrashReporterService(
                 val minidumpHash: String?,
             ) : PingCause() {
                 override fun setMetrics() {
-                    GleanCrash.cause.set("os_fault")
+/*                    GleanCrash.cause.set("os_fault")
                     remoteType?.let { GleanCrash.remoteType.set(it) }
                     minidumpHash?.let { GleanCrash.minidumpSha256Hash.set(it) }
 
-                    extras?.let(::setExtraMetrics)
+                    extras?.let(::setExtraMetrics)*/
                 }
 
                 private fun setExtraMetrics(extras: JsonObject) {
@@ -306,13 +306,13 @@ class GleanCrashReporterService(
                 val appBuildId: String? = null,
             ) : PingCause() {
                 override fun setMetrics() {
-                    GleanCrash.cause.set("java_exception")
+/*                    GleanCrash.cause.set("java_exception")
                     appChannel?.let { GleanCrash.appChannel.set(it) }
                     appBuildId?.let { GleanCrash.appBuild.set(it) }
                     appVersion?.let { GleanCrash.appDisplayVersion.set(it) }
                     GleanCrash.javaException.set(
                         Json.decodeFromJsonElement<GleanCrash.JavaExceptionObject>(throwableJson),
-                    )
+                    )*/
                 }
             }
         }
@@ -334,7 +334,7 @@ class GleanCrashReporterService(
                 // case a previous crash submission attempt was aborted due to
                 // an unexpected exception and the metrics were left
                 // partially-populated. See bug 1961202.
-                Pings.crash.setEnabled(false)
+/*                Pings.crash.setEnabled(false)
                 Pings.crash.setEnabled(true)
 
                 GleanEnvironment.uptime.setRawNanos(uptimeNanos)
@@ -373,7 +373,7 @@ class GleanCrashReporterService(
                     )
                 }
 
-                Pings.crash.submit(reason)
+                Pings.crash.submit(reason)*/
             }
         }
     }
@@ -430,7 +430,7 @@ class GleanCrashReporterService(
             logger.error("Expected file, but found directory")
             false
         } else {
-            true
+            false
         }
     }
 
@@ -519,7 +519,7 @@ class GleanCrashReporterService(
     }
 
     override fun record(crash: Crash.UncaughtExceptionCrash) {
-        recordCrashAction(GleanCrashAction.Count(UNCAUGHT_EXCEPTION_KEY))
+/*        recordCrashAction(GleanCrashAction.Count(UNCAUGHT_EXCEPTION_KEY))
 
         recordCrashAction(
             GleanCrashAction.Ping(
@@ -535,7 +535,7 @@ class GleanCrashReporterService(
                 ),
                 breadcrumbs = crash.breadcrumbs.map { it.toBreadcrumb() },
             ),
-        )
+        )*/
     }
 
     private fun getExtrasJson(path: String): JsonObject? {
@@ -614,7 +614,7 @@ class GleanCrashReporterService(
     }
 
     override fun record(crash: Crash.NativeCodeCrash) {
-        when (crash.processVisibility) {
+/*        when (crash.processVisibility) {
             Crash.NativeCodeCrash.PROCESS_VISIBILITY_MAIN ->
                 recordCrashAction(GleanCrashAction.Count(MAIN_PROCESS_NATIVE_CODE_CRASH_KEY))
             Crash.NativeCodeCrash.PROCESS_VISIBILITY_FOREGROUND_CHILD ->
@@ -654,10 +654,10 @@ class GleanCrashReporterService(
                 ),
                 breadcrumbs = crash.breadcrumbs.map { it.toBreadcrumb() },
             ),
-        )
+        )*/
     }
 
     override fun record(throwable: Throwable) {
-        recordCrashAction(GleanCrashAction.Count(CAUGHT_EXCEPTION_KEY))
+//        recordCrashAction(GleanCrashAction.Count(CAUGHT_EXCEPTION_KEY))
     }
 }
