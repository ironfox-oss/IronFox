diff --git a/mobile/android/android-components/components/browser/toolbar/src/main/java/mozilla/components/browser/toolbar/display/OriginView.kt b/mobile/android/android-components/components/browser/toolbar/src/main/java/mozilla/components/browser/toolbar/display/OriginView.kt
index 506f8b3c6b..925ac6ab80 100644
--- a/mobile/android/android-components/components/browser/toolbar/src/main/java/mozilla/components/browser/toolbar/display/OriginView.kt
+++ b/mobile/android/android-components/components/browser/toolbar/src/main/java/mozilla/components/browser/toolbar/display/OriginView.kt
@@ -17,6 +17,8 @@ import androidx.annotation.VisibleForTesting
 import androidx.core.view.isVisible
 import mozilla.components.browser.toolbar.BrowserToolbar
 import mozilla.components.browser.toolbar.R
+import android.text.Spanned
+import mozilla.components.concept.toolbar.Toolbar
 
 /**
  * View displaying the URL and optionally the title of a website.
@@ -136,7 +138,31 @@ internal class OriginView @JvmOverloads constructor(
 
     internal var url: CharSequence
         get() = urlView.text
-        set(value) { urlView.text = value }
+        set(value) {
+            urlView.text = value
+            urlView.scrollTo(0, 0)
+
+            if (value is Spanned) {
+                val spans = value.getSpans<Toolbar.RegistrableDomainColorSpan>(
+                    0,
+                    value.length,
+                    Toolbar.RegistrableDomainColorSpan::class.java,
+                )
+
+                if (spans.size != 1) {
+                    return
+                }
+
+                val valueUntilRegistrableDomainEnd = value.subSequence(0, value.getSpanEnd(spans[0]))
+
+                val urlViewWidth = urlView.getWidth()
+                val valueWidth = urlView.getPaint().measureText(valueUntilRegistrableDomainEnd.toString())
+
+                if (valueWidth > urlViewWidth) {
+                    urlView.scrollTo((valueWidth - urlViewWidth).toInt(), 0)
+                }
+            }
+        }
 
     /**
      * Sets the colour of the text to be displayed when the URL of the toolbar is empty.
diff --git a/mobile/android/android-components/components/concept/toolbar/src/main/java/mozilla/components/concept/toolbar/Toolbar.kt b/mobile/android/android-components/components/concept/toolbar/src/main/java/mozilla/components/concept/toolbar/Toolbar.kt
index 77ffea44d7..bedfcef794 100644
--- a/mobile/android/android-components/components/concept/toolbar/src/main/java/mozilla/components/concept/toolbar/Toolbar.kt
+++ b/mobile/android/android-components/components/concept/toolbar/src/main/java/mozilla/components/concept/toolbar/Toolbar.kt
@@ -21,6 +21,8 @@ import mozilla.components.support.base.android.Padding
 import mozilla.components.support.ktx.android.content.res.resolveAttribute
 import mozilla.components.support.ktx.android.view.setPadding
 import java.lang.ref.WeakReference
+import android.text.style.ForegroundColorSpan
+import androidx.annotation.ColorInt
 
 /**
  * Interface to be implemented by components that provide browser toolbar functionality.
@@ -548,6 +550,12 @@ interface Toolbar : ScrollableToolbar {
          */
         END,
     }
+
+    /**
+     * Registrable domain foreground color span.
+     * This simple class extension is used so that we can filter for it elsewhere.
+     */
+    class RegistrableDomainColorSpan(@ColorInt color: Int) : ForegroundColorSpan(color)
 }
 
 private fun AppCompatImageButton.setTintResource(@ColorRes tintColorResource: Int) {
diff --git a/mobile/android/android-components/components/feature/toolbar/src/main/java/mozilla/components/feature/toolbar/internal/URLRenderer.kt b/mobile/android/android-components/components/feature/toolbar/src/main/java/mozilla/components/feature/toolbar/internal/URLRenderer.kt
index 5b0dcb298d..ff774543d7 100644
--- a/mobile/android/android-components/components/feature/toolbar/src/main/java/mozilla/components/feature/toolbar/internal/URLRenderer.kt
+++ b/mobile/android/android-components/components/feature/toolbar/src/main/java/mozilla/components/feature/toolbar/internal/URLRenderer.kt
@@ -98,7 +98,7 @@ private suspend fun SpannableStringBuilder.colorRegistrableDomain(
 
     val registrableDomain = configuration
         .publicSuffixList
-        .getPublicSuffixPlusOne(host)
+        .getPublicSuffixPlusOne(host.removeSuffix("."))
         .await() ?: return
 
     val indexOfHost = url.indexOf(host)
@@ -110,7 +110,7 @@ private suspend fun SpannableStringBuilder.colorRegistrableDomain(
     val index = indexOfHost + indexOfRegistrableDomain
 
     setSpan(
-        ForegroundColorSpan(configuration.registrableDomainColor),
+        Toolbar.RegistrableDomainColorSpan(configuration.registrableDomainColor),
         index,
         index + registrableDomain.length,
         SPAN_INCLUSIVE_INCLUSIVE,
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/toolbar/ToolbarIntegration.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/toolbar/ToolbarIntegration.kt
index 17e3bf78ba..c404af16f8 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/toolbar/ToolbarIntegration.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/toolbar/ToolbarIntegration.kt
@@ -58,6 +58,7 @@ abstract class ToolbarIntegration(
         urlRenderConfiguration = ToolbarFeature.UrlRenderConfiguration(
             context.components.publicSuffixList,
             context.getColorFromAttr(R.attr.textPrimary),
+            context.getColorFromAttr(R.attr.textSecondary),
             renderStyle = renderStyle,
         ),
     )
@@ -140,7 +141,7 @@ class DefaultToolbarIntegration(
     interactor = interactor,
     customTabId = customTabId,
     isPrivate = isPrivate,
-    renderStyle = ToolbarFeature.RenderStyle.UncoloredUrl,
+    renderStyle = ToolbarFeature.RenderStyle.ColoredUrl,
 ) {
 
     @VisibleForTesting
