diff --git a/mobile/android/android-components/components/browser/engine-gecko/build.gradle b/mobile/android/android-components/components/browser/engine-gecko/build.gradle
index 7941343807..e56e90a005 100644
--- a/mobile/android/android-components/components/browser/engine-gecko/build.gradle
+++ b/mobile/android/android-components/components/browser/engine-gecko/build.gradle
@@ -58,7 +58,7 @@ android {
 // Set configuration for the Glean parser to extract metrics.yaml
 // file from AAR dependencies of this project rather than look
 // for it into the project directory.
-ext.allowMetricsFromAAR = true
+ext.allowMetricsFromAAR = false
 
 dependencies {
     implementation project(':concept-engine')
diff --git a/mobile/android/android-components/components/feature/search/src/main/java/mozilla/components/feature/search/telemetry/SerpTelemetryRepository.kt b/mobile/android/android-components/components/feature/search/src/main/java/mozilla/components/feature/search/telemetry/SerpTelemetryRepository.kt
index 20eab9e438..c596e9238a 100644
--- a/mobile/android/android-components/components/feature/search/src/main/java/mozilla/components/feature/search/telemetry/SerpTelemetryRepository.kt
+++ b/mobile/android/android-components/components/feature/search/src/main/java/mozilla/components/feature/search/telemetry/SerpTelemetryRepository.kt
@@ -16,8 +16,8 @@ import org.json.JSONException
 import org.json.JSONObject
 import java.io.File
 
-internal const val REMOTE_PROD_ENDPOINT_URL = "https://firefox.settings.services.mozilla.com"
-internal const val REMOTE_ENDPOINT_BUCKET_NAME = "main"
+internal const val REMOTE_PROD_ENDPOINT_URL = ""
+internal const val REMOTE_ENDPOINT_BUCKET_NAME = ""
 
 /**
  * Parse SERP Telemetry json from remote config.
diff --git a/mobile/android/fenix/app/build.gradle b/mobile/android/fenix/app/build.gradle
index d9a6045423..84073eaeee 100644
--- a/mobile/android/fenix/app/build.gradle
+++ b/mobile/android/fenix/app/build.gradle
@@ -313,7 +313,7 @@ android.applicationVariants.configureEach { variant ->
     project.logger.debug("Application ID:    " + [variant.applicationId, variant.buildType.applicationIdSuffix].findAll().join())
     project.logger.debug("Build type:        " + variant.buildType.name)
     project.logger.debug("Flavor:            " + variant.flavorName)
-    project.logger.debug("Telemetry enabled: " + !isDebug)
+    project.logger.debug("Telemetry enabled: " + false)
 
     if (useReleaseVersioning) {
         // The Google Play Store does not allow multiple APKs for the same app that all have the
@@ -366,7 +366,7 @@ android.applicationVariants.configureEach { variant ->
     }
 
     if (!isDebug) {
-        buildConfigField 'boolean', 'TELEMETRY', 'true'
+        buildConfigField 'boolean', 'TELEMETRY', 'false'
     } else {
         buildConfigField 'boolean', 'TELEMETRY', 'false'
     }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
index 5ba4561291..d1307b220c 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
@@ -41,7 +41,7 @@ object FeatureFlags {
     /**
      * Enable Meta attribution.
      */
-    const val META_ATTRIBUTION_ENABLED = true
+    const val META_ATTRIBUTION_ENABLED = false
 
     /**
      * Enables the Unified Trust Panel.
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt
index d3b21828c2..edea7b4d0d 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt
@@ -188,7 +188,7 @@ class Components(private val context: Context) {
         AddonManager(core.store, core.engine, addonsProvider, addonUpdater)
     }
 
-    val analytics by lazyMonitored { Analytics(context, performance.visualCompletenessQueue.queue) }
+    val analytics by lazyMonitored { Analytics(context) }
     val nimbus by lazyMonitored { NimbusComponents(context) }
     val publicSuffixList by lazyMonitored { PublicSuffixList(context) }
     val clipboardHandler by lazyMonitored { ClipboardHandler(context) }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
index cfbdaba62c..05f9735c6b 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
@@ -64,14 +64,14 @@ import mozilla.components.feature.search.SearchApplicationName
 import mozilla.components.feature.search.SearchDeviceType
 import mozilla.components.feature.search.SearchEngineSelector
 import mozilla.components.feature.search.SearchUpdateChannel
-import mozilla.components.feature.search.middleware.AdsTelemetryMiddleware
+//import mozilla.components.feature.search.middleware.AdsTelemetryMiddleware
 import mozilla.components.feature.search.middleware.SearchExtraParams
 import mozilla.components.feature.search.middleware.SearchMiddleware
 import mozilla.components.feature.search.region.RegionMiddleware
 import mozilla.components.feature.search.storage.SearchEngineSelectorConfig
-import mozilla.components.feature.search.telemetry.SerpTelemetryRepository
-import mozilla.components.feature.search.telemetry.ads.AdsTelemetry
-import mozilla.components.feature.search.telemetry.incontent.InContentTelemetry
+//import mozilla.components.feature.search.telemetry.SerpTelemetryRepository
+//import mozilla.components.feature.search.telemetry.ads.AdsTelemetry
+//import mozilla.components.feature.search.telemetry.incontent.InContentTelemetry
 import mozilla.components.feature.session.HistoryDelegate
 import mozilla.components.feature.session.middleware.LastAccessMiddleware
 import mozilla.components.feature.session.middleware.undo.UndoMiddleware
@@ -133,7 +133,7 @@ import org.mozilla.fenix.settings.advanced.getSelectedLocale
 import org.mozilla.fenix.share.DefaultSentFromFirefoxManager
 import org.mozilla.fenix.share.DefaultSentFromStorage
 import org.mozilla.fenix.share.SaveToPDFMiddleware
-import org.mozilla.fenix.telemetry.TelemetryMiddleware
+//import org.mozilla.fenix.telemetry.TelemetryMiddleware
 import org.mozilla.fenix.utils.getUndoDelay
 import org.mozilla.geckoview.GeckoRuntime
 import java.util.UUID
@@ -312,7 +312,7 @@ class Core(
                 RecentlyClosedMiddleware(recentlyClosedTabsStorage, RECENTLY_CLOSED_MAX),
                 DownloadMiddleware(context, DownloadService::class.java),
                 ReaderViewMiddleware(),
-                TelemetryMiddleware(context, context.settings(), metrics, crashReporter),
+//                TelemetryMiddleware(context, context.settings(), metrics, crashReporter),
                 ThumbnailsMiddleware(thumbnailStorage),
                 UndoMiddleware(context.getUndoDelay()),
                 RegionMiddleware(context, locationService),
@@ -325,7 +325,7 @@ class Core(
                 ),
                 RecordingDevicesMiddleware(context, context.components.notificationsDelegate),
                 PromptMiddleware(),
-                AdsTelemetryMiddleware(adsTelemetry),
+//                AdsTelemetryMiddleware(adsTelemetry),
                 LastMediaAccessMiddleware(),
                 HistoryMetadataMiddleware(historyMetadataService),
                 SessionPrioritizationMiddleware(),
@@ -364,25 +364,25 @@ class Core(
             // Install the "icons" WebExtension to automatically load icons for every visited website.
             icons.install(engine, this)
 
-            CoroutineScope(Dispatchers.Main).launch {
-                val readJson = { context.assets.readJSONObject("search/search_telemetry_v2.json") }
-                val providerList = withContext(Dispatchers.IO) {
-                    SerpTelemetryRepository(
-                        rootStorageDirectory = context.filesDir,
-                        readJson = readJson,
-                        collectionName = COLLECTION_NAME,
-                        serverUrl = if (context.settings().useProductionRemoteSettingsServer) {
-                            REMOTE_PROD_ENDPOINT_URL
-                        } else {
-                            REMOTE_STAGE_ENDPOINT_URL
-                        },
-                    ).updateProviderList()
-                }
+//            CoroutineScope(Dispatchers.Main).launch {
+//                val readJson = { context.assets.readJSONObject("search/search_telemetry_v2.json") }
+//                val providerList = withContext(Dispatchers.IO) {
+//                    SerpTelemetryRepository(
+//                        rootStorageDirectory = context.filesDir,
+//                        readJson = readJson,
+//                        collectionName = COLLECTION_NAME,
+//                        serverUrl = if (context.settings().useProductionRemoteSettingsServer) {
+//                            REMOTE_PROD_ENDPOINT_URL
+//                        } else {
+//                            REMOTE_STAGE_ENDPOINT_URL
+//                        },
+//                    ).updateProviderList()
+//                }
                 // Install the "ads" WebExtension to get the links in an partner page.
-                adsTelemetry.install(engine, this@apply, providerList)
+//                adsTelemetry.install(engine, this@apply, providerList)
                 // Install the "cookies" WebExtension and tracks user interaction with SERPs.
-                searchTelemetry.install(engine, this@apply, providerList)
-            }
+//                searchTelemetry.install(engine, this@apply, providerList)
+//            }
 
             WebNotificationFeature(
                 context,
@@ -434,17 +434,17 @@ class Core(
         BrowserIcons(context, client)
     }
 
-    val metrics by lazyMonitored {
-        context.components.analytics.metrics
-    }
+//    val metrics by lazyMonitored {
+//        context.components.analytics.metrics
+//    }
 
-    val adsTelemetry by lazyMonitored {
-        AdsTelemetry()
-    }
+//    val adsTelemetry by lazyMonitored {
+//        AdsTelemetry()
+//    }
 
-    val searchTelemetry by lazyMonitored {
-        InContentTelemetry()
-    }
+//    val searchTelemetry by lazyMonitored {
+//        InContentTelemetry()
+//    }
 
     /**
      * Shortcut component for managing shortcuts on the device home screen.
@@ -735,7 +735,7 @@ class Core(
         const val METADATA_SHORTCUT_SUGGESTION_LIMIT = 20
 
         // collection name to fetch from server for SERP telemetry
-        const val COLLECTION_NAME = "search-telemetry-v2"
+        const val COLLECTION_NAME = ""
         internal const val REMOTE_PROD_ENDPOINT_URL = "https://firefox.settings.services.mozilla.com"
         internal const val REMOTE_STAGE_ENDPOINT_URL = "https://firefox.settings.services.allizom.org"
     }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/GleanHelper.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/GleanHelper.kt
index d218b89663..21323dab77 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/GleanHelper.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/GleanHelper.kt
@@ -13,7 +13,7 @@ import mozilla.telemetry.glean.config.Configuration
 import org.mozilla.fenix.BuildConfig
 import org.mozilla.fenix.Config
 import org.mozilla.fenix.GleanMetrics.GleanBuildInfo
-import org.mozilla.fenix.GleanMetrics.Pings
+//import org.mozilla.fenix.GleanMetrics.Pings
 import org.mozilla.fenix.ext.getCustomGleanServerUrlIfAvailable
 import org.mozilla.fenix.ext.setCustomEndpointIfAvailable
 import org.mozilla.fenix.nimbus.FxNimbus
@@ -34,10 +34,12 @@ fun initializeGlean(applicationContext: Context, logger: Logger, isTelemetryUplo
         // for testing, if custom glean server url is set in the secret menu, use it to initialize Glean
         getCustomGleanServerUrlIfAvailable(applicationContext)
     } else {
-        null
+        getCustomGleanServerUrlIfAvailable(applicationContext)
     }
 
     val configuration = Configuration(
+        enableInternalPings = false,
+        serverEndpoint = "data;",
         channel = BuildConfig.BUILD_TYPE,
         httpClient = ConceptFetchHttpUploader(
             lazy(LazyThreadSafetyMode.NONE) { client },
@@ -52,15 +54,15 @@ fun initializeGlean(applicationContext: Context, logger: Logger, isTelemetryUplo
     // Since Glean v63.0.0, custom pings need to be registered prior to Glean init
     // in order to ensure they are enabled and able to collect data.
     // See https://bugzilla.mozilla.org/1934931 for more information.
-    Glean.registerPings(Pings)
+//    Glean.registerPings(Pings)
 
     // Set the metric configuration from Nimbus.
-    Glean.applyServerKnobsConfig(FxNimbus.features.glean.value().metricsEnabled.toString())
+//    Glean.applyServerKnobsConfig(FxNimbus.features.glean.value().metricsEnabled.toString())
 
     Glean.initialize(
         applicationContext = applicationContext,
         configuration = configuration.setCustomEndpointIfAvailable(customEndpoint),
-        uploadEnabled = isTelemetryUploadEnabled,
+        uploadEnabled = false,
         buildInfo = GleanBuildInfo.buildInfo,
     )
 }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/GleanMetricsService.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/GleanMetricsService.kt
index ea4ff1e0dd..1a63eba455 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/GleanMetricsService.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/GleanMetricsService.kt
@@ -8,7 +8,7 @@ import android.content.Context
 import mozilla.components.support.base.log.logger.Logger
 import mozilla.components.support.utils.RunWhenReadyQueue
 import mozilla.telemetry.glean.Glean
-import org.mozilla.fenix.GleanMetrics.Pings
+//import org.mozilla.fenix.GleanMetrics.Pings
 import org.mozilla.fenix.ext.components
 
 private class EventWrapper<T : Enum<T>>(
@@ -67,12 +67,12 @@ class GleanMetricsService(
     private val logger = Logger("GleanMetricsService")
     private var initialized = false
 
-    private val activationPing = ActivationPing(context)
+//    private val activationPing = ActivationPing(context)
 
     override fun start() {
         logger.debug("Enabling Glean.")
         // Initialization of Glean already happened in FenixApplication.
-        Glean.setCollectionEnabled(true)
+//        Glean.setCollectionEnabled(true)
 
         if (initialized) return
         initialized = true
@@ -85,21 +85,21 @@ class GleanMetricsService(
             // because it calls Google ad APIs that must be called *off* of the main thread.
             // These two things actually happen in parallel, but that should be ok because Glean
             // can handle events being recorded before it's initialized.
-            Glean.registerPings(Pings)
+//            Glean.registerPings(Pings)
 
-            activationPing.checkAndSend()
+//            activationPing.checkAndSend()
         }
     }
 
     override fun stop() {
-        Glean.setCollectionEnabled(false)
+//        Glean.setCollectionEnabled(false)
     }
 
     override fun track(event: Event) {
-        event.wrapper?.track(event)
+//        event.wrapper?.track(event)
     }
 
     override fun shouldTrack(event: Event): Boolean {
-        return event.wrapper != null
+        return false
     }
 }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MetricsStorage.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MetricsStorage.kt
index 9d54f66a65..47c4244490 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MetricsStorage.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MetricsStorage.kt
@@ -13,7 +13,7 @@ import kotlinx.coroutines.withContext
 import mozilla.components.support.utils.ext.getPackageInfoCompat
 import org.mozilla.fenix.android.DefaultActivityLifecycleCallbacks
 import org.mozilla.fenix.ext.settings
-import org.mozilla.fenix.nimbus.FxNimbus
+//import org.mozilla.fenix.nimbus.FxNimbus
 import org.mozilla.fenix.utils.Settings
 import java.text.SimpleDateFormat
 import java.util.Calendar
@@ -274,8 +274,8 @@ internal class DefaultMetricsStorage(
          * - tracking is still enabled through Nimbus
          */
         fun shouldSendGenerally(context: Context): Boolean {
-            return context.settings().adjustCampaignId.isNotEmpty() &&
-                FxNimbus.features.growthData.value().enabled
+            return false && context.settings().adjustCampaignId.isNotEmpty()
+//                FxNimbus.features.growthData.value().enabled
         }
 
         fun getInstalledTime(context: Context): Long = context.packageManager
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
index 13db9f3c83..b0d4f44010 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
@@ -87,7 +87,7 @@ import org.mozilla.fenix.GleanMetrics.TopSites
 import org.mozilla.fenix.components.Components
 import org.mozilla.fenix.components.Core
 import org.mozilla.fenix.components.appstate.AppAction
-import org.mozilla.fenix.components.initializeGlean
+//import org.mozilla.fenix.components.initializeGlean
 import org.mozilla.fenix.components.metrics.MozillaProductDetector
 import org.mozilla.fenix.components.startMetricsIfEnabled
 import org.mozilla.fenix.experiments.maybeFetchExperiments
@@ -188,7 +188,7 @@ open class FenixApplication : LocaleAwareApplication(), Provider {
         // We delay the Glean initialization until, we have user consent (After onboarding).
         // If onboarding is disabled (when in local builds), continue to initialize Glean.
         if (components.fenixOnboarding.userHasBeenOnboarded() || !FeatureFlags.onboardingFeatureEnabled) {
-            initializeGlean(this, logger, settings.isTelemetryEnabled, components.core.client)
+//            initializeGlean(this, logger, settings.isTelemetryEnabled, components.core.client)
         }
 
         // We avoid blocking the main thread on startup by setting startup metrics on the background thread.
@@ -224,7 +224,7 @@ open class FenixApplication : LocaleAwareApplication(), Provider {
                 components.core.engine.warmUp()
             }
 
-            initializeGlean()
+//            initializeGlean()
 
             // Attention: Do not invoke any code from a-s in this scope.
             val megazordSetup = finishSetupMegazord()
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt
index c1b54d7f27..11b36c5949 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt
@@ -16,7 +16,7 @@ import org.mozilla.fenix.compose.snackbar.SnackbarState
 import org.mozilla.fenix.ext.components
 import org.mozilla.fenix.ext.getRootView
 import org.mozilla.fenix.ext.navigateWithBreadcrumb
-import org.mozilla.fenix.ext.settings
+//import org.mozilla.fenix.ext.settings
 import org.mozilla.fenix.nimbus.NimbusBranchesAction
 import org.mozilla.fenix.nimbus.NimbusBranchesFragment
 import org.mozilla.fenix.nimbus.NimbusBranchesFragmentDirections
@@ -42,34 +42,34 @@ class NimbusBranchesController(
 ) : NimbusBranchesAdapterDelegate {
 
     override fun onBranchItemClicked(branch: Branch) {
-        val telemetryEnabled = context.settings().isTelemetryEnabled
-        val experimentsEnabled = context.settings().isExperimentationEnabled
+//        val telemetryEnabled = context.settings().isTelemetryEnabled
+//        val experimentsEnabled = context.settings().isExperimentationEnabled
 
         updateOptInState(branch)
 
-        if (!telemetryEnabled && !experimentsEnabled) {
-            context.getRootView()?.let { v ->
-                Snackbar.make(
-                    snackBarParentView = v,
-                    snackbarState = SnackbarState(
-                        message = context.getString(R.string.experiments_snackbar),
-                        duration = SnackbarState.Duration.Preset.Long,
-                        action = Action(
-                            label = context.getString(R.string.experiments_snackbar_button),
-                            onClick = {
-                                navController.navigateWithBreadcrumb(
-                                    directions = NimbusBranchesFragmentDirections
-                                        .actionNimbusBranchesFragmentToDataChoicesFragment(),
-                                    navigateFrom = "NimbusBranchesController",
-                                    navigateTo = "ActionNimbusBranchesFragmentToDataChoicesFragment",
-                                    crashReporter = context.components.analytics.crashReporter,
-                                )
-                            },
-                        ),
-                    ),
-                ).show()
-            }
-        }
+//        if (!telemetryEnabled && !experimentsEnabled) {
+//            context.getRootView()?.let { v ->
+//                Snackbar.make(
+//                    snackBarParentView = v,
+//                    snackbarState = SnackbarState(
+//                        message = context.getString(R.string.experiments_snackbar),
+//                        duration = SnackbarState.Duration.Preset.Long,
+//                        action = Action(
+//                            label = context.getString(R.string.experiments_snackbar_button),
+//                            onClick = {
+//                                navController.navigateWithBreadcrumb(
+//                                    directions = NimbusBranchesFragmentDirections
+//                                        .actionNimbusBranchesFragmentToDataChoicesFragment(),
+//                                    navigateFrom = "NimbusBranchesController",
+//                                    navigateTo = "ActionNimbusBranchesFragmentToDataChoicesFragment",
+//                                    crashReporter = context.components.analytics.crashReporter,
+//                                )
+//                            },
+//                        ),
+//                    ),
+//                ).show()
+//            }
+//        }
     }
 
     private fun updateOptInState(branch: Branch) {
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingFragment.kt
index e5ab956ac3..4db7ffc14c 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingFragment.kt
@@ -29,12 +29,12 @@ import mozilla.components.service.nimbus.messaging.use
 import mozilla.components.support.base.log.logger.Logger
 import mozilla.components.support.utils.BrowsersCache
 import org.mozilla.fenix.FenixApplication
-import org.mozilla.fenix.GleanMetrics.Pings
+//import org.mozilla.fenix.GleanMetrics.Pings
 import org.mozilla.fenix.HomeActivity
 import org.mozilla.fenix.R
 import org.mozilla.fenix.browser.tabstrip.isTabStripEnabled
 import org.mozilla.fenix.components.accounts.FenixFxAEntryPoint
-import org.mozilla.fenix.components.initializeGlean
+//import org.mozilla.fenix.components.initializeGlean
 import org.mozilla.fenix.components.lazyStore
 import org.mozilla.fenix.components.startMetricsIfEnabled
 import org.mozilla.fenix.compose.LinkTextState
@@ -320,18 +320,18 @@ class OnboardingFragment : Fragment() {
         requireComponents.fenixOnboarding.finish()
 
         val settings = requireContext().settings()
-        viewLifecycleOwner.lifecycleScope.launch {
-            initializeGlean(
-                requireContext().applicationContext,
-                logger,
-                settings.isTelemetryEnabled,
-                requireComponents.core.client,
-            )
-        }
+//        viewLifecycleOwner.lifecycleScope.launch {
+//            initializeGlean(
+//                requireContext().applicationContext,
+//                logger,
+//                settings.isTelemetryEnabled,
+//                requireComponents.core.client,
+//            )
+//        }
 
         if (!settings.isTelemetryEnabled) {
-            Pings.onboardingOptOut.setEnabled(true)
-            Pings.onboardingOptOut.submit()
+//            Pings.onboardingOptOut.setEnabled(true)
+//            Pings.onboardingOptOut.submit()
         }
 
         startMetricsIfEnabled(
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/search/SearchDialogController.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/search/SearchDialogController.kt
index 6725aa64a0..17dec89626 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/search/SearchDialogController.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/search/SearchDialogController.kt
@@ -97,10 +97,10 @@ class SearchDialogController(
                 navController.navigateSafe(R.id.searchDialogFragment, directions)
                 store.dispatch(AwesomeBarAction.EngagementFinished(abandoned = false))
             }
-            "about:glean" -> {
-                val directions = SearchDialogFragmentDirections.actionGleanDebugToolsFragment()
-                navController.navigate(directions)
-            }
+//            "about:glean" -> {
+//                val directions = SearchDialogFragmentDirections.actionGleanDebugToolsFragment()
+//                navController.navigate(directions)
+//            }
             "moz://a" -> openSearchOrUrl(
                 SupportUtils.getMozillaPageUrl(SupportUtils.MozillaPage.MANIFESTO),
             )
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
index 43bea16286..8f460115af 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
@@ -182,7 +182,7 @@ class SecretSettingsFragment : PreferenceFragmentCompat() {
 
         lifecycleScope.launch {
             requirePreference<SwitchPreference>(R.string.pref_key_enable_debug_drawer).apply {
-                isVisible = true
+                isVisible = false
                 isChecked = debugSettingsRepository.debugDrawerEnabled.first()
                 onPreferenceChangeListener =
                     Preference.OnPreferenceChangeListener { _, newValue ->
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 9197b274db..5cd8fcfa66 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -380,20 +380,20 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         default = false,
     )
 
-    var isTelemetryEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_telemetry),
-        default = true,
-    )
+    var isTelemetryEnabled = false
+//        appContext.getPreferenceKey(R.string.pref_key_telemetry),
+//        default = true,
+//    )
 
-    var isMarketingTelemetryEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_marketing_telemetry),
-        default = false,
-    )
+    var isMarketingTelemetryEnabled = false
+//        appContext.getPreferenceKey(R.string.pref_key_marketing_telemetry),
+//        default = false,
+//    )
 
-    var hasMadeMarketingTelemetrySelection by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_marketing_telemetry_selection_made),
-        default = false,
-    )
+    var hasMadeMarketingTelemetrySelection = true
+//        appContext.getPreferenceKey(R.string.pref_key_marketing_telemetry_selection_made),
+//        default = false,
+//    )
 
     var hasAcceptedTermsOfService by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_terms_accepted),
@@ -406,11 +406,11 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      * sure that users who upgrade and had telemetry disabled don't start sending the
      * daily usage ping telemetry.
      */
-    var isDailyUsagePingEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_daily_usage_ping),
-        default = isTelemetryEnabled,
-        persistDefaultIfNotExists = true,
-    )
+    var isDailyUsagePingEnabled = false
+//        appContext.getPreferenceKey(R.string.pref_key_daily_usage_ping),
+//        default = isTelemetryEnabled,
+//        persistDefaultIfNotExists = true,
+//    )
 
     var isExperimentationEnabled by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_experimentation_v2),
diff --git a/mobile/android/fenix/app/src/main/res/xml/preferences.xml b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
index 4c6b14bf87..70256ee809 100644
--- a/mobile/android/fenix/app/src/main/res/xml/preferences.xml
+++ b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
@@ -141,10 +141,10 @@
             app:iconSpaceReserved="false"
             android:title="@string/preferences_notifications" />
 
-        <androidx.preference.Preference
+<!--        <androidx.preference.Preference
             android:key="@string/pref_key_data_choices"
             app:iconSpaceReserved="false"
-            android:title="@string/preferences_data_collection" />
+            android:title="@string/preferences_data_collection" /> -->
 
     </androidx.preference.PreferenceCategory>
 
