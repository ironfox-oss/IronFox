diff --git a/mobile/android/android-components/components/browser/engine-gecko/build.gradle b/mobile/android/android-components/components/browser/engine-gecko/build.gradle
index 7941343807..e56e90a005 100644
--- a/mobile/android/android-components/components/browser/engine-gecko/build.gradle
+++ b/mobile/android/android-components/components/browser/engine-gecko/build.gradle
@@ -58,7 +58,7 @@ android {
 // Set configuration for the Glean parser to extract metrics.yaml
 // file from AAR dependencies of this project rather than look
 // for it into the project directory.
-ext.allowMetricsFromAAR = true
+ext.allowMetricsFromAAR = false
 
 dependencies {
     implementation project(':concept-engine')
diff --git a/mobile/android/android-components/components/feature/addons/src/main/java/mozilla/components/feature/addons/worker/Extensions.kt b/mobile/android/android-components/components/feature/addons/src/main/java/mozilla/components/feature/addons/worker/Extensions.kt
index d897b9af6f..2fb1be3150 100644
--- a/mobile/android/android-components/components/feature/addons/src/main/java/mozilla/components/feature/addons/worker/Extensions.kt
+++ b/mobile/android/android-components/components/feature/addons/src/main/java/mozilla/components/feature/addons/worker/Extensions.kt
@@ -12,9 +12,5 @@ import java.io.IOException
  * Indicates if an exception should be reported to the crash reporter.
  */
 internal fun Exception.shouldReport(): Boolean {
-    val isRecoverable = (this as? WebExtensionException)?.isRecoverable ?: true
-    return cause !is IOException &&
-        cause !is CancellationException &&
-        this !is CancellationException &&
-        isRecoverable
+    return false
 }
diff --git a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/GleanCrashReporterService.kt b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/GleanCrashReporterService.kt
index 505963e058..e84b10074f 100644
--- a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/GleanCrashReporterService.kt
+++ b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/GleanCrashReporterService.kt
@@ -100,7 +100,6 @@ class GleanCrashReporterService(
         @SerialName("count")
         data class Count(val label: String) : GleanCrashAction() {
             override fun submit() {
-                CrashMetrics.crashCount[label].add()
             }
         }
 
@@ -116,11 +115,6 @@ class GleanCrashReporterService(
                 val minidumpHash: String?,
             ) : PingCause() {
                 override fun setMetrics() {
-                    GleanCrash.cause.set("os_fault")
-                    remoteType?.let { GleanCrash.remoteType.set(it) }
-                    minidumpHash?.let { GleanCrash.minidumpSha256Hash.set(it) }
-
-                    extras?.let(::setExtraMetrics)
                 }
 
                 private fun setExtraMetrics(extras: JsonObject) {
@@ -299,10 +293,6 @@ class GleanCrashReporterService(
                 val breadcrumbs: List<Breadcrumb>? = null,
             ) : PingCause() {
                 override fun setMetrics() {
-                    GleanCrash.cause.set("java_exception")
-                    GleanCrash.javaException.set(
-                        Json.decodeFromJsonElement<GleanCrash.JavaExceptionObject>(throwableJson),
-                    )
                 }
             }
         }
@@ -319,43 +309,6 @@ class GleanCrashReporterService(
             val startup: Boolean = false,
         ) : GleanCrashAction() {
             override fun submit() {
-                GleanEnvironment.uptime.setRawNanos(uptimeNanos)
-                GleanCrash.processType.set(processType)
-                GleanCrash.time.set(Date(timeMillis))
-                GleanCrash.startup.set(startup)
-                cause.setMetrics()
-
-                if (breadcrumbs.isNotEmpty()) {
-                    GleanCrash.breadcrumbs.set(
-                        Json.decodeFromJsonElement<GleanCrash.BreadcrumbsObject>(
-                            JsonArray(
-                                breadcrumbs.map { breadcrumb ->
-                                    JsonObject(
-                                        mapOf(
-                                            "timestamp" to JsonPrimitive(breadcrumb.timestamp),
-                                            "category" to JsonPrimitive(breadcrumb.category),
-                                            "type" to JsonPrimitive(breadcrumb.type),
-                                            "level" to JsonPrimitive(breadcrumb.level),
-                                            "message" to JsonPrimitive(breadcrumb.message),
-                                            "data" to JsonArray(
-                                                breadcrumb.data.map {
-                                                    JsonObject(
-                                                        mapOf(
-                                                            "key" to JsonPrimitive(it.key),
-                                                            "value" to JsonPrimitive(it.value),
-                                                        ),
-                                                    )
-                                                },
-                                            ),
-                                        ),
-                                    )
-                                },
-                            ),
-                        ),
-                    )
-                }
-
-                Pings.crash.submit(reason)
             }
         }
     }
@@ -493,17 +446,6 @@ class GleanCrashReporterService(
     }
 
     override fun record(crash: Crash.UncaughtExceptionCrash) {
-        recordCrashAction(GleanCrashAction.Count(UNCAUGHT_EXCEPTION_KEY))
-        recordCrashAction(
-            GleanCrashAction.Ping(
-                uptimeNanos = uptime(),
-                processType = "main",
-                timeMillis = crash.timestamp,
-                reason = Pings.crashReasonCodes.crash,
-                cause = GleanCrashAction.PingCause.JavaException(crash.throwable.toJson()),
-                breadcrumbs = crash.breadcrumbs.map { it.toBreadcrumb() },
-            ),
-        )
     }
 
     private fun getExtrasJson(path: String): JsonObject? {
@@ -582,72 +524,8 @@ class GleanCrashReporterService(
     }
 
     override fun record(crash: Crash.NativeCodeCrash) {
-        when (crash.processType) {
-            Crash.NativeCodeCrash.PROCESS_TYPE_MAIN ->
-                recordCrashAction(GleanCrashAction.Count(MAIN_PROCESS_NATIVE_CODE_CRASH_KEY))
-            Crash.NativeCodeCrash.PROCESS_TYPE_FOREGROUND_CHILD ->
-                recordCrashAction(
-                    GleanCrashAction.Count(
-                        FOREGROUND_CHILD_PROCESS_NATIVE_CODE_CRASH_KEY,
-                    ),
-                )
-            Crash.NativeCodeCrash.PROCESS_TYPE_BACKGROUND_CHILD ->
-                recordCrashAction(
-                    GleanCrashAction.Count(
-                        BACKGROUND_CHILD_PROCESS_NATIVE_CODE_CRASH_KEY,
-                    ),
-                )
-        }
-
-        // The `processType` property on a crash is a bit confusing because it does not map to the actual process types
-        // (like main, content, gpu, etc.). This property indicates what UI we should show to users given that "main"
-        // crashes essentially kill the app, "foreground child" crashes are likely tab crashes, and "background child"
-        // crashes are occurring in other processes (like GPU and extensions) for which users shouldn't notice anything
-        // (because there shouldn't be any noticeable impact in the app and the processes will be recreated
-        // automatically).
-        val processType = when (crash.processType) {
-            Crash.NativeCodeCrash.PROCESS_TYPE_MAIN -> "main"
-
-            Crash.NativeCodeCrash.PROCESS_TYPE_BACKGROUND_CHILD -> {
-                when (crash.remoteType) {
-                    // The extensions process is a content process as per:
-                    // https://firefox-source-docs.mozilla.org/dom/ipc/process_model.html#webextensions
-                    "extension" -> "content"
-
-                    else -> "utility"
-                }
-            }
-
-            Crash.NativeCodeCrash.PROCESS_TYPE_FOREGROUND_CHILD -> "content"
-
-            else -> "main"
-        }
-
-        if (crash.minidumpPath != null && crash.extrasPath != null) {
-            MinidumpAnalyzer.load()?.run(crash.minidumpPath, crash.extrasPath, false)
-        }
-
-        val extrasJson = crash.extrasPath?.let { getExtrasJson(it) }
-
-        val minidumpHash = crash.minidumpPath?.let { calculateMinidumpHash(it) }
-
-        recordCrashAction(
-            GleanCrashAction.Ping(
-                uptimeNanos = uptime(),
-                processType = processType,
-                timeMillis = crash.timestamp,
-                reason = Pings.crashReasonCodes.crash,
-                cause = GleanCrashAction.PingCause.OsFault(
-                    remoteType = crash.remoteType,
-                    extras = extrasJson,
-                    minidumpHash = minidumpHash,
-                ),
-                breadcrumbs = crash.breadcrumbs.map { it.toBreadcrumb() },
-            ),
-        )
     }
 
     override fun record(throwable: Throwable) {
-        recordCrashAction(GleanCrashAction.Count(CAUGHT_EXCEPTION_KEY))
     }
 }
diff --git a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/MozillaSocorroService.kt b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/MozillaSocorroService.kt
index 900fc5ebb6..ea5c0b2ad7 100644
--- a/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/MozillaSocorroService.kt
+++ b/mobile/android/android-components/components/lib/crash/src/main/java/mozilla/components/lib/crash/service/MozillaSocorroService.kt
@@ -103,7 +103,7 @@ class MozillaSocorroService(
     override val name: String = "Socorro"
 
     override fun createCrashReportUrl(identifier: String): String? {
-        return "https://crash-stats.mozilla.org/report/index/$identifier"
+        return ""
     }
 
     init {
@@ -556,7 +556,7 @@ class MozillaSocorroService(
     }
 
     internal fun buildServerUrl(versionName: String): String =
-        "https://crash-reports.mozilla.com/submit".toUri()
+        "".toUri()
             .buildUpon()
             .appendQueryParameter("id", appId)
             .appendQueryParameter("version", versionName)
diff --git a/mobile/android/android-components/components/lib/crash-sentry/src/main/java/mozilla/components/lib/crash/sentry/SentryService.kt b/mobile/android/android-components/components/lib/crash-sentry/src/main/java/mozilla/components/lib/crash/sentry/SentryService.kt
index bc9ae7fe5b..e89859e038 100644
--- a/mobile/android/android-components/components/lib/crash-sentry/src/main/java/mozilla/components/lib/crash/sentry/SentryService.kt
+++ b/mobile/android/android-components/components/lib/crash-sentry/src/main/java/mozilla/components/lib/crash/sentry/SentryService.kt
@@ -44,7 +44,7 @@ class SentryService(
     private val environment: String? = null,
     private val sendEventForNativeCrashes: Boolean = false,
     private val sentryProjectUrl: String? = null,
-    private val sendCaughtExceptions: Boolean = true,
+    private val sendCaughtExceptions: Boolean = false,
 ) : CrashReporterService {
 
     override val id: String = "new-sentry-instance"
diff --git a/mobile/android/fenix/app/build.gradle b/mobile/android/fenix/app/build.gradle
index bdbc2336e3..8fe75f4fd1 100644
--- a/mobile/android/fenix/app/build.gradle
+++ b/mobile/android/fenix/app/build.gradle
@@ -301,7 +301,7 @@ android.applicationVariants.configureEach { variant ->
     project.logger.debug("Application ID:    " + [variant.applicationId, variant.buildType.applicationIdSuffix].findAll().join())
     project.logger.debug("Build type:        " + variant.buildType.name)
     project.logger.debug("Flavor:            " + variant.flavorName)
-    project.logger.debug("Telemetry enabled: " + !isDebug)
+    project.logger.debug("Telemetry enabled: " + false)
 
     if (useReleaseVersioning) {
         // The Google Play Store does not allow multiple APKs for the same app that all have the
@@ -343,7 +343,7 @@ android.applicationVariants.configureEach { variant ->
 
     buildConfigField 'String', 'SENTRY_TOKEN', 'null'
     if (!isDebug) {
-        buildConfigField 'boolean', 'CRASH_REPORTING', 'true'
+        buildConfigField 'boolean', 'CRASH_REPORTING', 'false'
         // Reading sentry token from local file (if it exists). In a release task on taskcluster it will be available.
         try {
             def token = new File("${rootDir}/.sentry_token").text.trim()
@@ -354,7 +354,7 @@ android.applicationVariants.configureEach { variant ->
     }
 
     if (!isDebug) {
-        buildConfigField 'boolean', 'TELEMETRY', 'true'
+        buildConfigField 'boolean', 'TELEMETRY', 'false'
     } else {
         buildConfigField 'boolean', 'TELEMETRY', 'false'
     }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
index 8b96400722..c8a88c0629 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
@@ -66,7 +66,7 @@ object FeatureFlags {
     /**
      * Enable Meta attribution.
      */
-    const val META_ATTRIBUTION_ENABLED = true
+    const val META_ATTRIBUTION_ENABLED = false
 
     /**
      * Enables Homepage as a New Tab.
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
index 9e7842dfd5..fa80f938ec 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
@@ -496,10 +496,6 @@ open class FenixApplication : LocaleAwareApplication(), Provider {
     }
 
     private fun setupCrashReporting() {
-        components
-            .analytics
-            .crashReporter
-            .install(this)
     }
 
     protected open fun initializeNimbus() {
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
index 1ad6a264c7..c9ea9932ca 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
@@ -16,7 +16,6 @@ import mozilla.components.lib.crash.service.GleanCrashReporterService
 import mozilla.components.lib.crash.service.MozillaSocorroService
 import mozilla.components.support.ktx.android.content.isMainProcess
 import mozilla.components.support.utils.BrowsersCache
-import mozilla.components.support.utils.RunWhenReadyQueue
 import org.mozilla.fenix.BuildConfig
 import org.mozilla.fenix.Config
 import org.mozilla.fenix.HomeActivity
@@ -45,7 +44,6 @@ import org.mozilla.geckoview.BuildConfig.MOZ_UPDATE_CHANNEL
  */
 class Analytics(
     private val context: Context,
-    private val runWhenReadyQueue: RunWhenReadyQueue,
 ) {
     val crashReporter: CrashReporter by lazyMonitored {
         val services = mutableListOf<CrashReporterService>()
@@ -57,7 +55,7 @@ class Analytics(
             // we get most value out of nightly/beta logging anyway.
             val shouldSendCaughtExceptions = when (Config.channel) {
                 ReleaseChannel.Release -> false
-                else -> true
+                else -> false
             }
             val sentryService = SentryService(
                 context,
@@ -74,12 +72,7 @@ class Analytics(
 
             // We only want to initialize Sentry on startup on the main process.
             if (context.isMainProcess()) {
-                runWhenReadyQueue.runIfReadyOrQueue {
-                    sentryService.initIfNeeded()
-                }
             }
-
-            services.add(sentryService)
         }
 
         // The name "Fenix" here matches the product name on Socorro and is unrelated to the actual app name:
@@ -93,7 +86,6 @@ class Analytics(
             releaseChannel = MOZ_UPDATE_CHANNEL,
             distributionId = distributionId,
         )
-        services.add(socorroService)
 
         val intent = Intent(context, HomeActivity::class.java).apply {
             flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
@@ -119,7 +111,7 @@ class Analytics(
                 appName = context.getString(R.string.app_name),
                 organizationName = "Mozilla",
             ),
-            enabled = true,
+            enabled = false,
             nonFatalCrashIntent = pendingIntent,
             useLegacyReporting = !context.settings().crashReportAlwaysSend &&
                 !context.settings().useNewCrashReporterDialog,
@@ -161,10 +153,10 @@ class Analytics(
     }
 }
 
-private fun isSentryEnabled() = !BuildConfig.SENTRY_TOKEN.isNullOrEmpty()
+private fun isSentryEnabled() = false
 
 private fun getSentryProjectUrl(): String? {
-    val baseUrl = "https://sentry.io/organizations/mozilla/issues"
+    val baseUrl = ""
     return when (Config.channel) {
         ReleaseChannel.Nightly -> "$baseUrl/?project=6295546"
         ReleaseChannel.Release -> "$baseUrl/?project=6375561"
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt
index 72acbf329a..ccc0bf6e42 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Components.kt
@@ -184,7 +184,7 @@ class Components(private val context: Context) {
         AddonManager(core.store, core.engine, addonsProvider, addonUpdater)
     }
 
-    val analytics by lazyMonitored { Analytics(context, performance.visualCompletenessQueue.queue) }
+    val analytics by lazyMonitored { Analytics(context) }
     val nimbus by lazyMonitored { NimbusComponents(context) }
     val publicSuffixList by lazyMonitored { PublicSuffixList(context) }
     val clipboardHandler by lazyMonitored { ClipboardHandler(context) }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
index e57302c306..fb6ac9c9c9 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
@@ -60,14 +60,11 @@ import mozilla.components.feature.pwa.WebAppShortcutManager
 import mozilla.components.feature.readerview.ReaderViewMiddleware
 import mozilla.components.feature.recentlyclosed.RecentlyClosedMiddleware
 import mozilla.components.feature.recentlyclosed.RecentlyClosedTabsStorage
-import mozilla.components.feature.search.middleware.AdsTelemetryMiddleware
+import mozilla.components.feature.search.ext.createApplicationSearchEngine
 import mozilla.components.feature.search.middleware.SearchExtraParams
 import mozilla.components.feature.search.middleware.SearchMiddleware
 import mozilla.components.feature.search.region.RegionMiddleware
 import mozilla.components.feature.search.storage.SearchEngineSelectorConfig
-import mozilla.components.feature.search.telemetry.SerpTelemetryRepository
-import mozilla.components.feature.search.telemetry.ads.AdsTelemetry
-import mozilla.components.feature.search.telemetry.incontent.InContentTelemetry
 import mozilla.components.feature.session.HistoryDelegate
 import mozilla.components.feature.session.middleware.LastAccessMiddleware
 import mozilla.components.feature.session.middleware.undo.UndoMiddleware
@@ -129,7 +126,6 @@ import org.mozilla.fenix.settings.advanced.getSelectedLocale
 import org.mozilla.fenix.share.DefaultSentFromFirefoxManager
 import org.mozilla.fenix.share.DefaultSentFromStorage
 import org.mozilla.fenix.share.SaveToPDFMiddleware
-import org.mozilla.fenix.telemetry.TelemetryMiddleware
 import org.mozilla.fenix.utils.getUndoDelay
 import org.mozilla.geckoview.GeckoRuntime
 import java.util.UUID
@@ -306,7 +302,6 @@ class Core(
                 RecentlyClosedMiddleware(recentlyClosedTabsStorage, RECENTLY_CLOSED_MAX),
                 DownloadMiddleware(context, DownloadService::class.java),
                 ReaderViewMiddleware(),
-                TelemetryMiddleware(context, context.settings(), metrics, crashReporter),
                 ThumbnailsMiddleware(thumbnailStorage),
                 UndoMiddleware(context.getUndoDelay()),
                 RegionMiddleware(context, locationService),
@@ -319,7 +314,6 @@ class Core(
                 ),
                 RecordingDevicesMiddleware(context, context.components.notificationsDelegate),
                 PromptMiddleware(),
-                AdsTelemetryMiddleware(adsTelemetry),
                 LastMediaAccessMiddleware(),
                 HistoryMetadataMiddleware(historyMetadataService),
                 SessionPrioritizationMiddleware(),
@@ -354,26 +348,6 @@ class Core(
             // Install the "icons" WebExtension to automatically load icons for every visited website.
             icons.install(engine, this)
 
-            CoroutineScope(Dispatchers.Main).launch {
-                val readJson = { context.assets.readJSONObject("search/search_telemetry_v2.json") }
-                val providerList = withContext(Dispatchers.IO) {
-                    SerpTelemetryRepository(
-                        rootStorageDirectory = context.filesDir,
-                        readJson = readJson,
-                        collectionName = COLLECTION_NAME,
-                        serverUrl = if (context.settings().useProductionRemoteSettingsServer) {
-                            REMOTE_PROD_ENDPOINT_URL
-                        } else {
-                            REMOTE_STAGE_ENDPOINT_URL
-                        },
-                    ).updateProviderList()
-                }
-                // Install the "ads" WebExtension to get the links in an partner page.
-                adsTelemetry.install(engine, this@apply, providerList)
-                // Install the "cookies" WebExtension and tracks user interaction with SERPs.
-                searchTelemetry.install(engine, this@apply, providerList)
-            }
-
             WebNotificationFeature(
                 context,
                 engine,
@@ -419,18 +393,6 @@ class Core(
         BrowserIcons(context, client)
     }
 
-    val metrics by lazyMonitored {
-        context.components.analytics.metrics
-    }
-
-    val adsTelemetry by lazyMonitored {
-        AdsTelemetry()
-    }
-
-    val searchTelemetry by lazyMonitored {
-        InContentTelemetry()
-    }
-
     /**
      * Shortcut component for managing shortcuts on the device home screen.
      */
@@ -720,7 +682,7 @@ class Core(
         const val METADATA_SHORTCUT_SUGGESTION_LIMIT = 20
 
         // collection name to fetch from server for SERP telemetry
-        const val COLLECTION_NAME = "search-telemetry-v2"
+        const val COLLECTION_NAME = ""
         internal const val REMOTE_PROD_ENDPOINT_URL = "https://firefox.settings.services.mozilla.com"
         internal const val REMOTE_STAGE_ENDPOINT_URL = "https://firefox.settings.services.allizom.org"
     }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/GleanHelper.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/GleanHelper.kt
index a708898f06..736e6dfcf8 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/GleanHelper.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/GleanHelper.kt
@@ -29,20 +29,13 @@ import org.mozilla.fenix.nimbus.FxNimbus
 fun initializeGlean(applicationContext: Context, logger: Logger, isTelemetryUploadEnabled: Boolean, client: Client) {
     logger.debug("Initializing Glean (uploadEnabled=$isTelemetryUploadEnabled})")
 
-    // for performance reasons, this is only available in Nightly or Debug builds
-    val customEndpoint = if (Config.channel.isNightlyOrDebug) {
-        // for testing, if custom glean server url is set in the secret menu, use it to initialize Glean
-        getCustomGleanServerUrlIfAvailable(applicationContext)
-    } else {
-        null
-    }
-
     val configuration = Configuration(
+        serverEndpoint = "",
         channel = BuildConfig.BUILD_TYPE,
         httpClient = ConceptFetchHttpUploader(
             lazy(LazyThreadSafetyMode.NONE) { client },
         ),
-        enableEventTimestamps = FxNimbus.features.glean.value().enableEventTimestamps,
+        enableEventTimestamps = false,
         delayPingLifetimeIo = FxNimbus.features.glean.value().delayPingLifetimeIo,
         pingLifetimeThreshold = FxNimbus.features.glean.value().pingLifetimeThreshold,
         pingLifetimeMaxTime = FxNimbus.features.glean.value().pingLifetimeMaxTime,
@@ -58,8 +51,8 @@ fun initializeGlean(applicationContext: Context, logger: Logger, isTelemetryUplo
 
     Glean.initialize(
         applicationContext = applicationContext,
-        configuration = configuration.setCustomEndpointIfAvailable(customEndpoint),
-        uploadEnabled = isTelemetryUploadEnabled,
+        configuration = configuration,
+        uploadEnabled = false,
         buildInfo = GleanBuildInfo.buildInfo,
     )
 }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/GleanMetricsService.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/GleanMetricsService.kt
index ea4ff1e0dd..84f04bd06d 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/GleanMetricsService.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/GleanMetricsService.kt
@@ -70,9 +70,9 @@ class GleanMetricsService(
     private val activationPing = ActivationPing(context)
 
     override fun start() {
-        logger.debug("Enabling Glean.")
+        logger.debug("Not Enabling Glean.")
         // Initialization of Glean already happened in FenixApplication.
-        Glean.setCollectionEnabled(true)
+        Glean.setCollectionEnabled(false)
 
         if (initialized) return
         initialized = true
@@ -86,8 +86,6 @@ class GleanMetricsService(
             // These two things actually happen in parallel, but that should be ok because Glean
             // can handle events being recorded before it's initialized.
             Glean.registerPings(Pings)
-
-            activationPing.checkAndSend()
         }
     }
 
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MetricsStorage.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MetricsStorage.kt
index a5457b56e7..e7532771eb 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MetricsStorage.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/metrics/MetricsStorage.kt
@@ -273,9 +273,9 @@ internal class DefaultMetricsStorage(
          * - user has installed as a result of a campaign
          * - tracking is still enabled through Nimbus
          */
+        @Suppress("UNUSED_PARAMETER")
         fun shouldSendGenerally(context: Context): Boolean {
-            return context.settings().adjustCampaignId.isNotEmpty() &&
-                FxNimbus.features.growthData.value().enabled
+            return false
         }
 
         fun getInstalledTime(context: Context): Long = context.packageManager
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/experiments/NimbusSetup.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/experiments/NimbusSetup.kt
index 36d4b4c349..af2ba6479e 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/experiments/NimbusSetup.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/experiments/NimbusSetup.kt
@@ -102,10 +102,7 @@ private fun Context.reportError(message: String, e: Throwable) {
  * This fix should be upstreamed as part of: https://github.com/mozilla/application-services/issues/4333
  */
 fun NimbusException.isReportableError(): Boolean {
-    return when (this) {
-        is NimbusException.ClientException -> false
-        else -> true
-    }
+    return false
 }
 
 /**
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt
index c1b54d7f27..01fd0d7427 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt
@@ -42,34 +42,7 @@ class NimbusBranchesController(
 ) : NimbusBranchesAdapterDelegate {
 
     override fun onBranchItemClicked(branch: Branch) {
-        val telemetryEnabled = context.settings().isTelemetryEnabled
-        val experimentsEnabled = context.settings().isExperimentationEnabled
-
         updateOptInState(branch)
-
-        if (!telemetryEnabled && !experimentsEnabled) {
-            context.getRootView()?.let { v ->
-                Snackbar.make(
-                    snackBarParentView = v,
-                    snackbarState = SnackbarState(
-                        message = context.getString(R.string.experiments_snackbar),
-                        duration = SnackbarState.Duration.Preset.Long,
-                        action = Action(
-                            label = context.getString(R.string.experiments_snackbar_button),
-                            onClick = {
-                                navController.navigateWithBreadcrumb(
-                                    directions = NimbusBranchesFragmentDirections
-                                        .actionNimbusBranchesFragmentToDataChoicesFragment(),
-                                    navigateFrom = "NimbusBranchesController",
-                                    navigateTo = "ActionNimbusBranchesFragmentToDataChoicesFragment",
-                                    crashReporter = context.components.analytics.crashReporter,
-                                )
-                            },
-                        ),
-                    ),
-                ).show()
-            }
-        }
     }
 
     private fun updateOptInState(branch: Branch) {
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingFragment.kt
index 64d09acb1a..f67ade3fbb 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingFragment.kt
@@ -367,8 +367,7 @@ class OnboardingFragment : Fragment() {
             requireComponents.core.client,
         )
         if (!settings.isTelemetryEnabled) {
-            Pings.onboardingOptOut.setEnabled(true)
-            Pings.onboardingOptOut.submit()
+            Pings.onboardingOptOut.setEnabled(false)
         }
 
         startMetricsIfEnabled(
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 72493a2c21..a202120a9d 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -180,8 +180,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     }
 
     @VisibleForTesting
-    internal val isCrashReportEnabledInBuild: Boolean =
-        BuildConfig.CRASH_REPORTING && Config.channel.isReleased
+    internal val isCrashReportEnabledInBuild: Boolean = false
 
     override val preferences: SharedPreferences =
         appContext.getSharedPreferences(FENIX_PREFERENCES, MODE_PRIVATE)
@@ -380,37 +379,20 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         default = true,
     )
 
-    val isCrashReportingEnabled: Boolean
-        get() = isCrashReportEnabledInBuild &&
-            preferences.getBoolean(
-                appContext.getPreferenceKey(R.string.pref_key_crash_reporter),
-                true,
-            )
+    val isCrashReportingEnabled: Boolean = false
 
     val isRemoteDebuggingEnabled by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_remote_debugging),
         default = false,
     )
 
-    var isTelemetryEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_telemetry),
-        default = true,
-    )
+    var isTelemetryEnabled = false
 
-    var isMarketingTelemetryEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_marketing_telemetry),
-        default = false,
-    )
+    var isMarketingTelemetryEnabled = false
 
-    var hasMadeMarketingTelemetrySelection by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_marketing_telemetry_selection_made),
-        default = false,
-    )
+    var hasMadeMarketingTelemetrySelection = true
 
-    var hasAcceptedTermsOfService by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_terms_accepted),
-        default = false,
-    )
+    var hasAcceptedTermsOfService = true
 
     /**
      * The daily usage ping is not normally tied to normal telemetry.  We set the default value to
@@ -418,16 +400,9 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      * sure that users who upgrade and had telemetry disabled don't start sending the
      * daily usage ping telemetry.
      */
-    var isDailyUsagePingEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_daily_usage_ping),
-        default = isTelemetryEnabled,
-        persistDefaultIfNotExists = true,
-    )
+    var isDailyUsagePingEnabled = false
 
-    var isExperimentationEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_experimentation_v2),
-        default = isTelemetryEnabled,
-    )
+    var isExperimentationEnabled = false
 
     var isOverrideTPPopupsForPerformanceTest = false
 
@@ -2370,10 +2345,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      * A user preference indicating that crash reports should always be automatically sent. This can be updated
      * through the unsubmitted crash dialog or through data choice preferences.
      */
-    var crashReportAlwaysSend by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_crash_reporting_always_report),
-        default = false,
-    )
+    var crashReportAlwaysSend = false
 
     /**
      * Indicates whether or not we should use the new crash reporter dialog.
diff --git a/mobile/android/fenix/app/src/main/res/xml/preferences.xml b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
index 4c6b14bf87..e6399548b9 100644
--- a/mobile/android/fenix/app/src/main/res/xml/preferences.xml
+++ b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
@@ -141,11 +141,6 @@
             app:iconSpaceReserved="false"
             android:title="@string/preferences_notifications" />
 
-        <androidx.preference.Preference
-            android:key="@string/pref_key_data_choices"
-            app:iconSpaceReserved="false"
-            android:title="@string/preferences_data_collection" />
-
     </androidx.preference.PreferenceCategory>
 
     <PreferenceCategory
@@ -207,10 +202,6 @@
         android:title="@string/preferences_category_about"
         app:iconSpaceReserved="false"
         android:layout="@layout/preference_category_no_icon_style">
-        <androidx.preference.Preference
-            android:key="@string/pref_key_rate"
-            app:iconSpaceReserved="false"
-            android:title="@string/preferences_rate" />
 
         <androidx.preference.Preference
             android:key="@string/pref_key_about"
diff --git a/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java b/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java
index eb00f87b41..ce8e2b7a03 100644
--- a/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java
+++ b/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java
@@ -38,7 +38,7 @@ public class CrashHandler implements Thread.UncaughtExceptionHandler {
   private static final String LOGTAG = "GeckoCrashHandler";
   private static final Thread MAIN_THREAD = Thread.currentThread();
   private static final String DEFAULT_SERVER_URL =
-      "https://crash-reports.mozilla.com/submit?id=%1$s&version=%2$s&buildid=%3$s";
+      "";
 
   // Context for getting device information
   private @Nullable final Context mAppContext;
diff --git a/mobile/android/moz.configure b/mobile/android/moz.configure
index 0e2a6efdc9..c931fb3c74 100644
--- a/mobile/android/moz.configure
+++ b/mobile/android/moz.configure
@@ -112,7 +112,7 @@ set_config("MOZ_ANDROID_DEBUGGABLE", android_debuggable)
 
 
 imply_option("MOZ_NORMANDY", False)
-imply_option("MOZ_SERVICES_HEALTHREPORT", True)
+imply_option("MOZ_SERVICES_HEALTHREPORT", False)
 imply_option("MOZ_GECKOVIEW_HISTORY", True)
 
 imply_option("MOZ_APP_UA_NAME", "Firefox")
diff --git a/python/mach/mach/telemetry.py b/python/mach/mach/telemetry.py
index a3fda9a59b..b541a040df 100644
--- a/python/mach/mach/telemetry.py
+++ b/python/mach/mach/telemetry.py
@@ -92,10 +92,7 @@ def is_applicable_telemetry_environment():
 
 
 def is_telemetry_enabled(settings):
-    if os.environ.get("DISABLE_TELEMETRY") == "1":
-        return False
-
-    return settings.mach_telemetry.is_enabled
+    return False
 
 
 def arcrc_path():
diff --git a/toolkit/components/glean/src/init/mod.rs b/toolkit/components/glean/src/init/mod.rs
index 42c16ebb87..ca40d36618 100644
--- a/toolkit/components/glean/src/init/mod.rs
+++ b/toolkit/components/glean/src/init/mod.rs
@@ -71,8 +71,8 @@ pub extern "C" fn fog_init(
     app_id_override: &nsACString,
     disable_internal_pings: bool,
 ) -> nsresult {
-    // On Android always enable Glean upload.
-    let upload_enabled = true;
+    // On Android always disable Glean upload.
+    let upload_enabled = false;
     // Don't set up an uploader.
     let uploader = None;
 
@@ -155,7 +155,7 @@ fn build_configuration(
         if app_id_override == "thunderbird.desktop" {
             String::from("https://incoming.thunderbird.net")
         } else {
-            String::from("https://incoming.telemetry.mozilla.org")
+            String::from("")
         }
     };
 
@@ -190,9 +190,9 @@ fn build_configuration(
         trim_data_to_registered_pings: true,
         log_level: None,
         rate_limit,
-        enable_event_timestamps: true,
+        enable_event_timestamps: false,
         experimentation_id: None,
-        enable_internal_pings: true,
+        enable_internal_pings: false,
         ping_schedule: pings::ping_schedule(),
         ping_lifetime_threshold: 0,
         ping_lifetime_max_time: Duration::ZERO,
@@ -373,8 +373,8 @@ fn fog_test_reset_internal(
 ) -> Result<(), nsresult> {
     let (mut conf, client_info) = build_configuration(data_path_override, app_id_override)?;
 
-    // On Android always enable Glean upload.
-    conf.upload_enabled = true;
+    // On Android always disable Glean upload.
+    conf.upload_enabled = false;
 
     // Don't accidentally send "main" pings during tests.
     conf.use_core_mps = false;
diff --git a/toolkit/components/glean/src/init/viaduct_uploader.rs b/toolkit/components/glean/src/init/viaduct_uploader.rs
index b61d7e2036..cc8e1feb48 100644
--- a/toolkit/components/glean/src/init/viaduct_uploader.rs
+++ b/toolkit/components/glean/src/init/viaduct_uploader.rs
@@ -117,7 +117,7 @@ fn ohttp_upload(upload_request: PingUploadRequest) -> Result<UploadResult, Viadu
     let ohttp_request = ohttp::ClientRequest::from_encoded_config(config)?;
     let (capsule, ohttp_response) = ohttp_request.encapsulate(&binary_request)?;
 
-    const OHTTP_RELAY_URL: &str = "https://mozilla-ohttp.fastly-edge.com/";
+    const OHTTP_RELAY_URL: &str = "";
     let parsed_relay_url = Url::parse(OHTTP_RELAY_URL)?;
 
     log::trace!("FOG ohttp uploader uploading to {}", parsed_relay_url);
@@ -148,7 +148,7 @@ fn ohttp_upload(upload_request: PingUploadRequest) -> Result<UploadResult, Viadu
 
 fn get_config() -> Result<Vec<u8>, ViaductUploaderError> {
     const OHTTP_CONFIG_URL: &str =
-        "https://prod.ohttp-gateway.prod.webservices.mozgcp.net/ohttp-configs";
+        "";
     log::trace!("Getting OHTTP config from {}", OHTTP_CONFIG_URL);
     let parsed_config_url = Url::parse(OHTTP_CONFIG_URL)?;
     Ok(Request::get(parsed_config_url).send()?.body)
diff --git a/toolkit/components/telemetry/app/TelemetryControllerBase.sys.mjs b/toolkit/components/telemetry/app/TelemetryControllerBase.sys.mjs
index cf0a7bd372..62215f9a6b 100644
--- a/toolkit/components/telemetry/app/TelemetryControllerBase.sys.mjs
+++ b/toolkit/components/telemetry/app/TelemetryControllerBase.sys.mjs
@@ -87,28 +87,8 @@ export var TelemetryControllerBase = Object.freeze({
   setTelemetryRecordingFlags() {
     // Enable extended Telemetry on pre-release channels and disable it
     // on Release/ESR.
-    let prereleaseChannels = [
-      "nightly",
-      "nightly-autoland",
-      "nightly-try",
-      "aurora",
-      "beta",
-    ];
-    if (!AppConstants.MOZILLA_OFFICIAL) {
-      // Turn extended telemetry for local developer builds.
-      prereleaseChannels.push("default");
-    }
-    const isPrereleaseChannel = prereleaseChannels.includes(
-      AppConstants.MOZ_UPDATE_CHANNEL
-    );
-    const isReleaseCandidateOnBeta =
-      AppConstants.MOZ_UPDATE_CHANNEL === "release" &&
-      Services.prefs.getCharPref("app.update.channel", null) === "beta";
-    Services.telemetry.canRecordBase = true;
-    Services.telemetry.canRecordExtended =
-      isPrereleaseChannel ||
-      isReleaseCandidateOnBeta ||
-      Services.prefs.getBoolPref(this.Preferences.OverridePreRelease, false);
+    Services.telemetry.canRecordBase = false;
+    Services.telemetry.canRecordExtended = false;
   },
 
   /**
diff --git a/toolkit/components/telemetry/app/TelemetryReportingPolicy.sys.mjs b/toolkit/components/telemetry/app/TelemetryReportingPolicy.sys.mjs
index 349d7097f0..993f038a14 100644
--- a/toolkit/components/telemetry/app/TelemetryReportingPolicy.sys.mjs
+++ b/toolkit/components/telemetry/app/TelemetryReportingPolicy.sys.mjs
@@ -279,11 +279,7 @@ var TelemetryReportingPolicyImpl = {
    * false, we never request upload or deletion.
    */
   get dataSubmissionEnabled() {
-    // Default is true because we are opt-out.
-    return Services.prefs.getBoolPref(
-      TelemetryUtils.Preferences.DataSubmissionEnabled,
-      true
-    );
+    return false;
   },
 
   get currentPolicyVersion() {
@@ -716,7 +712,7 @@ var TelemetryReportingPolicyImpl = {
     return this._ensureUserIsNotifiedPromise.then(() => {
       // The user has been notified and interacted with the modal.
       // Glean can now init on shutdown if necessary.
-      Services.prefs.setBoolPref("telemetry.fog.init_on_shutdown", true);
+      Services.prefs.setBoolPref("telemetry.fog.init_on_shutdown", false);
     });
   },
 
diff --git a/toolkit/components/telemetry/app/UsageReporting.sys.mjs b/toolkit/components/telemetry/app/UsageReporting.sys.mjs
index 4a3e1de32d..baeff11b29 100644
--- a/toolkit/components/telemetry/app/UsageReporting.sys.mjs
+++ b/toolkit/components/telemetry/app/UsageReporting.sys.mjs
@@ -45,7 +45,7 @@ export var UsageReporting = {
 
       // Usage deletion requests can always be sent.  They are
       // always sent in response to user action.
-      GleanPings.usageDeletionRequest.setEnabled(true);
+      GleanPings.usageDeletionRequest.setEnabled(false);
 
       // Usage pings should only be sent when upload is enabled.
       // Eventually, Glean will persist this setting.
diff --git a/toolkit/components/telemetry/core/Telemetry.cpp b/toolkit/components/telemetry/core/Telemetry.cpp
index 8b7ac7a40f..9edac397ea 100644
--- a/toolkit/components/telemetry/core/Telemetry.cpp
+++ b/toolkit/components/telemetry/core/Telemetry.cpp
@@ -1119,7 +1119,7 @@ NS_IMETHODIMP
 TelemetryImpl::GetIsOfficialTelemetry(bool* ret) {
 #if defined(MOZILLA_OFFICIAL) && defined(MOZ_TELEMETRY_REPORTING) && \
     !defined(DEBUG)
-  *ret = true;
+  *ret = false;
 #else
   *ret = false;
 #endif
@@ -1138,7 +1138,7 @@ already_AddRefed<nsITelemetry> TelemetryImpl::CreateTelemetryInstance() {
 #ifndef FUZZING
   if (XRE_IsParentProcess() || XRE_IsContentProcess() || XRE_IsGPUProcess() ||
       XRE_IsRDDProcess() || XRE_IsSocketProcess() || XRE_IsUtilityProcess()) {
-    useTelemetry = true;
+    useTelemetry = false;
   }
 #endif
 #ifdef MOZ_BACKGROUNDTASKS
diff --git a/toolkit/components/telemetry/core/TelemetryCommon.cpp b/toolkit/components/telemetry/core/TelemetryCommon.cpp
index a52d8e0a64..9bec7accff 100644
--- a/toolkit/components/telemetry/core/TelemetryCommon.cpp
+++ b/toolkit/components/telemetry/core/TelemetryCommon.cpp
@@ -50,14 +50,13 @@ bool CanRecordDataset(uint32_t aDataset, bool aCanRecordBase,
   // If we are extended telemetry is enabled, we are allowed to record
   // regardless of the dataset.
   if (aCanRecordExtended) {
-    return true;
+    return false;
   }
 
   // If base telemetry data is enabled and we're trying to record base
   // telemetry, allow it.
-  if (aCanRecordBase &&
-      IsInDataset(aDataset, nsITelemetry::DATASET_ALL_CHANNELS)) {
-    return true;
+  if (aCanRecordBase) {
+    return false;
   }
 
   // We're not recording extended telemetry or this is not the base
diff --git a/toolkit/library/rust/gkrust-features.mozbuild b/toolkit/library/rust/gkrust-features.mozbuild
index a19af5bd9d..66d8947acd 100644
--- a/toolkit/library/rust/gkrust-features.mozbuild
+++ b/toolkit/library/rust/gkrust-features.mozbuild
@@ -60,8 +60,7 @@ if CONFIG["MOZ_WEBRTC"]:
 # We need to tell Glean it is being built with Gecko.
 gkrust_features += ["glean_with_gecko"]
 
-if not CONFIG["MOZILLA_OFFICIAL"]:
-    gkrust_features += ["glean_disable_upload"]
+gkrust_features += ["glean_disable_upload"]
 
 if CONFIG["MOZ_ENABLE_DBUS"]:
     gkrust_features += ["with_dbus"]
diff --git a/toolkit/modules/AppConstants.sys.mjs b/toolkit/modules/AppConstants.sys.mjs
index a794e82288..46b698a1ec 100644
--- a/toolkit/modules/AppConstants.sys.mjs
+++ b/toolkit/modules/AppConstants.sys.mjs
@@ -35,13 +35,13 @@ export var AppConstants = Object.freeze({
 
   MOZ_SERVICES_SYNC: @MOZ_SERVICES_SYNC_BOOL@,
 
-  MOZ_DATA_REPORTING: @MOZ_DATA_REPORTING_BOOL@,
+  MOZ_DATA_REPORTING: false,
 
   MOZ_SANDBOX: @MOZ_SANDBOX_BOOL@,
 
   MOZ_TELEMETRY_REPORTING:
 #ifdef MOZ_TELEMETRY_REPORTING
-  true,
+  false,
 #else
   false,
 #endif
@@ -114,9 +114,9 @@ export var AppConstants = Object.freeze({
            Services.vc.compare(platformVersion, version) <= 0;
   },
 
-  MOZ_CRASHREPORTER: @MOZ_CRASHREPORTER_BOOL@,
+  MOZ_CRASHREPORTER: false,
 
-  MOZ_NORMANDY: @MOZ_NORMANDY_BOOL@,
+  MOZ_NORMANDY: false,
 
   MOZ_MAINTENANCE_SERVICE: @MOZ_MAINTENANCE_SERVICE_BOOL@,
 
@@ -130,7 +130,7 @@ export var AppConstants = Object.freeze({
 
   ASAN: @MOZ_ASAN_BOOL@,
 
-  ASAN_REPORTER: @MOZ_ASAN_REPORTER_BOOL@,
+  ASAN_REPORTER: false,
 
   TSAN: @MOZ_TSAN_BOOL@,
 
diff --git a/tools/@types/subs/AppConstants.sys.d.mts b/tools/@types/subs/AppConstants.sys.d.mts
index 04273576bd..8dc11902b0 100644
--- a/tools/@types/subs/AppConstants.sys.d.mts
+++ b/tools/@types/subs/AppConstants.sys.d.mts
@@ -32,12 +32,12 @@ export const AppConstants: Readonly<{
 
   MOZ_SERVICES_SYNC: boolean;
 
-  MOZ_DATA_REPORTING: boolean;
+  MOZ_DATA_REPORTING: false;
 
   MOZ_SANDBOX: boolean;
 
   // #ifdef MOZ_TELEMETRY_REPORTING
-  MOZ_TELEMETRY_REPORTING: boolean;
+  MOZ_TELEMETRY_REPORTING: false;
 
   MOZ_UPDATER: boolean;
 
@@ -66,9 +66,9 @@ export const AppConstants: Readonly<{
   isPlatformAndVersionAtLeast(platform: Platform, version: string): boolean;
   isPlatformAndVersionAtMost(platform: Platform, version: string): boolean;
 
-  MOZ_CRASHREPORTER: boolean;
+  MOZ_CRASHREPORTER: false;
 
-  MOZ_NORMANDY: boolean;
+  MOZ_NORMANDY: false;
 
   MOZ_MAINTENANCE_SERVICE: boolean;
 
@@ -82,7 +82,7 @@ export const AppConstants: Readonly<{
 
   ASAN: boolean;
 
-  ASAN_REPORTER: boolean;
+  ASAN_REPORTER: false;
 
   TSAN: boolean;
 
