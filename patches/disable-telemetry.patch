diff --git a/browser/moz.configure b/browser/moz.configure
index e605019172..73268e5d35 100644
--- a/browser/moz.configure
+++ b/browser/moz.configure
@@ -5,11 +5,11 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 imply_option("MOZ_PLACES", True)
-imply_option("MOZ_SERVICES_HEALTHREPORT", True)
+imply_option("MOZ_SERVICES_HEALTHREPORT", False)
 imply_option("MOZ_SERVICES_SYNC", True)
 imply_option("MOZ_DEDICATED_PROFILES", True)
 imply_option("MOZ_BLOCK_PROFILE_DOWNGRADE", True)
-imply_option("MOZ_NORMANDY", True)
+imply_option("MOZ_NORMANDY", False)
 imply_option("MOZ_PROFILE_MIGRATOR", True)
 
 
diff --git a/mobile/android/fenix/app/.experimenter.yaml b/mobile/android/fenix/app/.experimenter.yaml
index d78513f57c..df0285c038 100644
--- a/mobile/android/fenix/app/.experimenter.yaml
+++ b/mobile/android/fenix/app/.experimenter.yaml
@@ -36,7 +36,7 @@ glean:
       description: "A map of metric base-identifiers to booleans representing the state of the 'enabled' flag for that metric."
 growth-data:
   description: A feature measuring campaign growth data
-  hasExposure: true
+  hasExposure: false
   exposureDescription: ""
   variables:
     enabled:
diff --git a/mobile/android/fenix/app/nimbus.fml.yaml b/mobile/android/fenix/app/nimbus.fml.yaml
index 8f6c6df..41f0e0c 100644
--- a/mobile/android/fenix/app/nimbus.fml.yaml
+++ b/mobile/android/fenix/app/nimbus.fml.yaml
@@ -209,7 +209,7 @@ features:
     defaults:
       - channel: release
         value:
-          enabled: true
+          enabled: false
 
   re-engagement-notification:
     description: A feature that shows the re-engagement notification if the user is inactive.
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
index bec617c4cc..f7d2f16e49 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
@@ -49,54 +49,7 @@ class Analytics(
 ) {
     val crashReporter: CrashReporter by lazyMonitored {
         val services = mutableListOf<CrashReporterService>()
-        val distributionId = when (Config.channel.isMozillaOnline) {
-            true -> "MozillaOnline"
-            false -> "Mozilla"
-        }
-
-        if (isSentryEnabled()) {
-            // We treat caught exceptions similar to debug logging.
-            // On the release channel volume of these is too high for our Sentry instances, and
-            // we get most value out of nightly/beta logging anyway.
-            val shouldSendCaughtExceptions = when (Config.channel) {
-                ReleaseChannel.Release -> false
-                else -> true
-            }
-            val sentryService = SentryService(
-                context,
-                BuildConfig.SENTRY_TOKEN,
-                tags = mapOf(
-                    "geckoview" to "$MOZ_APP_VERSION-$MOZ_APP_BUILDID",
-                    "fenix.git" to BuildConfig.VCS_HASH,
-                ),
-                environment = BuildConfig.BUILD_TYPE,
-                sendEventForNativeCrashes = false, // Do not send native crashes to Sentry
-                sendCaughtExceptions = shouldSendCaughtExceptions,
-                sentryProjectUrl = getSentryProjectUrl(),
-            )
-
-            // We only want to initialize Sentry on startup on the main process.
-            if (context.isMainProcess()) {
-                runWhenReadyQueue.runIfReadyOrQueue {
-                    sentryService.initIfNeeded()
-                }
-            }
-
-            services.add(sentryService)
-        }
-
-        // The name "Fenix" here matches the product name on Socorro and is unrelated to the actual app name:
-        // https://bugzilla.mozilla.org/show_bug.cgi?id=1523284
-        val socorroService = MozillaSocorroService(
-            context,
-            appName = "Fenix",
-            version = MOZ_APP_VERSION,
-            buildId = MOZ_APP_BUILDID,
-            vendor = MOZ_APP_VENDOR,
-            releaseChannel = MOZ_UPDATE_CHANNEL,
-            distributionId = distributionId,
-        )
-        services.add(socorroService)
+        val distributionId = ""
 
         val intent = Intent(context, HomeActivity::class.java).apply {
             flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
@@ -116,16 +69,15 @@ class Analytics(
         CrashReporter(
             context = context,
             services = services,
-            telemetryServices = listOf(GleanCrashReporterService(context)),
-            shouldPrompt = CrashReporter.Prompt.ALWAYS,
+            telemetryServices = listOf(),
+            shouldPrompt = CrashReporter.Prompt.NEVER,
             promptConfiguration = CrashReporter.PromptConfiguration(
                 appName = context.getString(R.string.app_name),
-                organizationName = "Mozilla",
+                organizationName = "",
             ),
-            enabled = true,
+            enabled = false,
             nonFatalCrashIntent = pendingIntent,
-            useLegacyReporting = !context.settings().crashReportAlwaysSend &&
-                !context.settings().useNewCrashReporterDialog,
+            useLegacyReporting = false,
             runtimeTagProviders = listOf(ReleaseRuntimeTagProvider()),
         )
     }
@@ -144,21 +96,10 @@ class Analytics(
 
     val metrics: MetricController by lazyMonitored {
         MetricController.create(
-            listOf(
-                GleanMetricsService(context),
-                AdjustMetricsService(
-                    application = context as Application,
-                    storage = metricsStorage,
-                    crashReporter = crashReporter,
-                ),
-                InstallReferrerMetricsService(context),
-                GleanUsageReportingMetricsService(gleanProfileIdStore = GleanProfileIdPreferenceStore(context)),
-            ),
-            isDataTelemetryEnabled = { context.settings().isTelemetryEnabled },
-            isMarketingDataTelemetryEnabled = {
-                context.settings().isMarketingTelemetryEnabled && context.settings().hasMadeMarketingTelemetrySelection
-            },
-            isUsageTelemetryEnabled = { context.settings().isDailyUsagePingEnabled },
+            listOf(),
+            isDataTelemetryEnabled = { false },
+            isMarketingDataTelemetryEnabled = { false },
+            isUsageTelemetryEnabled = { false },
             context.settings(),
         )
     }
@@ -167,11 +108,6 @@ class Analytics(
 private fun isSentryEnabled() = !BuildConfig.SENTRY_TOKEN.isNullOrEmpty()
 
 private fun getSentryProjectUrl(): String? {
-    val baseUrl = "https://sentry.io/organizations/mozilla/issues"
-    return when (Config.channel) {
-        ReleaseChannel.Nightly -> "$baseUrl/?project=6295546"
-        ReleaseChannel.Release -> "$baseUrl/?project=6375561"
-        ReleaseChannel.Beta -> "$baseUrl/?project=6295551"
-        else -> null
-    }
+    val baseUrl = ""
+    return null
 }

diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
index 24ba347127..1cdeb4b96d 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
@@ -329,7 +329,6 @@ class Core(
                 ),
                 RecordingDevicesMiddleware(context, context.components.notificationsDelegate),
                 PromptMiddleware(),
-                AdsTelemetryMiddleware(adsTelemetry),
                 LastMediaAccessMiddleware(),
                 HistoryMetadataMiddleware(historyMetadataService),
                 SessionPrioritizationMiddleware(),
@@ -364,26 +363,6 @@ class Core(
             // Install the "icons" WebExtension to automatically load icons for every visited website.
             icons.install(engine, this)
 
-            CoroutineScope(Dispatchers.Main).launch {
-                val readJson = { context.assets.readJSONObject("search/search_telemetry_v2.json") }
-                val providerList = withContext(Dispatchers.IO) {
-                    SerpTelemetryRepository(
-                        rootStorageDirectory = context.filesDir,
-                        readJson = readJson,
-                        collectionName = COLLECTION_NAME,
-                        serverUrl = if (context.settings().useProductionRemoteSettingsServer) {
-                            REMOTE_PROD_ENDPOINT_URL
-                        } else {
-                            REMOTE_STAGE_ENDPOINT_URL
-                        },
-                    ).updateProviderList()
-                }
-                // Install the "ads" WebExtension to get the links in an partner page.
-                adsTelemetry.install(engine, this@apply, providerList)
-                // Install the "cookies" WebExtension and tracks user interaction with SERPs.
-                searchTelemetry.install(engine, this@apply, providerList)
-            }
-
             WebNotificationFeature(
                 context,
                 engine,
@@ -428,14 +407,6 @@ class Core(
         context.components.analytics.metrics
     }
 
-    val adsTelemetry by lazyMonitored {
-        AdsTelemetry()
-    }
-
-    val searchTelemetry by lazyMonitored {
-        InContentTelemetry()
-    }
-
     /**
      * Shortcut component for managing shortcuts on the device home screen.
      */
@@ -718,7 +689,7 @@ class Core(
         const val METADATA_SHORTCUT_SUGGESTION_LIMIT = 20
 
         // collection name to fetch from server for SERP telemetry
-        const val COLLECTION_NAME = "search-telemetry-v2"
+        const val COLLECTION_NAME = ""
         internal const val REMOTE_PROD_ENDPOINT_URL = "https://firefox.settings.services.mozilla.com"
         internal const val REMOTE_STAGE_ENDPOINT_URL = "https://firefox.settings.services.allizom.org"
     }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/GleanHelper.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/GleanHelper.kt
index a708898f06..b2b9f45fd2 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/GleanHelper.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/GleanHelper.kt
@@ -59,7 +59,7 @@ fun initializeGlean(applicationContext: Context, logger: Logger, isTelemetryUplo
     Glean.initialize(
         applicationContext = applicationContext,
         configuration = configuration.setCustomEndpointIfAvailable(customEndpoint),
-        uploadEnabled = isTelemetryUploadEnabled,
+        uploadEnabled = false,
         buildInfo = GleanBuildInfo.buildInfo,
     )
 }

diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
@@ -66,7 +66,7 @@
     /**
      * Enable Meta attribution.
      */
-    const val META_ATTRIBUTION_ENABLED = true
+    const val META_ATTRIBUTION_ENABLED = false
 
     /**
      * Enables the Compose Homepage.
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 777a555948..dc1bb31f93 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -337,48 +337,24 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         default = true,
     )
 
-    val isCrashReportingEnabled: Boolean
-        get() = isCrashReportEnabledInBuild &&
-            preferences.getBoolean(
-                appContext.getPreferenceKey(R.string.pref_key_crash_reporter),
-                true,
-            )
+    val isCrashReportingEnabled: Boolean = false
 
     val isRemoteDebuggingEnabled by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_remote_debugging),
         default = false,
     )
 
-    var isTelemetryEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_telemetry),
-        default = true,
-    )
+    var isTelemetryEnabled = false
 
-    var isMarketingTelemetryEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_marketing_telemetry),
-        default = false,
-    )
+    var isMarketingTelemetryEnabled = false
 
-    var hasMadeMarketingTelemetrySelection by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_marketing_telemetry_selection_made),
-        default = false,
-    )
+    var hasMadeMarketingTelemetrySelection = true
 
-    var hasAcceptedTermsOfService by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_terms_accepted),
-        default = false,
-    )
+    var hasAcceptedTermsOfService = true
 
-    var isDailyUsagePingEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_daily_usage_ping),
-        default = isTelemetryEnabled,
-        persistDefaultIfNotExists = true,
-    )
+    var isDailyUsagePingEnabled = false
 
-    var isExperimentationEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_experimentation_v2),
-        default = isTelemetryEnabled,
-    )
+    var isExperimentationEnabled = false
 
     var isOverrideTPPopupsForPerformanceTest = false
     
diff --git a/mobile/android/fenix/app/src/main/res/xml/preferences.xml b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
index c03abd3b27..f9afd34c8d 100644
--- a/mobile/android/fenix/app/src/main/res/xml/preferences.xml
+++ b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
@@ -139,11 +139,6 @@
             app:iconSpaceReserved="false"
             android:title="@string/preferences_notifications" />
 
-        <androidx.preference.Preference
-            android:key="@string/pref_key_data_choices"
-            app:iconSpaceReserved="false"
-            android:title="@string/preferences_data_collection" />
-
     </androidx.preference.PreferenceCategory>
 
     <PreferenceCategory
@@ -200,11 +195,6 @@
         android:title="@string/preferences_category_about"
         app:iconSpaceReserved="false"
         android:layout="@layout/preference_category_no_icon_style">
-        <androidx.preference.Preference
-            android:key="@string/pref_key_rate"
-            app:iconSpaceReserved="false"
-            android:title="@string/preferences_rate" />
-
         <androidx.preference.Preference
             android:key="@string/pref_key_about"
             app:iconSpaceReserved="false"
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt
index c1b54d7f27..01fd0d7427 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt
@@ -42,34 +42,7 @@ class NimbusBranchesController(
 ) : NimbusBranchesAdapterDelegate {
 
     override fun onBranchItemClicked(branch: Branch) {
-        val telemetryEnabled = context.settings().isTelemetryEnabled
-        val experimentsEnabled = context.settings().isExperimentationEnabled
-
         updateOptInState(branch)
-
-        if (!telemetryEnabled && !experimentsEnabled) {
-            context.getRootView()?.let { v ->
-                Snackbar.make(
-                    snackBarParentView = v,
-                    snackbarState = SnackbarState(
-                        message = context.getString(R.string.experiments_snackbar),
-                        duration = SnackbarState.Duration.Preset.Long,
-                        action = Action(
-                            label = context.getString(R.string.experiments_snackbar_button),
-                            onClick = {
-                                navController.navigateWithBreadcrumb(
-                                    directions = NimbusBranchesFragmentDirections
-                                        .actionNimbusBranchesFragmentToDataChoicesFragment(),
-                                    navigateFrom = "NimbusBranchesController",
-                                    navigateTo = "ActionNimbusBranchesFragmentToDataChoicesFragment",
-                                    crashReporter = context.components.analytics.crashReporter,
-                                )
-                            },
-                        ),
-                    ),
-                ).show()
-            }
-        }
     }
 
     private fun updateOptInState(branch: Branch) {
diff --git a/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java b/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java
index eb00f87b41..ce8e2b7a03 100644
--- a/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java
+++ b/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java
@@ -38,7 +38,7 @@ public class CrashHandler implements Thread.UncaughtExceptionHandler {
   private static final String LOGTAG = "GeckoCrashHandler";
   private static final Thread MAIN_THREAD = Thread.currentThread();
   private static final String DEFAULT_SERVER_URL =
-      "https://crash-reports.mozilla.com/submit?id=%1$s&version=%2$s&buildid=%3$s";
+      "";
 
   // Context for getting device information
   private @Nullable final Context mAppContext;
diff --git a/mobile/android/moz.configure b/mobile/android/moz.configure
index dad9a16c7a..dc180eaf6d 100644
--- a/mobile/android/moz.configure
+++ b/mobile/android/moz.configure
@@ -78,7 +78,7 @@ def android_subproject(value):
 set_config("MOZ_ANDROID_SUBPROJECT", android_subproject)
 
 imply_option("MOZ_NORMANDY", False)
-imply_option("MOZ_SERVICES_HEALTHREPORT", True)
+imply_option("MOZ_SERVICES_HEALTHREPORT", False)
 imply_option("MOZ_GECKOVIEW_HISTORY", True)
 
 imply_option("MOZ_APP_UA_NAME", "Firefox")
diff --git a/python/mach/mach/telemetry.py b/python/mach/mach/telemetry.py
index c73498a066..b02315266a 100644
--- a/python/mach/mach/telemetry.py
+++ b/python/mach/mach/telemetry.py
@@ -95,10 +95,7 @@ def is_applicable_telemetry_environment():
 
 
 def is_telemetry_enabled(settings):
-    if os.environ.get("DISABLE_TELEMETRY") == "1":
-        return False
-
-    return settings.mach_telemetry.is_enabled
+    return False
 
 
 def arcrc_path():
diff --git a/toolkit/components/glean/src/init/mod.rs b/toolkit/components/glean/src/init/mod.rs
index 441048499f..c6481c6974 100644
--- a/toolkit/components/glean/src/init/mod.rs
+++ b/toolkit/components/glean/src/init/mod.rs
@@ -72,7 +72,7 @@ pub extern "C" fn fog_init(
     disable_internal_pings: bool,
 ) -> nsresult {
     // On Android always enable Glean upload.
-    let upload_enabled = true;
+    let upload_enabled = false;
     // Don't set up an uploader.
     let uploader = None;
 
@@ -150,12 +150,12 @@ fn build_configuration(
 
     let localhost_port = static_prefs::pref!("telemetry.fog.test.localhost_port");
     let server = if localhost_port > 0 {
-        format!("http://localhost:{}", localhost_port)
+        String::from("")
     } else {
         if app_id_override == "thunderbird.desktop" {
-            String::from("https://incoming.thunderbird.net")
+            String::from("")
         } else {
-            String::from("https://incoming.telemetry.mozilla.org")
+            String::from("")
         }
     };
 
@@ -192,7 +192,7 @@ fn build_configuration(
         rate_limit,
         enable_event_timestamps: true,
         experimentation_id: None,
-        enable_internal_pings: true,
+        enable_internal_pings: false,
         ping_schedule: pings::ping_schedule(),
         ping_lifetime_threshold: 0,
         ping_lifetime_max_time: Duration::ZERO,
@@ -373,7 +373,7 @@ fn fog_test_reset_internal(
     let (mut conf, client_info) = build_configuration(data_path_override, app_id_override)?;
 
     // On Android always enable Glean upload.
-    conf.upload_enabled = true;
+    conf.upload_enabled = false;
 
     // Don't accidentally send "main" pings during tests.
     conf.use_core_mps = false;
diff --git a/toolkit/components/glean/src/init/viaduct_uploader.rs b/toolkit/components/glean/src/init/viaduct_uploader.rs
index ea5260e5c6..5f5df88dba 100644
--- a/toolkit/components/glean/src/init/viaduct_uploader.rs
+++ b/toolkit/components/glean/src/init/viaduct_uploader.rs
@@ -109,7 +109,7 @@ fn ohttp_upload(upload_request: PingUploadRequest) -> Result<UploadResult, Viadu
     let ohttp_request = ohttp::ClientRequest::from_encoded_config(config)?;
     let (capsule, ohttp_response) = ohttp_request.encapsulate(&binary_request)?;
 
-    const OHTTP_RELAY_URL: &str = "https://mozilla-ohttp.fastly-edge.com/";
+    const OHTTP_RELAY_URL: &str = "";
     let parsed_relay_url = Url::parse(OHTTP_RELAY_URL)?;
 
     log::trace!("FOG ohttp uploader uploading to {}", parsed_relay_url);
@@ -140,7 +140,7 @@ fn ohttp_upload(upload_request: PingUploadRequest) -> Result<UploadResult, Viadu
 
 fn get_config() -> Result<Vec<u8>, ViaductUploaderError> {
     const OHTTP_CONFIG_URL: &str =
-        "https://prod.ohttp-gateway.prod.webservices.mozgcp.net/ohttp-configs";
+        "";
     log::trace!("Getting OHTTP config from {}", OHTTP_CONFIG_URL);
     let parsed_config_url = Url::parse(OHTTP_CONFIG_URL)?;
     Ok(Request::get(parsed_config_url).send()?.body)
diff --git a/toolkit/components/nimbus/ExperimentAPI.sys.mjs b/toolkit/components/nimbus/ExperimentAPI.sys.mjs
index bc38bfd022..5ac2d01d6a 100644
--- a/toolkit/components/nimbus/ExperimentAPI.sys.mjs
+++ b/toolkit/components/nimbus/ExperimentAPI.sys.mjs
@@ -18,7 +18,7 @@ const IS_MAIN_PROCESS =
   Services.appinfo.processType === Services.appinfo.PROCESS_TYPE_DEFAULT;
 
 const COLLECTION_ID_PREF = "messaging-system.rsexperimentloader.collection_id";
-const COLLECTION_ID_FALLBACK = "nimbus-desktop-experiments";
+const COLLECTION_ID_FALLBACK = "";
 XPCOMUtils.defineLazyPreferenceGetter(
   lazy,
   "COLLECTION_ID",
diff --git a/toolkit/components/telemetry/app/TelemetryArchive.sys.mjs b/toolkit/components/telemetry/app/TelemetryArchive.sys.mjs
index d2024ce95d..cd0e8dc31f 100644
--- a/toolkit/components/telemetry/app/TelemetryArchive.sys.mjs
+++ b/toolkit/components/telemetry/app/TelemetryArchive.sys.mjs
@@ -58,10 +58,7 @@ export var TelemetryArchive = {
  * @return {Boolean} True if pings should be archived, false otherwise.
  */
 function shouldArchivePings() {
-  return Services.prefs.getBoolPref(
-    TelemetryUtils.Preferences.ArchiveEnabled,
-    false
-  );
+  return false;
 }
 
 var TelemetryArchiveImpl = {
diff --git a/toolkit/components/telemetry/app/TelemetryControllerBase.sys.mjs b/toolkit/components/telemetry/app/TelemetryControllerBase.sys.mjs
index cf0a7bd372..a8b2b03990 100644
--- a/toolkit/components/telemetry/app/TelemetryControllerBase.sys.mjs
+++ b/toolkit/components/telemetry/app/TelemetryControllerBase.sys.mjs
@@ -31,7 +31,7 @@ var gLogAppenderDump = null;
 export var TelemetryControllerBase = Object.freeze({
   // Whether the FHR/Telemetry unification features are enabled.
   // Changing this pref requires a restart.
-  IS_UNIFIED_TELEMETRY: Services.prefs.getBoolPref(Preferences.Unified, false),
+  IS_UNIFIED_TELEMETRY: false,
 
   Preferences,
 
@@ -40,7 +40,7 @@ export var TelemetryControllerBase = Object.freeze({
    * it correctly evaluates to a boolean type.
    */
   get isTelemetryEnabled() {
-    return Services.prefs.getBoolPref(PREF_TELEMETRY_ENABLED, false) === true;
+    return false;
   },
 
   get log() {
@@ -87,28 +87,8 @@ export var TelemetryControllerBase = Object.freeze({
   setTelemetryRecordingFlags() {
     // Enable extended Telemetry on pre-release channels and disable it
     // on Release/ESR.
-    let prereleaseChannels = [
-      "nightly",
-      "nightly-autoland",
-      "nightly-try",
-      "aurora",
-      "beta",
-    ];
-    if (!AppConstants.MOZILLA_OFFICIAL) {
-      // Turn extended telemetry for local developer builds.
-      prereleaseChannels.push("default");
-    }
-    const isPrereleaseChannel = prereleaseChannels.includes(
-      AppConstants.MOZ_UPDATE_CHANNEL
-    );
-    const isReleaseCandidateOnBeta =
-      AppConstants.MOZ_UPDATE_CHANNEL === "release" &&
-      Services.prefs.getCharPref("app.update.channel", null) === "beta";
-    Services.telemetry.canRecordBase = true;
-    Services.telemetry.canRecordExtended =
-      isPrereleaseChannel ||
-      isReleaseCandidateOnBeta ||
-      Services.prefs.getBoolPref(this.Preferences.OverridePreRelease, false);
+    Services.telemetry.canRecordBase = false;
+    Services.telemetry.canRecordExtended = false;
   },
 
   /**
@@ -125,8 +105,7 @@ export var TelemetryControllerBase = Object.freeze({
     } else {
       // We're not on unified Telemetry, stick to the old behaviour for
       // supporting Fennec.
-      Services.telemetry.canRecordBase = Services.telemetry.canRecordExtended =
-        this.isTelemetryEnabled;
+      Services.telemetry.canRecordBase = Services.telemetry.canRecordExtended = false;
     }
 
     this.log.config(
diff --git a/toolkit/components/telemetry/app/TelemetryReportingPolicy.sys.mjs b/toolkit/components/telemetry/app/TelemetryReportingPolicy.sys.mjs
index 0c52bf5c52..3160c4b4d8 100644
--- a/toolkit/components/telemetry/app/TelemetryReportingPolicy.sys.mjs
+++ b/toolkit/components/telemetry/app/TelemetryReportingPolicy.sys.mjs
@@ -274,11 +274,7 @@ var TelemetryReportingPolicyImpl = {
    * false, we never request upload or deletion.
    */
   get dataSubmissionEnabled() {
-    // Default is true because we are opt-out.
-    return Services.prefs.getBoolPref(
-      TelemetryUtils.Preferences.DataSubmissionEnabled,
-      true
-    );
+    return false;
   },
 
   get currentPolicyVersion() {
@@ -334,20 +330,6 @@ var TelemetryReportingPolicyImpl = {
    *         false otherwise.
    */
   get isUserNotifiedOfCurrentPolicy() {
-    // If we don't have a sane notification date, the user was not notified yet.
-    if (
-      !this.dataSubmissionPolicyNotifiedDate ||
-      this.dataSubmissionPolicyNotifiedDate.getTime() <= 0
-    ) {
-      return false;
-    }
-
-    // The accepted policy version should not be less than the minimum policy version.
-    if (this.dataSubmissionPolicyAcceptedVersion < this.minimumPolicyVersion) {
-      return false;
-    }
-
-    // Otherwise the user was already notified.
     return true;
   },
 
@@ -401,19 +383,7 @@ var TelemetryReportingPolicyImpl = {
    * @return {Boolean} True if we are allowed to upload data, false otherwise.
    */
   canUpload() {
-    // If data submission is disabled, there's no point in showing the infobar. Just
-    // forbid to upload.
-    if (!this.dataSubmissionEnabled) {
-      return false;
-    }
-
-    // Submission is enabled. We enable upload if user is notified or we need to bypass
-    // the policy.
-    const bypassNotification = Services.prefs.getBoolPref(
-      TelemetryUtils.Preferences.BypassNotification,
-      false
-    );
-    return this.isUserNotifiedOfCurrentPolicy || bypassNotification;
+    return false;
   },
 
   isFirstRun() {
@@ -440,32 +410,7 @@ var TelemetryReportingPolicyImpl = {
    * Determine whether the user should be notified.
    */
   _shouldNotify() {
-    if (!this.dataSubmissionEnabled) {
-      this._log.trace(
-        "_shouldNotify - Data submission disabled by the policy."
-      );
-      return false;
-    }
-
-    const bypassNotification = Services.prefs.getBoolPref(
-      TelemetryUtils.Preferences.BypassNotification,
-      false
-    );
-    if (this.isUserNotifiedOfCurrentPolicy || bypassNotification) {
-      this._log.trace(
-        "_shouldNotify - User already notified or bypassing the policy."
-      );
-      return false;
-    }
-
-    if (this._notificationInProgress) {
-      this._log.trace(
-        "_shouldNotify - User not notified, notification already in progress."
-      );
-      return false;
-    }
-
-    return true;
+    return false;
   },
 
   /**
@@ -711,7 +656,7 @@ var TelemetryReportingPolicyImpl = {
     return this._ensureUserIsNotifiedPromise.then(() => {
       // The user has been notified and interacted with the modal.
       // Glean can now init on shutdown if necessary.
-      Services.prefs.setBoolPref("telemetry.fog.init_on_shutdown", true);
+      Services.prefs.setBoolPref("telemetry.fog.init_on_shutdown", false);
     });
   },
 
diff --git a/toolkit/components/telemetry/app/UsageReporting.sys.mjs b/toolkit/components/telemetry/app/UsageReporting.sys.mjs
index 6134754282..c0da15a006 100644
--- a/toolkit/components/telemetry/app/UsageReporting.sys.mjs
+++ b/toolkit/components/telemetry/app/UsageReporting.sys.mjs
@@ -34,21 +34,18 @@ export var UsageReporting = {
 
     this._initPromise = (async () => {
       let profileID = await lazy.ClientID.getUsageProfileID();
-      const uploadEnabled = Services.prefs.getBoolPref(
-        "datareporting.usage.uploadEnabled",
-        false
-      );
+      const uploadEnabled = false;
       this._log.trace(
         `${SLUG}: uploadEnabled=${uploadEnabled}, profileID='${profileID}'`
       );
 
       // Usage deletion requests can always be sent.  They are
       // always sent in response to user action.
-      GleanPings.usageDeletionRequest.setEnabled(true);
+      GleanPings.usageDeletionRequest.setEnabled(false);
 
       // Usage pings should only be sent when upload is enabled.
       // Eventually, Glean will persist this setting.
-      GleanPings.usageReporting.setEnabled(uploadEnabled);
+      GleanPings.usageReporting.setEnabled(false);
 
       if (
         uploadEnabled &&
@@ -103,10 +100,7 @@ export var UsageReporting = {
       return;
     }
 
-    const uploadEnabled = Services.prefs.getBoolPref(
-      "datareporting.usage.uploadEnabled",
-      false
-    );
+    const uploadEnabled = false;
 
     if (uploadEnabled) {
       // Rising edge: enable "usage-reporting" ping.
@@ -137,17 +131,14 @@ export var UsageReporting = {
    * preference.
    */
   adoptDataReportingPreference() {
-    const generalEnabled = Services.prefs.getBoolPref(
-      "datareporting.healthreport.uploadEnabled",
-      false
-    );
+    const generalEnabled = false;
     this._log.info(
       `adoptDataReportingPreference: setting usage reporting preference to ${generalEnabled}`
     );
 
     Services.prefs.setBoolPref(
       "datareporting.usage.uploadEnabled",
-      generalEnabled
+      false
     );
   },
 
diff --git a/toolkit/components/telemetry/core/TelemetryCommon.cpp b/toolkit/components/telemetry/core/TelemetryCommon.cpp
index a52d8e0a64..9bec7accff 100644
--- a/toolkit/components/telemetry/core/TelemetryCommon.cpp
+++ b/toolkit/components/telemetry/core/TelemetryCommon.cpp
@@ -50,14 +50,13 @@ bool CanRecordDataset(uint32_t aDataset, bool aCanRecordBase,
   // If we are extended telemetry is enabled, we are allowed to record
   // regardless of the dataset.
   if (aCanRecordExtended) {
-    return true;
+    return false;
   }
 
   // If base telemetry data is enabled and we're trying to record base
   // telemetry, allow it.
-  if (aCanRecordBase &&
-      IsInDataset(aDataset, nsITelemetry::DATASET_ALL_CHANNELS)) {
-    return true;
+  if (aCanRecordBase) {
+    return false;
   }
 
   // We're not recording extended telemetry or this is not the base
diff --git a/toolkit/components/telemetry/pings/TelemetrySession.sys.mjs b/toolkit/components/telemetry/pings/TelemetrySession.sys.mjs
index b411c0b54a..d9b3ba25f6 100644
--- a/toolkit/components/telemetry/pings/TelemetrySession.sys.mjs
+++ b/toolkit/components/telemetry/pings/TelemetrySession.sys.mjs
@@ -46,10 +46,7 @@ const LOGGER_PREFIX =
 
 // Whether the FHR/Telemetry unification features are enabled.
 // Changing this pref requires a restart.
-const IS_UNIFIED_TELEMETRY = Services.prefs.getBoolPref(
-  TelemetryUtils.Preferences.Unified,
-  false
-);
+const IS_UNIFIED_TELEMETRY = false;
 
 var gWasDebuggerAttached = false;
 
