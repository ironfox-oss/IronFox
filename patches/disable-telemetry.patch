diff --git a/browser/moz.configure b/browser/moz.configure
index e605019172..73268e5d35 100644
--- a/browser/moz.configure
+++ b/browser/moz.configure
@@ -5,11 +5,11 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 imply_option("MOZ_PLACES", True)
-imply_option("MOZ_SERVICES_HEALTHREPORT", True)
+imply_option("MOZ_SERVICES_HEALTHREPORT", False)
 imply_option("MOZ_SERVICES_SYNC", True)
 imply_option("MOZ_DEDICATED_PROFILES", True)
 imply_option("MOZ_BLOCK_PROFILE_DOWNGRADE", True)
-imply_option("MOZ_NORMANDY", True)
+imply_option("MOZ_NORMANDY", False)
 imply_option("MOZ_PROFILE_MIGRATOR", True)
 
 
diff --git a/mobile/android/fenix/app/.experimenter.yaml b/mobile/android/fenix/app/.experimenter.yaml
index d78513f57c..df0285c038 100644
--- a/mobile/android/fenix/app/.experimenter.yaml
+++ b/mobile/android/fenix/app/.experimenter.yaml
@@ -36,7 +36,7 @@ glean:
       description: "A map of metric base-identifiers to booleans representing the state of the 'enabled' flag for that metric."
 growth-data:
   description: A feature measuring campaign growth data
-  hasExposure: true
+  hasExposure: false
   exposureDescription: ""
   variables:
     enabled:
diff --git a/mobile/android/fenix/app/nimbus.fml.yaml b/mobile/android/fenix/app/nimbus.fml.yaml
index 8f6c6df..41f0e0c 100644
--- a/mobile/android/fenix/app/nimbus.fml.yaml
+++ b/mobile/android/fenix/app/nimbus.fml.yaml
@@ -209,7 +209,7 @@ features:
     defaults:
       - channel: release
         value:
-          enabled: true
+          enabled: false
 
   re-engagement-notification:
     description: A feature that shows the re-engagement notification if the user is inactive.
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
index e10e2c1611..8dc252f08b 100644
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
index 24ba347127..1cdeb4b96d 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
@@ -329,7 +329,6 @@ class Core(
                 ),
                 RecordingDevicesMiddleware(context, context.components.notificationsDelegate),
                 PromptMiddleware(),
-                AdsTelemetryMiddleware(adsTelemetry),
                 LastMediaAccessMiddleware(),
                 HistoryMetadataMiddleware(historyMetadataService),
                 SessionPrioritizationMiddleware(),
@@ -364,26 +363,6 @@ class Core(
             // Install the "icons" WebExtension to automatically load icons for every visited website.
             icons.install(engine, this)
 
-            CoroutineScope(Dispatchers.Main).launch {
-                val readJson = { context.assets.readJSONObject("search/search_telemetry_v2.json") }
-                val providerList = withContext(Dispatchers.IO) {
-                    SerpTelemetryRepository(
-                        rootStorageDirectory = context.filesDir,
-                        readJson = readJson,
-                        collectionName = COLLECTION_NAME,
-                        serverUrl = if (context.settings().useProductionRemoteSettingsServer) {
-                            REMOTE_PROD_ENDPOINT_URL
-                        } else {
-                            REMOTE_STAGE_ENDPOINT_URL
-                        },
-                    ).updateProviderList()
-                }
-                // Install the "ads" WebExtension to get the links in an partner page.
-                adsTelemetry.install(engine, this@apply, providerList)
-                // Install the "cookies" WebExtension and tracks user interaction with SERPs.
-                searchTelemetry.install(engine, this@apply, providerList)
-            }
-
             WebNotificationFeature(
                 context,
                 engine,
@@ -428,14 +407,6 @@ class Core(
         context.components.analytics.metrics
     }
 
-    val adsTelemetry by lazyMonitored {
-        AdsTelemetry()
-    }
-
-    val searchTelemetry by lazyMonitored {
-        InContentTelemetry()
-    }
-
     /**
      * Shortcut component for managing shortcuts on the device home screen.
      */
@@ -718,7 +689,7 @@ class Core(
         const val METADATA_SHORTCUT_SUGGESTION_LIMIT = 20
 
         // collection name to fetch from server for SERP telemetry
-        const val COLLECTION_NAME = "search-telemetry-v2"
+        const val COLLECTION_NAME = ""
         internal const val REMOTE_PROD_ENDPOINT_URL = "https://firefox.settings.services.mozilla.com"
         internal const val REMOTE_STAGE_ENDPOINT_URL = "https://firefox.settings.services.allizom.org"
     }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FeatureFlags.kt
@@ -66,7 +66,7 @@
     /**
      * Enable Meta attribution.
      */
-    const val META_ATTRIBUTION_ENABLED = true
+    const val META_ATTRIBUTION_ENABLED = false
 
     /**
      * Enables the Compose Homepage.
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 777a555948..dc1bb31f93 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -337,48 +337,24 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         default = true,
     )
 
-    val isCrashReportingEnabled: Boolean
-        get() = isCrashReportEnabledInBuild &&
-            preferences.getBoolean(
-                appContext.getPreferenceKey(R.string.pref_key_crash_reporter),
-                true,
-            )
+    val isCrashReportingEnabled: Boolean = false
 
     val isRemoteDebuggingEnabled by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_remote_debugging),
         default = false,
     )
 
-    var isTelemetryEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_telemetry),
-        default = true,
-    )
+    var isTelemetryEnabled = false
 
-    var isMarketingTelemetryEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_marketing_telemetry),
-        default = false,
-    )
+    var isMarketingTelemetryEnabled = false
 
-    var hasMadeMarketingTelemetrySelection by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_marketing_telemetry_selection_made),
-        default = false,
-    )
+    var hasMadeMarketingTelemetrySelection = true
 
-    var hasAcceptedTermsOfService by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_terms_accepted),
-        default = false,
-    )
+    var hasAcceptedTermsOfService = true
 
-    var isDailyUsagePingEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_daily_usage_ping),
-        default = isTelemetryEnabled,
-        persistDefaultIfNotExists = true,
-    )
+    var isDailyUsagePingEnabled = false
 
-    var isExperimentationEnabled by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_experimentation_v2),
-        default = isTelemetryEnabled,
-    )
+    var isExperimentationEnabled = false
 
     var isOverrideTPPopupsForPerformanceTest = false
     
diff --git a/mobile/android/fenix/app/src/main/res/xml/preferences.xml b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
index c03abd3b27..f9afd34c8d 100644
--- a/mobile/android/fenix/app/src/main/res/xml/preferences.xml
+++ b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
@@ -139,11 +139,6 @@
             app:iconSpaceReserved="false"
             android:title="@string/preferences_notifications" />
 
-        <androidx.preference.Preference
-            android:key="@string/pref_key_data_choices"
-            app:iconSpaceReserved="false"
-            android:title="@string/preferences_data_collection" />
-
     </androidx.preference.PreferenceCategory>
 
     <PreferenceCategory
@@ -200,11 +195,6 @@
         android:title="@string/preferences_category_about"
         app:iconSpaceReserved="false"
         android:layout="@layout/preference_category_no_icon_style">
-        <androidx.preference.Preference
-            android:key="@string/pref_key_rate"
-            app:iconSpaceReserved="false"
-            android:title="@string/preferences_rate" />
-
         <androidx.preference.Preference
             android:key="@string/pref_key_about"
             app:iconSpaceReserved="false"
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt
index c1b54d7f27..01fd0d7427 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/nimbus/controller/NimbusBranchesController.kt
@@ -42,34 +42,7 @@ class NimbusBranchesController(
 ) : NimbusBranchesAdapterDelegate {
 
     override fun onBranchItemClicked(branch: Branch) {
-        val telemetryEnabled = context.settings().isTelemetryEnabled
-        val experimentsEnabled = context.settings().isExperimentationEnabled
-
         updateOptInState(branch)
-
-        if (!telemetryEnabled && !experimentsEnabled) {
-            context.getRootView()?.let { v ->
-                Snackbar.make(
-                    snackBarParentView = v,
-                    snackbarState = SnackbarState(
-                        message = context.getString(R.string.experiments_snackbar),
-                        duration = SnackbarState.Duration.Preset.Long,
-                        action = Action(
-                            label = context.getString(R.string.experiments_snackbar_button),
-                            onClick = {
-                                navController.navigateWithBreadcrumb(
-                                    directions = NimbusBranchesFragmentDirections
-                                        .actionNimbusBranchesFragmentToDataChoicesFragment(),
-                                    navigateFrom = "NimbusBranchesController",
-                                    navigateTo = "ActionNimbusBranchesFragmentToDataChoicesFragment",
-                                    crashReporter = context.components.analytics.crashReporter,
-                                )
-                            },
-                        ),
-                    ),
-                ).show()
-            }
-        }
     }
 
     private fun updateOptInState(branch: Branch) {
diff --git a/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java b/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java
index eb00f87b41..ce8e2b7a03 100644
--- a/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java
+++ b/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/CrashHandler.java
@@ -38,7 +38,7 @@ public class CrashHandler implements Thread.UncaughtExceptionHandler {
   private static final String LOGTAG = "GeckoCrashHandler";
   private static final Thread MAIN_THREAD = Thread.currentThread();
   private static final String DEFAULT_SERVER_URL =
-      "https://crash-reports.mozilla.com/submit?id=%1$s&version=%2$s&buildid=%3$s";
+      "";
 
   // Context for getting device information
   private @Nullable final Context mAppContext;
diff --git a/mobile/android/moz.configure b/mobile/android/moz.configure
index dad9a16c7a..dc180eaf6d 100644
--- a/mobile/android/moz.configure
+++ b/mobile/android/moz.configure
@@ -78,7 +78,7 @@ def android_subproject(value):
 set_config("MOZ_ANDROID_SUBPROJECT", android_subproject)
 
 imply_option("MOZ_NORMANDY", False)
-imply_option("MOZ_SERVICES_HEALTHREPORT", True)
+imply_option("MOZ_SERVICES_HEALTHREPORT", False)
 imply_option("MOZ_GECKOVIEW_HISTORY", True)
 
 imply_option("MOZ_APP_UA_NAME", "Firefox")
diff --git a/python/mach/mach/telemetry.py b/python/mach/mach/telemetry.py
index c73498a066..b02315266a 100644
--- a/python/mach/mach/telemetry.py
+++ b/python/mach/mach/telemetry.py
@@ -95,10 +95,7 @@ def is_applicable_telemetry_environment():
 
 
 def is_telemetry_enabled(settings):
-    if os.environ.get("DISABLE_TELEMETRY") == "1":
-        return False
-
-    return settings.mach_telemetry.is_enabled
+    return False
 
 
 def arcrc_path():
diff --git a/toolkit/components/glean/src/init/mod.rs b/toolkit/components/glean/src/init/mod.rs
index 441048499f..c6481c6974 100644
--- a/toolkit/components/glean/src/init/mod.rs
+++ b/toolkit/components/glean/src/init/mod.rs
@@ -72,7 +72,7 @@ pub extern "C" fn fog_init(
     disable_internal_pings: bool,
 ) -> nsresult {
     // On Android always enable Glean upload.
-    let upload_enabled = true;
+    let upload_enabled = false;
     // Don't set up an uploader.
     let uploader = None;
 
@@ -150,12 +150,12 @@ fn build_configuration(
 
     let localhost_port = static_prefs::pref!("telemetry.fog.test.localhost_port");
     let server = if localhost_port > 0 {
-        format!("http://localhost:{}", localhost_port)
+        format!("", localhost_port)
     } else {
         if app_id_override == "thunderbird.desktop" {
-            String::from("https://incoming.thunderbird.net")
+            String::from("")
         } else {
-            String::from("https://incoming.telemetry.mozilla.org")
+            String::from("")
         }
     };
 
@@ -192,7 +192,7 @@ fn build_configuration(
         rate_limit,
         enable_event_timestamps: true,
         experimentation_id: None,
-        enable_internal_pings: true,
+        enable_internal_pings: false,
         ping_schedule: pings::ping_schedule(),
         ping_lifetime_threshold: 0,
         ping_lifetime_max_time: Duration::ZERO,
@@ -373,7 +373,7 @@ fn fog_test_reset_internal(
     let (mut conf, client_info) = build_configuration(data_path_override, app_id_override)?;
 
     // On Android always enable Glean upload.
-    conf.upload_enabled = true;
+    conf.upload_enabled = false;
 
     // Don't accidentally send "main" pings during tests.
     conf.use_core_mps = false;
diff --git a/toolkit/components/glean/src/init/viaduct_uploader.rs b/toolkit/components/glean/src/init/viaduct_uploader.rs
index ea5260e5c6..5f5df88dba 100644
--- a/toolkit/components/glean/src/init/viaduct_uploader.rs
+++ b/toolkit/components/glean/src/init/viaduct_uploader.rs
@@ -109,7 +109,7 @@ fn ohttp_upload(upload_request: PingUploadRequest) -> Result<UploadResult, Viadu
     let ohttp_request = ohttp::ClientRequest::from_encoded_config(config)?;
     let (capsule, ohttp_response) = ohttp_request.encapsulate(&binary_request)?;
 
-    const OHTTP_RELAY_URL: &str = "https://mozilla-ohttp.fastly-edge.com/";
+    const OHTTP_RELAY_URL: &str = "";
     let parsed_relay_url = Url::parse(OHTTP_RELAY_URL)?;
 
     log::trace!("FOG ohttp uploader uploading to {}", parsed_relay_url);
@@ -140,7 +140,7 @@ fn ohttp_upload(upload_request: PingUploadRequest) -> Result<UploadResult, Viadu
 
 fn get_config() -> Result<Vec<u8>, ViaductUploaderError> {
     const OHTTP_CONFIG_URL: &str =
-        "https://prod.ohttp-gateway.prod.webservices.mozgcp.net/ohttp-configs";
+        "";
     log::trace!("Getting OHTTP config from {}", OHTTP_CONFIG_URL);
     let parsed_config_url = Url::parse(OHTTP_CONFIG_URL)?;
     Ok(Request::get(parsed_config_url).send()?.body)
