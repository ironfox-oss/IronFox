diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/autofill/AutofillSettingFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/autofill/AutofillSettingFragment.kt
index f5bc8f28c3..acdc8bf507 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/autofill/AutofillSettingFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/autofill/AutofillSettingFragment.kt
@@ -105,7 +105,12 @@ class AutofillSettingFragment : BiometricPromptPreferenceFragment() {
     internal fun updateSaveAndAutofillCardsSwitch() {
         requirePreference<SwitchPreference>(R.string.pref_key_credit_cards_save_and_autofill_cards).apply {
             isChecked = context.settings().shouldAutofillCreditCardDetails
-            onPreferenceChangeListener = SharedPreferenceUpdater()
+            onPreferenceChangeListener = object : SharedPreferenceUpdater() {
+                override fun onPreferenceChange(preference: Preference, newValue: Any?): Boolean {
+                    requireComponents.core.engine.settings.cardAutofillEnabled = newValue as Boolean
+                    return super.onPreferenceChange(preference, newValue)
+                }
+            }
         }
     }
 
@@ -115,7 +120,12 @@ class AutofillSettingFragment : BiometricPromptPreferenceFragment() {
     internal fun updateSaveAndAutofillAddressesSwitch() {
         requirePreference<SwitchPreference>(R.string.pref_key_addresses_save_and_autofill_addresses).apply {
             isChecked = context.settings().shouldAutofillAddressDetails
-            onPreferenceChangeListener = SharedPreferenceUpdater()
+            onPreferenceChangeListener = object : SharedPreferenceUpdater() {
+                override fun onPreferenceChange(preference: Preference, newValue: Any?): Boolean {
+                    requireComponents.core.engine.settings.addressAutofillEnabled = newValue as Boolean
+                    return super.onPreferenceChange(preference, newValue)
+                }
+            }
         }
     }
 
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/logins/fragment/SavedLoginsSettingFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/logins/fragment/SavedLoginsSettingFragment.kt
index 511d9e019a..95003d8458 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/logins/fragment/SavedLoginsSettingFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/logins/fragment/SavedLoginsSettingFragment.kt
@@ -40,6 +40,7 @@ class SavedLoginsSettingFragment : PreferenceFragmentCompat() {
                         ),
                     )
                 }
+                context?.components?.core?.engine?.settings?.passwordManagerEnabled = newValue as Boolean
                 // We want to reload the current session here so we can try to fill the current page
                 context?.components?.useCases?.sessionUseCases?.reload?.invoke()
                 return super.onPreferenceChange(preference, newValue)
@@ -53,11 +54,9 @@ class SavedLoginsSettingFragment : PreferenceFragmentCompat() {
         preferenceNeverSave.onPreferenceChangeListener = object : SharedPreferenceUpdater() {
             override fun onPreferenceChange(preference: Preference, newValue: Any?): Boolean {
                 if (newValue == true) {
-                    Logins.saveLoginsSettingChanged.record(
-                        Logins.SaveLoginsSettingChangedExtra(
-                            Setting.NEVER_SAVE.name,
-                        ),
-                    )
+                    context?.components?.core?.engine?.settings?.passwordManagerEnabled = false as Boolean
+                } else if (newValue == false) {
+                    context?.components?.core?.engine?.settings?.passwordManagerEnabled = true as Boolean
                 }
                 // We want to reload the current session here so we don't save any currently inserted login
                 context?.components?.useCases?.sessionUseCases?.reload?.invoke()
