diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 8e271198b0..628f145d63 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -794,12 +794,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      * This will lead to a performance regression since that function can be expensive to call.
      */
     fun checkIfFenixIsDefaultBrowserOnAppResume(): Boolean {
-        val prefKey = appContext.getPreferenceKey(R.string.pref_key_default_browser)
-        val isDefaultBrowserNow = isDefaultBrowserBlocking()
-        val wasDefaultBrowserOnLastResume =
-            this.preferences.getBoolean(prefKey, isDefaultBrowserNow)
-        this.preferences.edit { putBoolean(prefKey, isDefaultBrowserNow) }
-        return isDefaultBrowserNow && !wasDefaultBrowserOnLastResume
+        return false
     }
 
     /**
@@ -811,40 +806,31 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         return browsers.isDefaultBrowser
     }
 
-    var reEngagementNotificationShown by booleanPreference(
-        appContext.getPreferenceKey(R.string.pref_key_re_engagement_notification_shown),
-        default = false,
-    )
+    var reEngagementNotificationShown = true
 
     /**
      * Check if we should set the re-engagement notification.
      */
     fun shouldSetReEngagementNotification(): Boolean {
-        return numberOfAppLaunches <= 1 && !reEngagementNotificationShown
+        return false
     }
 
     /**
      * Check if we should show the re-engagement notification.
      */
     fun shouldShowReEngagementNotification(): Boolean {
-        return !reEngagementNotificationShown && !isDefaultBrowserBlocking()
+        return false
     }
 
     /**
      * Indicates if the re-engagement notification feature is enabled
      */
-    var reEngagementNotificationEnabled by lazyFeatureFlagPreference(
-        key = appContext.getPreferenceKey(R.string.pref_key_re_engagement_notification_enabled),
-        default = { FxNimbus.features.reEngagementNotification.value().enabled },
-        featureFlag = true,
-    )
+    var reEngagementNotificationEnabled = false
 
     /**
      * Indicates if the re-engagement notification feature is enabled
      */
-    val reEngagementNotificationType: Int
-        get() =
-            FxNimbus.features.reEngagementNotification.value().type
+    val reEngagementNotificationType: Int = 0
 
     val shouldUseAutoBatteryTheme by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_auto_battery_theme),
@@ -2310,12 +2296,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     /**
      * Indicates if the Set as default Browser prompt should be displayed to the user.
      */
-    val shouldShowSetAsDefaultPrompt: Boolean
-        get() =
-            (System.currentTimeMillis() - lastSetAsDefaultPromptShownTimeInMillis) >
-                DAYS_BETWEEN_DEFAULT_BROWSER_PROMPTS * ONE_DAY_MS &&
-                numberOfSetAsDefaultPromptShownTimes < MAX_NUMBER_OF_DEFAULT_BROWSER_PROMPTS &&
-                coldStartsBetweenSetAsDefaultPrompts >= APP_COLD_STARTS_TO_SHOW_DEFAULT_PROMPT
+    val shouldShowSetAsDefaultPrompt: Boolean = false
 
     /**
      * Updates the relevant settings when the "Set as Default Browser" prompt is shown.
