diff --git a/components/logins/android/src/main/java/mozilla/appservices/logins/DatabaseLoginsStorage.kt b/components/logins/android/src/main/java/mozilla/appservices/logins/DatabaseLoginsStorage.kt
index af2aa85..addd600 100644
--- a/components/logins/android/src/main/java/mozilla/appservices/logins/DatabaseLoginsStorage.kt
+++ b/components/logins/android/src/main/java/mozilla/appservices/logins/DatabaseLoginsStorage.kt
@@ -158,12 +158,12 @@ enum class KeyRegenerationEventReason {
 
 fun recordKeyRegenerationEvent(reason: KeyRegenerationEventReason) {
     // Avoid the deprecation warning when calling  `record()` without the optional EventExtras param
-    @Suppress("DEPRECATION")
+/*    @Suppress("DEPRECATION")
     when (reason) {
         KeyRegenerationEventReason.Lost -> LoginsStoreMetrics.keyRegeneratedLost.record()
         KeyRegenerationEventReason.Corrupt -> LoginsStoreMetrics.keyRegeneratedCorrupt.record()
         KeyRegenerationEventReason.Other -> LoginsStoreMetrics.keyRegeneratedOther.record()
-    }
+    }*/
 }
 
 /**
@@ -176,14 +176,14 @@ fun recordKeyRegenerationEvent(reason: KeyRegenerationEventReason) {
  * This is a convenience wrapper to measure the two in one shot.
  */
 class LoginsStoreCounterMetrics(
-    val count: CounterMetricType,
-    val errCount: LabeledMetricType<CounterMetricType>,
+//    val count: CounterMetricType,
+//    val errCount: LabeledMetricType<CounterMetricType>,
 ) {
     inline fun <U> measure(callback: () -> U): U {
-        return measureIgnoring({ false }, callback)
+        return callback()
     }
 
-    @Suppress("ComplexMethod", "TooGenericExceptionCaught")
+/*   @Suppress("ComplexMethod", "TooGenericExceptionCaught")
     inline fun <U> measureIgnoring(
         shouldIgnore: (Exception) -> Boolean,
         callback: () -> U,
@@ -214,5 +214,5 @@ class LoginsStoreCounterMetrics(
             }
             throw e
         }
-    }
+    }*/
 }
diff --git a/components/nimbus/android/src/main/java/org/mozilla/experiments/nimbus/Nimbus.kt b/components/nimbus/android/src/main/java/org/mozilla/experiments/nimbus/Nimbus.kt
index 2abc4ce..19c4d1b 100644
--- a/components/nimbus/android/src/main/java/org/mozilla/experiments/nimbus/Nimbus.kt
+++ b/components/nimbus/android/src/main/java/org/mozilla/experiments/nimbus/Nimbus.kt
@@ -92,7 +92,7 @@ open class Nimbus(
 
     private val metricsHandler = object : MetricsHandler {
         override fun recordEnrollmentStatuses(enrollmentStatusExtras: List<EnrollmentStatusExtraDef>) {
-            for (extra in enrollmentStatusExtras) {
+/*            for (extra in enrollmentStatusExtras) {
                 NimbusEvents.enrollmentStatus.record(
                     NimbusEvents.EnrollmentStatusExtra(
                         branch = extra.branch,
@@ -103,38 +103,38 @@ open class Nimbus(
                         conflictSlug = extra.conflictSlug,
                     ),
                 )
-            }
+            }*/
         }
 
         override fun recordFeatureActivation(event: FeatureExposureExtraDef) {
-            NimbusEvents.activation.record(
+/*            NimbusEvents.activation.record(
                 NimbusEvents.ActivationExtra(
                     experiment = event.slug,
                     branch = event.branch,
                     featureId = event.featureId,
                 ),
-            )
+            )*/
         }
 
         override fun recordFeatureExposure(event: FeatureExposureExtraDef) {
-            NimbusEvents.exposure.record(
+/*            NimbusEvents.exposure.record(
                 NimbusEvents.ExposureExtra(
                     experiment = event.slug,
                     branch = event.branch,
                     featureId = event.featureId,
                 ),
-            )
+            )*/
         }
 
         override fun recordMalformedFeatureConfig(event: MalformedFeatureConfigExtraDef) {
-            NimbusEvents.malformedFeature.record(
+/*            NimbusEvents.malformedFeature.record(
                 NimbusEvents.MalformedFeatureExtra(
                     experiment = event.slug,
                     branch = event.branch,
                     featureId = event.featureId,
                     partId = event.part,
                 ),
-            )
+            )*/
         }
     }
 
@@ -201,11 +201,11 @@ open class Nimbus(
         try {
             nimbusClient.getFeatureConfigVariables(featureId)?.let { JSONObject(it) }
         } catch (e: NimbusException.DatabaseNotReady) {
-            NimbusHealth.cacheNotReadyForFeature.record(
+/*            NimbusHealth.cacheNotReadyForFeature.record(
                 NimbusHealth.CacheNotReadyForFeatureExtra(
                     featureId = featureId,
                 ),
-            )
+            )*/
             null
         } catch (e: Throwable) {
             reportError("getFeatureConfigVariablesJson", e)
@@ -281,9 +281,9 @@ open class Nimbus(
     @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
     internal fun fetchExperimentsOnThisThread() = withCatchAll("fetchExperiments") {
         try {
-            NimbusHealth.fetchExperimentsTime.measure {
-                nimbusClient.fetchExperiments()
-            }
+            nimbusClient.fetchExperiments()
+//                nimbusClient.fetchExperiments()
+//            }
             updateObserver {
                 it.onExperimentsFetched()
             }
@@ -318,7 +318,7 @@ open class Nimbus(
             val time = measureTimeMillis {
                 events = nimbusClient.applyPendingExperiments()
             }
-            NimbusHealth.applyPendingExperimentsTime.accumulateSingleSample(time)
+//            NimbusHealth.applyPendingExperimentsTime.accumulateSingleSample(time)
             recordExperimentTelemetryEvents(events!!)
             // Get the experiments to record in telemetry
             postEnrolmentCalculation()
@@ -485,19 +485,19 @@ open class Nimbus(
     @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
     internal fun recordExperimentTelemetry(experiments: List<EnrolledExperiment>) {
         // Call Glean.setExperimentActive() for each active experiment.
-        experiments.forEach { experiment ->
+//        experiments.forEach { experiment ->
             // For now, we will just record the experiment id and the branch id. Once we can call
             // Glean from Rust, this will move to the nimbus-sdk Rust core.
-            Glean.setExperimentActive(
-                experiment.slug,
-                experiment.branchSlug,
-            )
-        }
+//            Glean.setExperimentActive(
+//                experiment.slug,
+//                experiment.branchSlug,
+//            )
+//        }
     }
 
     @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
     internal fun recordExperimentTelemetryEvents(enrollmentChangeEvents: List<EnrollmentChangeEvent>) {
-        enrollmentChangeEvents.forEach { event ->
+/*        enrollmentChangeEvents.forEach { event ->
             when (event.change) {
                 EnrollmentChangeEventType.ENROLLMENT -> {
                     NimbusEvents.enrollment.record(
@@ -545,7 +545,7 @@ open class Nimbus(
                     )
                 }
             }
-        }
+        }*/
     }
 
     // The exposure event should be recorded when the expected treatment (or no-treatment, such as
diff --git a/components/places/android/src/main/java/mozilla/appservices/places/PlacesConnection.kt b/components/places/android/src/main/java/mozilla/appservices/places/PlacesConnection.kt
index 6921181..a9d22e1 100644
--- a/components/places/android/src/main/java/mozilla/appservices/places/PlacesConnection.kt
+++ b/components/places/android/src/main/java/mozilla/appservices/places/PlacesConnection.kt
@@ -343,7 +343,7 @@ class PlacesWriterConnection internal constructor(conn: UniffiPlacesConnection,
     }
 
     override fun runMaintenance(dbSizeLimit: UInt) {
-        val pruneMetrics = PlacesManagerMetrics.runMaintenanceTime.measure {
+/*        val pruneMetrics = PlacesManagerMetrics.runMaintenanceTime.measure {
             val pruneMetrics = PlacesManagerMetrics.runMaintenancePruneTime.measure {
                 this.conn.runMaintenancePrune(dbSizeLimit, 12U)
             }
@@ -361,7 +361,7 @@ class PlacesWriterConnection internal constructor(conn: UniffiPlacesConnection,
             }
             pruneMetrics
         }
-        PlacesManagerMetrics.dbSizeAfterMaintenance.accumulateSamples(listOf(pruneMetrics.dbSizeAfter.toLong() / 1024))
+        PlacesManagerMetrics.dbSizeAfterMaintenance.accumulateSamples(listOf(pruneMetrics.dbSizeAfter.toLong() / 1024))*/
     }
 
     override fun deleteEverything() {
@@ -921,13 +921,13 @@ data class HistoryMetadataKey(
  * This is a convenience wrapper to measure the two in one shot.
  */
 class PlacesManagerCounterMetrics(
-    val count: CounterMetricType,
-    val errCount: LabeledMetricType<CounterMetricType>,
+//    val count: CounterMetricType,
+//    val errCount: LabeledMetricType<CounterMetricType>,
 ) {
-    @Suppress("ComplexMethod", "TooGenericExceptionCaught")
+//    @Suppress("ComplexMethod", "TooGenericExceptionCaught")
     inline fun <U> measure(callback: () -> U): U {
-        count.add()
-        try {
+        return callback()
+/*        try {
             return callback()
         } catch (e: Exception) {
             when (e) {
@@ -954,6 +954,6 @@ class PlacesManagerCounterMetrics(
                 }
             }
             throw e
-        }
+        }*/
     }
 }
