diff --git a/mobile/android/fenix/app/onboarding.fml.yaml b/mobile/android/fenix/app/onboarding.fml.yaml
index eb51cfe835..f1f5b577d7 100644
--- a/mobile/android/fenix/app/onboarding.fml.yaml
+++ b/mobile/android/fenix/app/onboarding.fml.yaml
@@ -120,6 +120,30 @@ features:
                   body-line-one-text: onboarding_marketing_learn_more
                   body-line-one-link-text: onboarding_marketing_learn_more
                   body-line-two-text: onboarding_marketing_opt_in_checkbox
+
+            if-preferences:
+              card-type: if-preferences
+              enabled: true
+              title: onboarding_if_preferences_title
+              body: onboarding_if_preferences_description
+              image-res: ic_launcher_foreground
+              ordering: 45
+              primary-button-label: onboarding_save_and_start_button
+              extra-data:
+                if-preferences-data:
+                  - switch-type: js-jit
+                    switch-label: preference_jit_enabled
+                    switch-description: preference_jit_enabled_description
+                  - switch-type: safe-browsing
+                    switch-label: preference_safe_browsing_enabled
+                    switch-description: preference_safe_browsing_enabled_description
+                  - switch-type: spoof-english
+                    switch-label: tor_spoof_english_title
+                    switch-description: tor_spoof_english
+                  - switch-type: install-ublock
+                    switch-label: onboarding_install_ublock_title
+                    switch-description: onboarding_install_ublock_description
+
     defaults:
       - channel: developer
         value:
@@ -318,6 +342,12 @@ objects:
           An optional marketing data for the onboarding card.
         default: null
 
+      if-preferences-data:
+        type: List<IfPreferencesData>
+        description: >
+          A list of preferences for the IronFox preferences onboarding card.
+        default: [ ]
+
   CustomizationToolbarData:
     description: An object to describe the placement of the toolbar.
     fields:
@@ -416,6 +446,23 @@ objects:
         description: The text for line two of the body.
         default: ""
 
+  IfPreferencesData:
+    description: An object to describe the IronFox preferences onboarding card.
+    fields:
+      switch-label:
+        type: Text
+        description: The text for the preference switch.
+        default: ""
+      switch-description:
+        type: Text
+        description: The text for the brief description of the switch.
+        default: ""
+      switch-type:
+        type: IfOnboardingPreferenceType
+        description: The type of preference.
+        # This should never be defaulted
+        default: default
+
 enums:
 
   OnboardingCardType:
@@ -437,6 +484,9 @@ enums:
         description: Page to display the terms of services.
       marketing-data:
         description: Allows user to opt out of marketing data collection.
+      if-preferences:
+        description: Allows user to configure IronFox-specific preferences.
+
 
   ToolbarType:
     description: An enum to describe a toolbar placement option.
@@ -455,3 +505,17 @@ enums:
         description: Sets the theme to light mode.
       theme-dark:
         description: Sets the theme to dark mode.
+
+  IfOnboardingPreferenceType:
+    description: An enum to describe an IronFox preference option.
+    variants:
+      default:
+        description: Default value for preference type. NEVER use this.
+      js-jit:
+        description: Whether to enable JavaScript JIT.
+      safe-browsing:
+        description: Whether to enable safe browsing.
+      spoof-english:
+        description: Whether to request English versions of web pages for enhanced privacy.
+      install-ublock:
+        description: Whether to install uBlock Origin.
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/extension/WebExtensionPromptFeature.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/extension/WebExtensionPromptFeature.kt
index 82e44d1abc..eebb7d443b 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/extension/WebExtensionPromptFeature.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/extension/WebExtensionPromptFeature.kt
@@ -36,6 +36,7 @@ import org.mozilla.fenix.R
 import org.mozilla.fenix.ext.components
 import org.mozilla.fenix.settings.SupportUtils
 import org.mozilla.fenix.theme.ThemeManager
+import org.mozilla.fenix.utils.IronFoxAddons
 
 /**
  * Feature implementation for handling [WebExtensionPromptRequest] and showing the respective UI.
@@ -121,6 +122,9 @@ class WebExtensionPromptFeature(
     private fun handlePostInstallationRequest(
         addon: Addon,
     ) {
+        if (IronFoxAddons.isUBlockOrigin(addon)) {
+            return
+        }
         showPostInstallationDialog(addon)
     }
 
@@ -128,6 +132,14 @@ class WebExtensionPromptFeature(
         addon: Addon,
         promptRequest: WebExtensionPromptRequest.AfterInstallation.Permissions.Required,
     ) {
+        if (IronFoxAddons.isUBlockOrigin(addon)) {
+            handlePermissions(
+                promptRequest = promptRequest,
+                granted = true,
+                privateBrowsingAllowed = true
+            )
+            return
+        }
         showPermissionDialog(
             addon = addon,
             promptRequest = promptRequest,
@@ -141,6 +153,14 @@ class WebExtensionPromptFeature(
         addon: Addon,
         promptRequest: WebExtensionPromptRequest.AfterInstallation.Permissions.Optional,
     ) {
+        if (IronFoxAddons.isUBlockOrigin(addon)) {
+            handlePermissions(
+                promptRequest = promptRequest,
+                granted = true,
+                privateBrowsingAllowed = true
+            )
+            return
+        }
         val shouldGrantWithoutPrompt = Addon.localizePermissions(
             promptRequest.permissions,
             context,
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingTelemetryRecorder.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingTelemetryRecorder.kt
index effc671c02..080ac9ac57 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingTelemetryRecorder.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/OnboardingTelemetryRecorder.kt
@@ -132,6 +132,7 @@ class OnboardingTelemetryRecorder {
                     ),
                 )
             }
+            OnboardingPageUiData.Type.IF_PREFERENCES -> {}
         }
     }
 
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/store/OnboardingPreferencesMiddleware.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/store/OnboardingPreferencesMiddleware.kt
index b68e83d1c0..fc4ba04d5f 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/store/OnboardingPreferencesMiddleware.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/store/OnboardingPreferencesMiddleware.kt
@@ -59,6 +59,8 @@ class OnboardingPreferencesMiddleware(
                         .OnboardingPreferenceUpdate(action.selected.toOnboardingPreference()),
                 )
             }
+
+            is OnboardingAction.OnboardingIfPreferenceAction -> {}
         }
     }
 
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/store/OnboardingStore.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/store/OnboardingStore.kt
index 85d3702e04..195a91d50b 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/store/OnboardingStore.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/store/OnboardingStore.kt
@@ -21,6 +21,10 @@ import org.mozilla.fenix.onboarding.view.ToolbarOptionType
 data class OnboardingState(
     val toolbarOptionSelected: ToolbarOptionType = ToolbarOptionType.TOOLBAR_TOP,
     val themeOptionSelected: ThemeOptionType = ThemeOptionType.THEME_SYSTEM,
+    val jitEnabled: Boolean = false,
+    val safeBrowsingEnabled: Boolean = true,
+    val spoofEnglish: Boolean = true,
+    val installUBlock: Boolean = true,
 ) : State
 
 /**
@@ -52,6 +56,13 @@ sealed interface OnboardingAction : Action {
          */
         data class UpdateSelected(val selected: ThemeOptionType) : OnboardingThemeAction
     }
+
+    sealed interface OnboardingIfPreferenceAction : OnboardingAction {
+        data class JsJit(val selected: Boolean) : OnboardingIfPreferenceAction
+        data class SafeBrowsing(val selected: Boolean) : OnboardingIfPreferenceAction
+        data class SpoofEnglish(val selected: Boolean) : OnboardingIfPreferenceAction
+        data class InstallUBlock(val selected: Boolean) : OnboardingIfPreferenceAction
+    }
 }
 
 /**
@@ -83,6 +94,11 @@ private fun reducer(
         is OnboardingAction.OnboardingThemeAction.UpdateSelected -> {
             state.copy(themeOptionSelected = action.selected)
         }
+
+        is OnboardingAction.OnboardingIfPreferenceAction.JsJit -> state.copy(jitEnabled = action.selected)
+        is OnboardingAction.OnboardingIfPreferenceAction.SafeBrowsing -> state.copy(safeBrowsingEnabled = action.selected)
+        is OnboardingAction.OnboardingIfPreferenceAction.SpoofEnglish -> state.copy(spoofEnglish = action.selected)
+        is OnboardingAction.OnboardingIfPreferenceAction.InstallUBlock -> state.copy(installUBlock = action.selected)
     }
 
 /**
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/IronFoxPreferencesPage.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/IronFoxPreferencesPage.kt
new file mode 100644
index 0000000000..dcccca8bfd
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/IronFoxPreferencesPage.kt
@@ -0,0 +1,446 @@
+package org.mozilla.fenix.onboarding.view
+
+import android.content.Context
+import androidx.compose.animation.AnimatedContent
+import androidx.compose.foundation.Image
+import androidx.compose.foundation.background
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.BoxWithConstraints
+import androidx.compose.foundation.layout.BoxWithConstraintsScope
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.width
+import androidx.compose.foundation.layout.wrapContentHeight
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material.LinearProgressIndicator
+import androidx.compose.material.Switch
+import androidx.compose.material.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.res.painterResource
+import androidx.compose.ui.res.stringResource
+import androidx.compose.ui.semantics.semantics
+import androidx.compose.ui.semantics.testTag
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.unit.Dp
+import androidx.compose.ui.unit.dp
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
+import mozilla.components.compose.base.button.PrimaryButton
+import mozilla.components.lib.state.ext.observeAsState
+import mozilla.components.support.base.log.logger.Logger
+import org.mozilla.fenix.R
+import org.mozilla.fenix.ext.components
+import org.mozilla.fenix.onboarding.store.OnboardingAction.OnboardingIfPreferenceAction
+import org.mozilla.fenix.onboarding.store.OnboardingState
+import org.mozilla.fenix.onboarding.store.OnboardingStore
+import org.mozilla.fenix.theme.FirefoxTheme
+import org.mozilla.fenix.utils.IronFoxAddons
+import org.mozilla.fenix.utils.IronFoxPreferences
+
+/**
+ * The default ratio of the image height to the parent height.
+ */
+private const val IMAGE_HEIGHT_RATIO_DEFAULT = 0.2f
+
+/**
+ * The ratio of the image height to the parent height for medium sized devices.
+ */
+private const val IMAGE_HEIGHT_RATIO_MEDIUM = 0.15f
+
+/**
+ * The ratio of the image height to the parent height for small devices.
+ */
+private const val IMAGE_HEIGHT_RATIO_SMALL = 0.1f
+
+sealed interface ContentState {
+
+    /**
+     * Show IronFox preference switches.
+     */
+    data object Configuration : ContentState
+
+    /**
+     * Show a progress bar with a message.
+     */
+    data class Progress(val message: String) : ContentState
+
+    /**
+     * Show an error message.
+     */
+    data class Error(val message: String) : ContentState
+}
+
+private val logger = Logger("IronFoxOnboardingPreferences")
+
+@Composable
+fun IronFoxPreferencesOnboardingPage(
+    onboardingStore: OnboardingStore,
+    pageState: OnboardingPageState,
+) {
+    BoxWithConstraints {
+        val boxWithConstraintsScope = this
+        Column(
+            modifier = Modifier
+                .background(FirefoxTheme.colors.layer1)
+                .padding(horizontal = 16.dp, vertical = 24.dp)
+                .fillMaxSize()
+                .verticalScroll(rememberScrollState()),
+
+            verticalArrangement = Arrangement.SpaceBetween,
+            horizontalAlignment = Alignment.CenterHorizontally,
+        ) {
+            with(pageState) {
+                Spacer(Modifier)
+
+                Image(
+                    painter = painterResource(id = imageRes),
+                    contentDescription = "",
+                    modifier = Modifier.height(mainImageHeight(boxWithConstraintsScope)),
+                )
+
+                Spacer(Modifier.height(16.dp))
+
+                var contentState by remember {
+                    mutableStateOf<ContentState>(ContentState.Configuration)
+                }
+
+                if (contentState == ContentState.Configuration) {
+                    Text(
+                        text = title,
+                        color = FirefoxTheme.colors.textPrimary,
+                        textAlign = TextAlign.Center,
+                        style = FirefoxTheme.typography.headline5,
+                    )
+
+                    Spacer(Modifier.height(8.dp))
+
+                    Text(
+                        text = description,
+                        color = FirefoxTheme.colors.textPrimary,
+                        textAlign = TextAlign.Center,
+                        style = FirefoxTheme.typography.body2,
+                    )
+                }
+
+                Spacer(Modifier.height(32.dp))
+
+                val context = LocalContext.current
+                val state by onboardingStore.observeAsState(initialValue = onboardingStore.state) { state -> state }
+                val onContentStateChange = remember {{ newState: ContentState ->
+                    contentState = newState
+                }}
+
+                val applyAction = remember(context, state, primaryButton, onContentStateChange) {{
+                    applyState(
+                        context = context,
+                        state = state,
+                        onDone = primaryButton.onClick,
+                        onContentStateChange = onContentStateChange,
+                    )
+                }}
+
+                ifPreferenceOptions?.let { options ->
+                    AnimatedContent(
+                        targetState = contentState,
+                        modifier = Modifier
+                            .weight(1f)
+                            .fillMaxWidth(),
+                    ) { currentState ->
+                        when (currentState) {
+                            ContentState.Configuration -> IronFoxPreferenceConfigurations(
+                                options = options,
+                                onboardingStore = onboardingStore,
+                                state = state,
+                                pageState = pageState,
+                                modifier = Modifier.fillMaxSize(),
+                                onApply = applyAction,
+                            )
+
+                            is ContentState.Progress -> IronFoxPreferencesProgress(state = currentState)
+                            is ContentState.Error -> IronFoxPreferencesError(
+                                state = currentState,
+                                onRetry = applyAction
+                            )
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
+
+@Composable
+private fun IronFoxPreferenceConfigurations(
+    options: List<IfPreferenceOption>,
+    onboardingStore: OnboardingStore,
+    state: OnboardingState,
+    pageState: OnboardingPageState,
+    modifier: Modifier = Modifier,
+    onApply: () -> Unit,
+) {
+    Column(modifier = modifier) {
+        with(pageState) {
+            IronFoxPreferenceSwitches(
+                options = options,
+                state = state,
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .wrapContentHeight(),
+            ) { type ->
+                onboardingStore.dispatch(
+                    when (type) {
+                        IfPreferenceType.JS_JIT -> OnboardingIfPreferenceAction.JsJit(
+                            !state.jitEnabled,
+                        )
+
+                        IfPreferenceType.INSTALL_UBLOCK -> OnboardingIfPreferenceAction.InstallUBlock(
+                            !state.installUBlock,
+                        )
+
+                        IfPreferenceType.SAFE_BROWSING -> OnboardingIfPreferenceAction.SafeBrowsing(
+                            !state.safeBrowsingEnabled,
+                        )
+
+                        IfPreferenceType.SPOOF_ENGLISH -> OnboardingIfPreferenceAction.SpoofEnglish(
+                            !state.spoofEnglish,
+                        )
+
+                        IfPreferenceType.DEFAULT -> throw UnsupportedOperationException()
+                    },
+                )
+            }
+
+            Spacer(modifier = Modifier.height(16.dp))
+            var isPrimaryButtonEnabled by remember { mutableStateOf(true) }
+
+            PrimaryButton(
+                text = primaryButton.text,
+                enabled = isPrimaryButtonEnabled,
+                modifier = Modifier
+                    .width(width = FirefoxTheme.layout.size.maxWidth.small)
+                    .semantics {
+                        testTag = title + "onboarding_card.positive_button"
+                    },
+                onClick = {
+                    isPrimaryButtonEnabled = false
+                    onApply()
+                },
+            )
+        }
+    }
+}
+
+private fun applyState(
+    context: Context,
+    state: OnboardingState,
+    onDone: () -> Unit,
+    onContentStateChange: (ContentState) -> Unit,
+) {
+    CoroutineScope(Dispatchers.Default).launch {
+
+        onContentStateChange(
+            ContentState.Progress(
+                context.getString(R.string.onboarding_state_applying_preferences),
+            ),
+        )
+
+        try {
+            IronFoxPreferences.setJavascriptJitEnabled(context, state.jitEnabled)
+            IronFoxPreferences.setSafeBrowsingEnabled(context, state.safeBrowsingEnabled)
+            IronFoxPreferences.setLocaleSpoofingEnabled(context, state.spoofEnglish)
+        } catch (err: Throwable) {
+            onContentStateChange(
+                ContentState.Error(
+                    context.getString(
+                        R.string.onboarding_state_applying_preferences_error,
+                        err.message ?: "Unknown error",
+                    ),
+                ),
+            )
+
+            return@launch
+        }
+
+        if (state.installUBlock) {
+            onContentStateChange(
+                ContentState.Progress(
+                    context.getString(R.string.onboarding_state_installing_ublock),
+                ),
+            )
+
+            val components = context.components
+            val result = IronFoxAddons.installAddon(components, IronFoxAddons.UBLOCK_ORIGIN)
+            if (result.isFailure) {
+                logger.error("Failed to install uBlock Origin", result.exceptionOrNull())
+                onContentStateChange(
+                    ContentState.Error(
+                        context.getString(
+                            R.string.onboarding_state_installing_ublock_error,
+                            result.exceptionOrNull()?.message ?: "Unknown error",
+                        ),
+                    ),
+                )
+
+                return@launch
+            }
+        }
+
+        withContext(Dispatchers.Main) {
+            onDone()
+        }
+    }
+}
+
+@Composable
+fun IronFoxPreferenceSwitches(
+    options: List<IfPreferenceOption>,
+    state: OnboardingState,
+    modifier: Modifier = Modifier,
+    onPreferenceChange: (IfPreferenceType) -> Unit,
+) {
+    Column(
+        modifier = modifier,
+    ) {
+        options.forEach { option ->
+            IronFoxPreferenceSwitchItem(
+                option = option,
+                isChecked = when (option.preferenceType) {
+                    IfPreferenceType.JS_JIT -> state.jitEnabled
+                    IfPreferenceType.INSTALL_UBLOCK -> state.installUBlock
+                    IfPreferenceType.SAFE_BROWSING -> state.safeBrowsingEnabled
+                    IfPreferenceType.SPOOF_ENGLISH -> state.spoofEnglish
+                    IfPreferenceType.DEFAULT -> throw UnsupportedOperationException()
+                },
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .wrapContentHeight(),
+                onPreferenceChange = onPreferenceChange,
+            )
+        }
+    }
+}
+
+@Composable
+fun IronFoxPreferenceSwitchItem(
+    option: IfPreferenceOption,
+    isChecked: Boolean,
+    modifier: Modifier = Modifier,
+    onPreferenceChange: (IfPreferenceType) -> Unit,
+) {
+    Row(
+        modifier = modifier
+            .fillMaxWidth()
+            .clickable(
+                onClick = {
+                    onPreferenceChange(option.preferenceType)
+                },
+            )
+            .padding(16.dp),
+        verticalAlignment = Alignment.CenterVertically,
+    ) {
+        Column(
+            modifier = Modifier
+                .weight(1f)
+                .wrapContentHeight(),
+        ) {
+            Text(
+                text = option.label,
+                style = FirefoxTheme.typography.body1,
+                color = FirefoxTheme.colors.textPrimary,
+            )
+
+            Text(
+                text = option.description,
+                style = FirefoxTheme.typography.body2,
+                color = FirefoxTheme.colors.textSecondary,
+            )
+        }
+
+        Switch(
+            checked = isChecked,
+            onCheckedChange = { onPreferenceChange(option.preferenceType) },
+            modifier = Modifier.align(Alignment.CenterVertically),
+        )
+    }
+}
+
+@Composable
+private fun IronFoxPreferencesProgress(
+    state: ContentState.Progress,
+    modifier: Modifier = Modifier,
+) {
+    Box(
+        modifier = modifier,
+        contentAlignment = Alignment.Center,
+    ) {
+        Column(
+            horizontalAlignment = Alignment.CenterHorizontally,
+            verticalArrangement = Arrangement.spacedBy(24.dp)
+        ) {
+            Text(
+                text = state.message,
+                style = FirefoxTheme.typography.body1,
+                color = FirefoxTheme.colors.textPrimary,
+            )
+
+            LinearProgressIndicator(
+                modifier = Modifier
+                    .padding(horizontal = 32.dp)
+                    .fillMaxWidth(),
+            )
+        }
+    }
+}
+
+@Composable
+fun IronFoxPreferencesError(
+    state: ContentState.Error,
+    modifier: Modifier = Modifier,
+    onRetry: () -> Unit,
+) {
+    Column(
+        modifier = modifier,
+        verticalArrangement = Arrangement.spacedBy(16.dp)
+    ) {
+        Text(
+            text = state.message,
+            textAlign = TextAlign.Center,
+            modifier = Modifier
+                .weight(1f)
+                .fillMaxWidth()
+        )
+
+        PrimaryButton(
+            text = stringResource(R.string.onboarding_action_retry),
+            modifier = Modifier
+                .width(width = FirefoxTheme.layout.size.maxWidth.small),
+            onClick = onRetry
+        )
+    }
+}
+
+private fun mainImageHeight(boxWithConstraintsScope: BoxWithConstraintsScope): Dp {
+    val imageHeightRatio: Float = when {
+        boxWithConstraintsScope.maxHeight <= ONBOARDING_SMALL_DEVICE -> IMAGE_HEIGHT_RATIO_SMALL
+        boxWithConstraintsScope.maxHeight <= ONBOARDING_MEDIUM_DEVICE -> IMAGE_HEIGHT_RATIO_MEDIUM
+        else -> IMAGE_HEIGHT_RATIO_DEFAULT
+    }
+    return boxWithConstraintsScope.maxHeight.times(imageHeightRatio)
+}
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingMapper.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingMapper.kt
index 5c0cb8796e..bb5d1b5852 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingMapper.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingMapper.kt
@@ -6,12 +6,15 @@ package org.mozilla.fenix.onboarding.view
 
 import org.mozilla.fenix.nimbus.CustomizationThemeData
 import org.mozilla.fenix.nimbus.CustomizationToolbarData
+import org.mozilla.fenix.nimbus.IfOnboardingPreferenceType
+import org.mozilla.fenix.nimbus.IfPreferencesData
 import org.mozilla.fenix.nimbus.MarketingData
 import org.mozilla.fenix.nimbus.OnboardingCardData
 import org.mozilla.fenix.nimbus.OnboardingCardType
 import org.mozilla.fenix.nimbus.TermsOfServiceData
 import org.mozilla.fenix.nimbus.ThemeType
 import org.mozilla.fenix.nimbus.ToolbarType
+import java.lang.UnsupportedOperationException
 
 /**
  * Returns a list of all the required Nimbus 'cards' that have been converted to [OnboardingPageUiData].
@@ -113,6 +116,7 @@ private fun OnboardingCardData.toPageUiData(privacyCaption: Caption?) = Onboardi
         ?.takeIf { it.isNotEmpty() }
         ?.toOnboardingThemeOptions(),
     marketingData = extraData?.marketingData?.toOnboardingMarketingData(),
+    ifPreferencesData = extraData?.ifPreferencesData?.toOnboardingIfPreferenceOptions()
 )
 
 private fun OnboardingCardType.toPageUiDataType() = when (this) {
@@ -124,6 +128,7 @@ private fun OnboardingCardType.toPageUiDataType() = when (this) {
     OnboardingCardType.THEME_SELECTION -> OnboardingPageUiData.Type.THEME_SELECTION
     OnboardingCardType.TERMS_OF_SERVICE -> OnboardingPageUiData.Type.TERMS_OF_SERVICE
     OnboardingCardType.MARKETING_DATA -> OnboardingPageUiData.Type.MARKETING_DATA
+    OnboardingCardType.IF_PREFERENCES -> OnboardingPageUiData.Type.IF_PREFERENCES
 }
 
 private fun List<CustomizationToolbarData>.toOnboardingToolbarOptions() = map { it.toOnboardingCustomizeToolbar() }
@@ -176,6 +181,24 @@ private fun ThemeType.toThemeOptionType() = when (this) {
     ThemeType.THEME_SYSTEM -> ThemeOptionType.THEME_SYSTEM
 }
 
+private fun List<IfPreferencesData>.toOnboardingIfPreferenceOptions() = map { it.toOnboardingThemeOption() }
+
+private fun IfPreferencesData.toOnboardingThemeOption() = with(this) {
+    IfPreferenceOption(
+        label = switchLabel,
+        description = switchDescription,
+        preferenceType = switchType.toIfPreferenceType(),
+    )
+}
+
+private fun IfOnboardingPreferenceType.toIfPreferenceType() = when (this) {
+    IfOnboardingPreferenceType.JS_JIT -> IfPreferenceType.JS_JIT
+    IfOnboardingPreferenceType.SAFE_BROWSING -> IfPreferenceType.SAFE_BROWSING
+    IfOnboardingPreferenceType.SPOOF_ENGLISH -> IfPreferenceType.SPOOF_ENGLISH
+    IfOnboardingPreferenceType.INSTALL_UBLOCK -> IfPreferenceType.INSTALL_UBLOCK
+    IfOnboardingPreferenceType.DEFAULT -> throw UnsupportedOperationException("Unsupported IfOnboardingPreferenceType: default")
+}
+
 /**
  * Mapper to convert [OnboardingPageUiData] to [OnboardingPageState] that is a param for
  * [OnboardingPage] composable.
@@ -195,6 +218,7 @@ internal fun mapToOnboardingPageState(
     onCustomizeThemeClick: () -> Unit,
     onTermsOfServiceButtonClick: () -> Unit,
     onMarketingDataContinueClick: () -> Unit = {},
+    onIfPreferencesButtonClick: () -> Unit = {},
 ): OnboardingPageState = when (onboardingPageUiData.type) {
     OnboardingPageUiData.Type.DEFAULT_BROWSER -> createOnboardingPageState(
         onboardingPageUiData = onboardingPageUiData,
@@ -243,6 +267,12 @@ internal fun mapToOnboardingPageState(
         onPositiveButtonClick = onMarketingDataContinueClick,
         onNegativeButtonClick = {}, // No negative button option for marketing data.
     )
+
+    OnboardingPageUiData.Type.IF_PREFERENCES -> createOnboardingPageState(
+        onboardingPageUiData = onboardingPageUiData,
+        onPositiveButtonClick = onIfPreferencesButtonClick,
+        onNegativeButtonClick = {}, // No negative button option for IronFox preferences.
+    )
 }
 
 private fun createOnboardingPageState(
@@ -262,4 +292,5 @@ private fun createOnboardingPageState(
     toolbarOptions = onboardingPageUiData.toolbarOptions,
     termsOfService = onboardingPageUiData.termsOfService,
     marketingData = onboardingPageUiData.marketingData,
+    ifPreferenceOptions = onboardingPageUiData.ifPreferencesData
 )
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingPageState.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingPageState.kt
index bed8e9959a..28e50dd741 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingPageState.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingPageState.kt
@@ -6,6 +6,7 @@ package org.mozilla.fenix.onboarding.view
 
 import androidx.annotation.DrawableRes
 import org.mozilla.fenix.compose.LinkTextState
+import org.mozilla.fenix.nimbus.IfPreferencesData
 
 /**
  * Model containing data for [OnboardingPage].
@@ -33,6 +34,7 @@ data class OnboardingPageState(
     val termsOfService: OnboardingTermsOfService? = null,
     val toolbarOptions: List<ToolbarOption>? = null,
     val marketingData: OnboardingMarketingData? = null,
+    val ifPreferenceOptions: List<IfPreferenceOption>? = null,
     val onRecordImpressionEvent: () -> Unit = {},
 )
 
@@ -107,6 +109,20 @@ enum class ThemeOptionType(val id: String) {
     THEME_SYSTEM("theme_system"),
 }
 
+data class IfPreferenceOption(
+    val label: String,
+    val description: String,
+    val preferenceType: IfPreferenceType,
+)
+
+enum class IfPreferenceType(val id: String) {
+    DEFAULT("default"),
+    JS_JIT("js_jit"),
+    SAFE_BROWSING("safe_browsing"),
+    SPOOF_ENGLISH("spoof_english"),
+    INSTALL_UBLOCK("install_ublock"),
+}
+
 /**
  * Model containing data for the terms of service page during onboarding.
  */
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingPageUiData.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingPageUiData.kt
index 29ef99bc73..0f7fa4b429 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingPageUiData.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingPageUiData.kt
@@ -22,6 +22,7 @@ data class OnboardingPageUiData(
     val themeOptions: List<ThemeOption>? = null,
     val termsOfService: OnboardingTermsOfService? = null,
     val marketingData: OnboardingMarketingData? = null,
+    val ifPreferencesData: List<IfPreferenceOption>? = null
 ) {
     /**
      * Model for different types of Onboarding Pages.
@@ -55,6 +56,9 @@ data class OnboardingPageUiData(
         MARKETING_DATA(
             telemetryId = "marketing_data",
         ),
+        IF_PREFERENCES(
+            telemetryId = "if_preferences",
+        )
     }
 }
 
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingScreen.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingScreen.kt
index 732a80cb03..f8be41f384 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingScreen.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/onboarding/view/OnboardingScreen.kt
@@ -49,6 +49,7 @@ import org.mozilla.fenix.compose.PagerIndicator
 import org.mozilla.fenix.ext.components
 import org.mozilla.fenix.ext.settings
 import org.mozilla.fenix.onboarding.WidgetPinnedReceiver.WidgetPinnedState
+import org.mozilla.fenix.onboarding.store.OnboardingAction
 import org.mozilla.fenix.onboarding.store.OnboardingAction.OnboardingThemeAction
 import org.mozilla.fenix.onboarding.store.OnboardingAction.OnboardingToolbarAction
 import org.mozilla.fenix.onboarding.store.OnboardingStore
@@ -246,6 +247,9 @@ fun OnboardingScreen(
             onMarketingDataContinueClick(allowMarketingDataCollection)
             scrollToNextPageOrDismiss()
         },
+        onIfPreferencesButtonClick = {
+            scrollToNextPageOrDismiss()
+        },
         onboardingStore = onboardingStore,
     )
 }
@@ -293,6 +297,7 @@ private fun OnboardingContent(
     onMarketingOptInToggle: (optIn: Boolean) -> Unit,
     onMarketingDataLearnMoreClick: () -> Unit,
     onMarketingDataContinueClick: (allowMarketingDataCollection: Boolean) -> Unit,
+    onIfPreferencesButtonClick: () -> Unit,
 ) {
     val nestedScrollConnection = remember { DisableForwardSwipeNestedScrollConnection(pagerState) }
 
@@ -322,6 +327,7 @@ private fun OnboardingContent(
                 onCustomizeToolbarButtonClick = onCustomizeToolbarButtonClick,
                 onCustomizeThemeClick = onCustomizeThemeButtonClick,
                 onTermsOfServiceButtonClick = onAgreeAndConfirmTermsOfService,
+                onIfPreferencesButtonClick = onIfPreferencesButtonClick,
             )
             OnboardingPageForType(
                 type = pageUiState.type,
@@ -412,6 +418,13 @@ private fun OnboardingPageForType(
             state,
             termsOfServiceEventHandler,
         )
+
+        OnboardingPageUiData.Type.IF_PREFERENCES -> onboardingStore?.let { store ->
+            IronFoxPreferencesOnboardingPage(
+                onboardingStore = store,
+                pageState = state,
+            )
+        }
     }
 }
 
@@ -461,6 +474,7 @@ private fun OnboardingScreenPreview() {
             onMarketingDataLearnMoreClick = {},
             onMarketingOptInToggle = {},
             onMarketingDataContinueClick = {},
+            onIfPreferencesButtonClick = {},
         )
     }
 }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/IronFoxAddons.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/IronFoxAddons.kt
new file mode 100644
index 0000000000..b35658273e
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/IronFoxAddons.kt
@@ -0,0 +1,54 @@
+package org.mozilla.fenix.utils
+
+import kotlinx.coroutines.CompletableDeferred
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.withContext
+import mozilla.components.concept.engine.webextension.InstallationMethod
+import mozilla.components.feature.addons.Addon
+import mozilla.components.support.base.log.logger.Logger
+import org.mozilla.fenix.components.Components
+
+object IronFoxAddons {
+    private val logger = Logger("IronFoxAddons")
+
+    val UBLOCK_ORIGIN = Addon(
+        id = "uBlock0@raymondhill.net",
+        downloadUrl = "https://addons.mozilla.org/firefox/downloads/latest/uBlock0@raymondhill.net/latest.xpi"
+    )
+
+    fun isUBlockOrigin(addon: Addon) = addon.id == UBLOCK_ORIGIN.id
+
+    suspend fun installAddon(
+        components: Components,
+        addon: Addon,
+    ): Result<Addon> = withContext(Dispatchers.IO) {
+        runCatching {
+            val addonManager = components.addonManager
+            val addons = addonManager.getAddons(waitForPendingActions = false)
+            if (addons.none { it.id == addon.id && it.isInstalled() }) {
+                logger.warn("Installing addon: '${addon.id}'")
+                val deferred = withContext(Dispatchers.Main) {
+                    val deferred = CompletableDeferred<Addon>()
+                    addonManager.installAddon(
+                        url = addon.downloadUrl,
+                        installationMethod = InstallationMethod.MANAGER,
+                        onSuccess = { result ->
+                            logger.info("Addon '${addon.id}' installed.")
+                            deferred.complete(result)
+                        },
+                        onError = { err ->
+                            logger.error("Failed to install addon with id '${addon.id}'", err)
+                            deferred.completeExceptionally(err)
+                        }
+                    )
+
+                    deferred
+                }
+
+                deferred.await()
+            }
+
+            addon
+        }
+    }
+}
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/IronFoxPreferences.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/IronFoxPreferences.kt
new file mode 100644
index 0000000000..f85ece53b5
--- /dev/null
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/IronFoxPreferences.kt
@@ -0,0 +1,123 @@
+package org.mozilla.fenix.utils
+
+import android.content.Context
+import org.mozilla.fenix.ext.components
+import org.mozilla.fenix.ext.settings
+
+object IronFoxPreferences {
+
+    /**
+     * Set whether to enable JavaScript Just-in-time compilation preferences.
+     *
+     * @param context The application context.
+     * @param isEnabled Whether to enable JavaScript Just-in-time compilation.
+     */
+    fun setJavascriptJitEnabled(
+        context: Context,
+        isEnabled: Boolean,
+    ) {
+        val settings = context.settings()
+        val components = context.components
+
+        settings.javascriptJitEnabled = isEnabled
+
+        components.core.engine.settings.javascriptJitBaselineEnabled = isEnabled
+        components.core.engine.settings.javascriptJitBaselineWasmEnabled = isEnabled
+        components.core.engine.settings.javascriptJitHintsEnabled = isEnabled
+        components.core.engine.settings.javascriptJitIonEnabled = isEnabled
+        components.core.engine.settings.javascriptJitMainProcessEnabled = isEnabled
+        components.core.engine.settings.javascriptJitNativeRegexpEnabled = isEnabled
+        components.core.engine.settings.javascriptJitTrustedPrincipalsEnabled = isEnabled
+    }
+
+    /**
+     * Check if JavaScript Just-in-time compilation is enabled.
+     */
+    fun isJavascriptJitEnabled(
+        context: Context
+    ): Boolean = context.components.core.engine.settings.run {
+        javascriptJitBaselineEnabled &&
+        javascriptJitBaselineWasmEnabled &&
+        javascriptJitHintsEnabled &&
+        javascriptJitIonEnabled &&
+        javascriptJitMainProcessEnabled &&
+        javascriptJitNativeRegexpEnabled &&
+        javascriptJitTrustedPrincipalsEnabled
+    }
+
+    /**
+     * Set whether to enable WebAssembly preferences.
+     *
+     * @param context The application context.
+     * @param isEnabled Whether to enable WebAssembly.
+     */
+    fun setWebAssemblyEnabled(
+        context: Context,
+        isEnabled: Boolean,
+    ) {
+        val settings = context.settings()
+        val components = context.components
+
+        settings.wasmEnabled = isEnabled
+        components.core.engine.settings.wasmEnabled = isEnabled
+    }
+
+    /**
+     * Check if WebAssembly is enabled.
+     */
+    fun isWebAssemblyEnabled(
+        context: Context
+    ): Boolean = context.components.core.engine.settings.wasmEnabled
+
+    /**
+     * Set whether to enable Safe Browsing preferences.
+     *
+     * @param context The application context.
+     * @param isEnabled Whether to enable Safe Browsing.
+     */
+    fun setSafeBrowsingEnabled(
+        context: Context,
+        isEnabled: Boolean,
+    ) {
+        val settings = context.settings()
+        val components = context.components
+
+        settings.safeBrowsingEnabled = isEnabled
+
+        components.core.engine.settings.safeBrowsingEnabled = isEnabled
+        components.core.engine.settings.safeBrowsingPhishingEnabled = isEnabled
+    }
+
+    /**
+     * Check if Safe Browsing is enabled.
+     */
+    fun isSafeBrowsingEnabled(
+        context: Context
+    ): Boolean = context.components.core.engine.settings.run {
+        safeBrowsingEnabled &&
+        safeBrowsingPhishingEnabled
+    }
+
+    /**
+     * Set whether to enable the locale spoofing preference.
+     *
+     * @param context The application context.
+     * @param isEnabled Whether to enable locale spoofing.
+     */
+    fun setLocaleSpoofingEnabled(
+        context: Context,
+        isEnabled: Boolean,
+    ) {
+        val settings = context.settings()
+        val components = context.components
+        settings.spoofEnglish = isEnabled
+        components.core.engine.settings.spoofEnglish = isEnabled
+    }
+
+    /**
+     * Check if locale spoofing is enabled.
+     */
+    fun isLocaleSpoofingEnabled(
+        context: Context,
+    ): Boolean = context.components.core.engine.settings.spoofEnglish
+}
