diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/sitepermissions/SiteSettingsFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/sitepermissions/SiteSettingsFragment.kt
index 3885a06691..9d9dc0235a 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/sitepermissions/SiteSettingsFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/sitepermissions/SiteSettingsFragment.kt
@@ -23,6 +23,11 @@ import org.mozilla.fenix.ext.settings
 import org.mozilla.fenix.ext.showToolbar
 import org.mozilla.fenix.settings.PhoneFeature
 import org.mozilla.fenix.settings.requirePreference
+import android.os.Handler
+import android.os.Looper
+import android.widget.Toast
+import org.mozilla.fenix.utils.IronFoxPreferences
+import kotlin.system.exitProcess
 
 /**
  * Screen for managing settings related to site permissions and content defaults.
@@ -40,6 +45,150 @@ class SiteSettingsFragment : PreferenceFragmentCompat() {
     override fun onResume() {
         super.onResume()
         showToolbar(getString(R.string.preferences_site_settings))
+
+        val cacheEnabledPreference = requirePreference<SwitchPreference>(
+            R.string.pref_key_cache_enabled,
+        )
+
+        cacheEnabledPreference.setOnPreferenceChangeListener { preference, cacheEnabled ->
+            val settings = preference.context.settings()
+            val components = preference.context.components
+
+            settings.cacheEnabled = cacheEnabled as Boolean
+            components.core.engine.settings.cacheEnabled = cacheEnabled
+
+            true
+        }
+
+        val cacheSslEnabledPreference = requirePreference<SwitchPreference>(
+            R.string.pref_key_cache_ssl_enabled,
+        )
+
+        cacheSslEnabledPreference.setOnPreferenceChangeListener { preference, cacheSslEnabled ->
+            val settings = preference.context.settings()
+            val components = preference.context.components
+
+            settings.cacheSslEnabled = cacheSslEnabled as Boolean
+            components.core.engine.settings.cacheSslEnabled = cacheSslEnabled
+
+            true
+        }
+
+        val javascriptEnabledPreference = requirePreference<SwitchPreference>(
+            R.string.pref_key_javascript_enabled,
+        )
+
+        javascriptEnabledPreference.setOnPreferenceChangeListener { preference, javascriptEnabled ->
+            val settings = preference.context.settings()
+            val components = preference.context.components
+
+            settings.javascriptEnabled = javascriptEnabled as Boolean
+            components.core.engine.settings.javascriptEnabled = javascriptEnabled
+
+            true
+        }
+
+        val javascriptJitEnabledPreference = requirePreference<SwitchPreference>(
+            R.string.pref_key_jit_enabled,
+        )
+
+        javascriptJitEnabledPreference.isChecked = IronFoxPreferences.isJavascriptJitEnabled(requireContext())
+        javascriptJitEnabledPreference.setOnPreferenceChangeListener { preference, javascriptJitEnabled ->
+            val settings = preference.context.settings()
+            val components = preference.context.components
+
+            settings.javascriptJitEnabled = javascriptJitEnabled as Boolean
+
+            components.core.engine.settings.javascriptJitBaselineEnabled = javascriptJitEnabled
+            components.core.engine.settings.javascriptJitBaselineWasmEnabled = javascriptJitEnabled
+            components.core.engine.settings.javascriptJitHintsEnabled = javascriptJitEnabled
+            components.core.engine.settings.javascriptJitIonEnabled = javascriptJitEnabled
+            components.core.engine.settings.javascriptJitMainProcessEnabled = javascriptJitEnabled
+            components.core.engine.settings.javascriptJitNativeRegexpEnabled = javascriptJitEnabled
+            components.core.engine.settings.javascriptJitTrustedPrincipalsEnabled = javascriptJitEnabled
+
+            Toast.makeText(
+                context,
+                getString(R.string.quit_application),
+                Toast.LENGTH_LONG,
+            ).show()
+            Handler(Looper.getMainLooper()).postDelayed(
+                {
+                    exitProcess(0)
+                },
+                DEFAULT_EXIT_DELAY,
+            )
+            true
+        }
+
+        val svgEnabledPreference = requirePreference<SwitchPreference>(
+            R.string.pref_key_svg_enabled,
+        )
+
+        svgEnabledPreference.setOnPreferenceChangeListener { preference, svgEnabled ->
+            val settings = preference.context.settings()
+            val components = preference.context.components
+
+            settings.svgEnabled = svgEnabled as Boolean
+            components.core.engine.settings.svgEnabled = svgEnabled
+
+            Toast.makeText(
+                context,
+                getString(R.string.quit_application),
+                Toast.LENGTH_LONG,
+            ).show()
+            Handler(Looper.getMainLooper()).postDelayed(
+                {
+                    exitProcess(0)
+                },
+                DEFAULT_EXIT_DELAY,
+            )
+            true
+        }
+
+        val wasmEnabledPreference = requirePreference<SwitchPreference>(
+            R.string.pref_key_wasm_enabled,
+        )
+
+        wasmEnabledPreference.isChecked = IronFoxPreferences.isWebAssemblyEnabled(requireContext())
+        wasmEnabledPreference.setOnPreferenceChangeListener { preference, wasmEnabled ->
+            val settings = preference.context.settings()
+            val components = preference.context.components
+
+            settings.wasmEnabled = wasmEnabled as Boolean
+            components.core.engine.settings.wasmEnabled = wasmEnabled
+
+            true
+        }
+
+        val webglEnabledPreference = requirePreference<SwitchPreference>(
+            R.string.pref_key_webgl_enabled,
+        )
+
+        webglEnabledPreference.setOnPreferenceChangeListener { preference, webglEnabled ->
+            val settings = preference.context.settings()
+            val components = preference.context.components
+
+            settings.webglEnabled = webglEnabled as Boolean
+            components.core.engine.settings.webglEnabled = webglEnabled
+
+            true
+        }
+
+        val webrtcEnabledPreference = requirePreference<SwitchPreference>(
+            R.string.pref_key_webrtc_enabled,
+        )
+
+        webrtcEnabledPreference.setOnPreferenceChangeListener { preference, webrtcEnabled ->
+            val settings = preference.context.settings()
+            val components = preference.context.components
+
+            settings.webrtcEnabled = webrtcEnabled as Boolean
+            components.core.engine.settings.webrtcEnabled = webrtcEnabled
+
+            true
+        }
+
         setupPreferences()
     }
 
@@ -91,6 +240,12 @@ class SiteSettingsFragment : PreferenceFragmentCompat() {
             navigateToPhoneFeature(phoneFeature)
             true
         }
+
+        with(settings) {
+            findPreference<Preference>(
+                getPreferenceKey(R.string.pref_key_browser_feature_media_key_system_access),
+            )?.isVisible = emeEnabled
+        }
     }
 
     private fun navigateToPhoneFeature(phoneFeature: PhoneFeature) {
@@ -109,4 +264,8 @@ class SiteSettingsFragment : PreferenceFragmentCompat() {
             )
         }
     }
+
+    companion object {
+        private const val DEFAULT_EXIT_DELAY = 2000L
+    }
 }
diff --git a/mobile/android/fenix/app/src/main/res/xml/site_permissions_preferences.xml b/mobile/android/fenix/app/src/main/res/xml/site_permissions_preferences.xml
index ef1dcb4e6e..d6d542af65 100644
--- a/mobile/android/fenix/app/src/main/res/xml/site_permissions_preferences.xml
+++ b/mobile/android/fenix/app/src/main/res/xml/site_permissions_preferences.xml
@@ -25,6 +25,67 @@
             android:title="@string/preference_feature_desktop_mode_default"
             app:iconSpaceReserved="false" />
 
+        <SwitchPreference
+            android:icon="@drawable/mozac_ic_lock_24"
+            android:defaultValue="false"
+            android:key="@string/pref_key_cache_enabled"
+            android:title="@string/preference_cache_enabled"
+            app:iconSpaceReserved="false" />
+        
+        <SwitchPreference
+            android:icon="@drawable/mozac_ic_lock_24"
+            android:defaultValue="false"
+            android:dependency="@string/pref_key_cache_enabled"
+            android:key="@string/pref_key_cache_ssl_enabled"
+            android:title="@string/preference_cache_ssl_enabled"
+            app:iconSpaceReserved="false" />
+
+        <SwitchPreference
+            android:icon="@drawable/mozac_ic_lock_24"
+            android:defaultValue="true"
+            android:key="@string/pref_key_javascript_enabled"
+            android:title="@string/preference_javascript_enabled"
+            app:iconSpaceReserved="false" />
+
+        <SwitchPreference
+            android:icon="@drawable/mozac_ic_lock_24"
+            android:defaultValue="false"
+            android:dependency="@string/pref_key_javascript_enabled"
+            android:key="@string/pref_key_jit_enabled"
+            android:summary="@string/restart_required_summary"
+            android:title="@string/preference_jit_enabled"
+            app:iconSpaceReserved="false" />
+
+        <SwitchPreference
+            android:icon="@drawable/mozac_ic_lock_24"
+            android:defaultValue="true"
+            android:key="@string/pref_key_svg_enabled"
+            android:summary="@string/restart_required_summary"
+            android:title="@string/preference_svg_enabled"
+            app:iconSpaceReserved="false" />
+
+        <SwitchPreference
+            android:icon="@drawable/mozac_ic_lock_24"
+            android:defaultValue="true"
+            android:dependency="@string/pref_key_javascript_enabled"
+            android:key="@string/pref_key_wasm_enabled"
+            android:title="@string/preference_wasm_enabled"
+            app:iconSpaceReserved="false" />
+
+        <SwitchPreference
+            android:icon="@drawable/mozac_ic_lock_24"
+            android:defaultValue="true"
+            android:key="@string/pref_key_webgl_enabled"
+            android:title="@string/preference_webgl_enabled"
+            app:iconSpaceReserved="false" />
+
+        <SwitchPreference
+            android:icon="@drawable/mozac_ic_lock_24"
+            android:defaultValue="true"
+            android:key="@string/pref_key_webrtc_enabled"
+            android:title="@string/preference_webrtc_enabled"
+            app:iconSpaceReserved="false" />
+
     </androidx.preference.PreferenceCategory>
 
     <androidx.preference.PreferenceCategory
