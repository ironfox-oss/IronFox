diff --git a/mobile/android/android-components/components/browser/engine-gecko/src/main/java/mozilla/components/browser/engine/gecko/GeckoEngine.kt b/mobile/android/android-components/components/browser/engine-gecko/src/main/java/mozilla/components/browser/engine/gecko/GeckoEngine.kt
index 84ad70e3a4..fb09b88c62 100644
--- a/mobile/android/android-components/components/browser/engine-gecko/src/main/java/mozilla/components/browser/engine/gecko/GeckoEngine.kt
+++ b/mobile/android/android-components/components/browser/engine-gecko/src/main/java/mozilla/components/browser/engine/gecko/GeckoEngine.kt
@@ -1491,6 +1491,10 @@ class GeckoEngine(
             this.loginAutofillEnabled = it.loginAutofillEnabled
             this.enterpriseRootsEnabled = it.enterpriseRootsEnabled
             this.httpsOnlyMode = it.httpsOnlyMode
+            this.dohSettingsMode = it.dohSettingsMode
+            this.dohProviderUrl = it.dohProviderUrl
+            this.dohDefaultProviderUrl = it.dohDefaultProviderUrl
+            this.dohExceptionsList = it.dohExceptionsList
             this.cookieBannerHandlingMode = it.cookieBannerHandlingMode
             this.cookieBannerHandlingModePrivateBrowsing = it.cookieBannerHandlingModePrivateBrowsing
             this.cookieBannerHandlingDetectOnlyMode = it.cookieBannerHandlingDetectOnlyMode
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
index 3ab8ea1acd..79ec251ed8 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
@@ -163,6 +163,10 @@ class Core(
                 R.color.fx_mobile_layer_color_1,
             ),
             httpsOnlyMode = context.settings().getHttpsOnlyMode(),
+            dohSettingsMode = context.settings().getDohSettingsMode(),
+            dohProviderUrl = context.settings().dohProviderUrl,
+            dohDefaultProviderUrl = context.settings().dohDefaultProviderUrl,
+            dohExceptionsList = context.settings().dohExceptionsList.toList(),
             globalPrivacyControlEnabled = context.settings().shouldEnableGlobalPrivacyControl,
             fdlibmMathEnabled = FxNimbus.features.fingerprintingProtection.value().fdlibmMath,
             cookieBannerHandlingMode = context.settings().getCookieBannerHandling(),
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SecretSettingsFragment.kt
@@ -149,7 +149,7 @@
         }
 
         requirePreference<SwitchPreference>(R.string.pref_key_doh_settings_enabled).apply {
-            isVisible = Config.channel.isDebug
+            isVisible = true
             isChecked = context.settings().showDohEntryPoint
             onPreferenceChangeListener = SharedPreferenceUpdater()
         }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsFragment.kt
index b69e65f01b..7d4e77ee3e 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsFragment.kt
@@ -1,9 +1,9 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
 package org.mozilla.fenix.settings.doh
 
-import DohSettingsMiddleware
 import android.os.Bundle
 import android.view.LayoutInflater
 import android.view.View
@@ -17,6 +17,7 @@ import org.mozilla.fenix.components.StoreProvider
 import org.mozilla.fenix.databinding.FragmentDohSettingsBinding
 import org.mozilla.fenix.ext.components
 import org.mozilla.fenix.ext.hideToolbar
+import org.mozilla.fenix.ext.settings
 import org.mozilla.fenix.theme.FirefoxTheme
 
 /**
@@ -48,7 +49,8 @@ internal class DohSettingsFragment : Fragment() {
                         navController = this@DohSettingsFragment.findNavController(),
                         composeNavController = navController,
                         settingsProvider = DefaultDohSettingsProvider(
-                            requireContext().components.core.engine,
+                            engine = requireContext().components.core.engine,
+                            settings = requireContext().settings(),
                         ),
                         homeActivity = (requireActivity() as HomeActivity),
                     )
@@ -69,7 +71,8 @@ internal class DohSettingsFragment : Fragment() {
                     this.navController = this@DohSettingsFragment.findNavController()
                     this.composeNavController = navController
                     this.settingsProvider = DefaultDohSettingsProvider(
-                        requireContext().components.core.engine,
+                        engine = requireContext().components.core.engine,
+                        settings = requireContext().settings(),
                     )
                     this.homeActivity = (requireActivity() as HomeActivity)
                 }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsMiddleware.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsMiddleware.kt
index d7aa305e66..1355fbde13 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsMiddleware.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsMiddleware.kt
@@ -2,22 +2,13 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+package org.mozilla.fenix.settings.doh
+
 import androidx.navigation.NavController
 import mozilla.components.lib.state.Middleware
 import mozilla.components.lib.state.MiddlewareContext
 import org.mozilla.fenix.BrowserDirection
 import org.mozilla.fenix.HomeActivity
-import org.mozilla.fenix.settings.doh.BackClicked
-import org.mozilla.fenix.settings.doh.DohSettingsAction
-import org.mozilla.fenix.settings.doh.DohSettingsDestinations
-import org.mozilla.fenix.settings.doh.DohSettingsProvider
-import org.mozilla.fenix.settings.doh.DohSettingsRootAction
-import org.mozilla.fenix.settings.doh.DohSettingsState
-import org.mozilla.fenix.settings.doh.DohUrlValidator
-import org.mozilla.fenix.settings.doh.ExceptionsAction
-import org.mozilla.fenix.settings.doh.Init
-import org.mozilla.fenix.settings.doh.LearnMoreClicked
-import org.mozilla.fenix.settings.doh.UrlValidationException
 
 internal class DohSettingsMiddleware(
     private val getNavController: () -> NavController,
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsProvider.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsProvider.kt
index cd46b47680..e3defb2052 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsProvider.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsProvider.kt
@@ -6,6 +6,7 @@ package org.mozilla.fenix.settings.doh
 
 import androidx.annotation.VisibleForTesting
 import mozilla.components.concept.engine.Engine
+import org.mozilla.fenix.utils.Settings
 
 internal interface DohSettingsProvider {
     fun getProtectionLevels(): List<ProtectionLevel>
@@ -20,6 +21,7 @@ internal interface DohSettingsProvider {
 
 internal class DefaultDohSettingsProvider(
     val engine: Engine,
+    val settings: Settings,
 ) : DohSettingsProvider {
     override fun getProtectionLevels(): List<ProtectionLevel> {
         return listOf(
@@ -31,21 +33,96 @@ internal class DefaultDohSettingsProvider(
     }
 
     // Bug 1946867 - Load DoH Provider List from Gecko instead of hardcoding
-    private val dohDefaultProviderUrl = engine.settings.dohDefaultProviderUrl
+    private val dohDefaultProviderUrl = settings.dohDefaultProviderUrl
 
-    private val cloudflare = Provider.BuiltIn(
-        url = cloudflareUri,
-        name = "Cloudflare",
-        default = dohDefaultProviderUrl.isNullOrBlank() || dohDefaultProviderUrl == cloudflareUri,
+    private val quad9 = Provider.BuiltIn(
+        url = quad9Uri,
+        name = "Quad9",
+        default = dohDefaultProviderUrl.isNullOrBlank() || dohDefaultProviderUrl == quad9Uri,
+    )
+    private val dns0Zero = Provider.BuiltIn(
+        url = dns0ZeroUri,
+        name = "DNS0 (ZERO)",
+        default = dohDefaultProviderUrl == dns0ZeroUri,
+    )
+    private val dns0Standard = Provider.BuiltIn(
+        url = dns0StandardUri,
+        name = "DNS0",
+        default = dohDefaultProviderUrl == dns0StandardUri,
+    )
+    private val mullvadBase = Provider.BuiltIn(
+        url = mullvadBaseUri,
+        name = "Mullvad - Base",
+        default = dohDefaultProviderUrl == mullvadBaseUri,
+    )
+    private val adGuardStandard = Provider.BuiltIn(
+        url = adGuardStandardUri,
+        name = "AdGuard (Public)",
+        default = dohDefaultProviderUrl == adGuardStandardUri,
+    )
+    private val mullvadUnfiltered = Provider.BuiltIn(
+        url = mullvadUnfilteredUri,
+        name = "Mullvad - Unfiltered",
+        default = dohDefaultProviderUrl == mullvadUnfilteredUri,
+    )
+    private val wikimedia = Provider.BuiltIn(
+        url = wikimediaUri,
+        name = "Wikimedia - Unfiltered",
+        default = dohDefaultProviderUrl == wikimediaUri,
     )
     private val nextDns = Provider.BuiltIn(
         url = nextDnsUri,
-        name = "NextDNS",
+        name = "NextDNS (Public) - Unfiltered",
         default = dohDefaultProviderUrl == nextDnsUri,
     )
-    private val providerUrl = engine.settings.dohProviderUrl
+    private val adGuardUnfiltered = Provider.BuiltIn(
+        url = adGuardUnfilteredUri,
+        name = "AdGuard (Public) - Unfiltered",
+        default = dohDefaultProviderUrl == adGuardUnfilteredUri,
+    )
+    private val dns0Kids = Provider.BuiltIn(
+        url = dns0KidsUri,
+        name = "DNS0 - Kids",
+        default = dohDefaultProviderUrl == dns0KidsUri,
+    )
+    private val mullvadFamily = Provider.BuiltIn(
+        url = mullvadFamilyUri,
+        name = "Mullvad - Family",
+        default = dohDefaultProviderUrl == mullvadFamilyUri,
+    )
+    private val adGuardFamily = Provider.BuiltIn(
+        url = adGuardFamilyUri,
+        name = "AdGuard (Public) - Family",
+        default = dohDefaultProviderUrl == adGuardFamilyUri,
+    )
+    private val mullvadExtended = Provider.BuiltIn(
+        url = mullvadExtendedUri,
+        name = "Mullvad - Extended",
+        default = dohDefaultProviderUrl == mullvadExtendedUri,
+    )
+    private val mullvadAll = Provider.BuiltIn(
+        url = mullvadAllUri,
+        name = "Mullvad - All",
+        default = dohDefaultProviderUrl == mullvadAllUri,
+    )
+    private val cloudflareMalware = Provider.BuiltIn(
+        url = cloudflareMalwareUri,
+        name = "Cloudflare - Malware Protection",
+        default = dohDefaultProviderUrl == cloudflareMalwareUri,
+    )
+    private val cloudflareMozilla = Provider.BuiltIn(
+        url = cloudflareMozillaUri,
+        name = "Cloudflare - Unfiltered",
+        default = dohDefaultProviderUrl == cloudflareMozillaUri,
+    )
+    private val cloudflareFamily = Provider.BuiltIn(
+        url = cloudflareFamilyUri,
+        name = "Cloudflare - Family",
+        default = dohDefaultProviderUrl == cloudflareFamilyUri,
+    )
+    private val providerUrl = settings.dohProviderUrl
     private val custom = Provider.Custom(
-        url = if (providerUrl != cloudflareUri && providerUrl != nextDnsUri) {
+        url = if (providerUrl != quad9Uri && providerUrl != dns0ZeroUri && providerUrl != dns0StandardUri && providerUrl != mullvadBaseUri && providerUrl != adGuardStandardUri && providerUrl != mullvadUnfilteredUri && providerUrl != wikimediaUri && providerUrl != nextDnsUri && providerUrl != adGuardUnfilteredUri && providerUrl != dns0KidsUri && providerUrl != mullvadFamilyUri && providerUrl != adGuardFamilyUri && providerUrl != mullvadExtendedUri && providerUrl != mullvadAllUri && providerUrl != cloudflareMalwareUri && providerUrl != cloudflareMozillaUri && providerUrl != cloudflareFamilyUri) {
             providerUrl
         } else {
             ""
@@ -53,13 +130,28 @@ internal class DefaultDohSettingsProvider(
     )
 
     override fun getDefaultProviders(): List<Provider> = listOf(
-        cloudflare,
+        quad9,
+        dns0Zero,
+        dns0Standard,
+        mullvadBase,
+        adGuardStandard,
+        mullvadUnfiltered,
+        wikimedia,
         nextDns,
+        adGuardUnfiltered,
+        dns0Kids,
+        mullvadFamily,
+        adGuardFamily,
+        mullvadExtended,
+        mullvadAll,
+        cloudflareMalware,
+        cloudflareMozilla,
+        cloudflareFamily,
         custom,
     )
 
     override fun getSelectedProtectionLevel(): ProtectionLevel {
-        return when (engine.settings.dohSettingsMode) {
+        return when (settings.getDohSettingsMode()) {
             Engine.DohSettingsMode.DEFAULT -> ProtectionLevel.Default
             Engine.DohSettingsMode.INCREASED -> ProtectionLevel.Increased
             Engine.DohSettingsMode.MAX -> ProtectionLevel.Max
@@ -68,15 +160,30 @@ internal class DefaultDohSettingsProvider(
     }
 
     override fun getSelectedProvider(): Provider? {
-        return when (engine.settings.dohSettingsMode) {
+        return when (settings.getDohSettingsMode()) {
             Engine.DohSettingsMode.OFF, Engine.DohSettingsMode.DEFAULT -> {
                 null
             }
 
             else -> {
-                when (engine.settings.dohProviderUrl) {
-                    cloudflareUri -> cloudflare
+                when (settings.dohProviderUrl) {
+                    quad9Uri -> quad9
+                    dns0ZeroUri -> dns0Zero
+                    dns0StandardUri -> dns0Standard
+                    mullvadBaseUri -> mullvadBase
+                    adGuardStandardUri -> adGuardStandard
+                    mullvadUnfilteredUri -> mullvadUnfiltered
+                    wikimediaUri -> wikimedia
                     nextDnsUri -> nextDns
+                    adGuardUnfilteredUri -> adGuardUnfiltered
+                    dns0KidsUri -> dns0Kids
+                    mullvadFamilyUri -> mullvadFamily
+                    adGuardFamilyUri -> adGuardFamily
+                    mullvadExtendedUri -> mullvadExtended
+                    mullvadAllUri -> mullvadAll
+                    cloudflareMalwareUri -> cloudflareMalware
+                    cloudflareMozillaUri -> cloudflareMozilla
+                    cloudflareFamilyUri -> cloudflareFamily
                     "" -> getDefaultProviders().first()
                     else -> custom
                 }
@@ -84,42 +191,87 @@ internal class DefaultDohSettingsProvider(
         }
     }
 
+
     override fun getExceptions(): List<String> {
-        return engine.settings.dohExceptionsList
+        return settings.dohExceptionsList.toList()
     }
 
     override fun setProtectionLevel(protectionLevel: ProtectionLevel, provider: Provider?) {
-        engine.settings.dohSettingsMode = when (protectionLevel) {
-            is ProtectionLevel.Off -> Engine.DohSettingsMode.OFF
-            is ProtectionLevel.Default -> Engine.DohSettingsMode.DEFAULT
-            is ProtectionLevel.Increased -> {
-                require(provider != null) { "Provider must not be null for Increased protection level" }
-                engine.settings.dohProviderUrl = provider.url
-                Engine.DohSettingsMode.INCREASED
-            }
-
-            is ProtectionLevel.Max -> {
-                require(provider != null) { "Provider must not be null for Max protection level" }
-                engine.settings.dohProviderUrl = provider.url
-                Engine.DohSettingsMode.MAX
-            }
+        if (protectionLevel is ProtectionLevel.Increased || protectionLevel is ProtectionLevel.Max) {
+            requireNotNull(provider) { "Provider must not be null for Increased/Max protection level" }
+            settings.dohProviderUrl = provider.url
+            engine.settings.dohProviderUrl = provider.url
         }
+
+        val newMode = protectionLevel.toDohSettingsMode()
+        // Update the app layer
+        settings.setDohSettingsMode(newMode)
+        engine.settings.dohSettingsMode = newMode
     }
 
     override fun setCustomProvider(url: String) {
+        // Update the app layer
+        settings.dohProviderUrl = url
         // validate the url, maybe throw some "known expectations" that we can handle in the middleware
         engine.settings.dohProviderUrl = url
     }
 
     override fun setExceptions(exceptions: List<String>) {
+        // Update the app layer
+        settings.dohExceptionsList = exceptions.toSet()
         engine.settings.dohExceptionsList = exceptions
     }
 
     companion object {
         @VisibleForTesting
-        val cloudflareUri = "mozilla.cloudflare-dns.com"
+        val quad9Uri = "https://dns.quad9.net/dns-query"
+
+        @VisibleForTesting
+        val dns0ZeroUri = "https://zero.dns0.eu"
+
+        @VisibleForTesting
+        val dns0StandardUri = "https://dns0.eu"
+
+        @VisibleForTesting
+        val mullvadBaseUri = "https://base.dns.mullvad.net/dns-query"
+
+        @VisibleForTesting
+        val adGuardStandardUri = "https://dns.adguard-dns.com/dns-query"
+
+        @VisibleForTesting
+        val mullvadUnfilteredUri = "https://dns.mullvad.net/dns-query"
+
+        @VisibleForTesting
+        val wikimediaUri = "https://wikimedia-dns.org/dns-query"
+
+        @VisibleForTesting
+        val nextDnsUri = "https://firefox.dns.nextdns.io/"
+
+        @VisibleForTesting
+        val adGuardUnfilteredUri = "https://unfiltered.adguard-dns.com/dns-query"
+
+        @VisibleForTesting
+        val dns0KidsUri = "https://kids.dns0.eu"
+
+        @VisibleForTesting
+        val mullvadFamilyUri = "https://family.dns.mullvad.net/dns-query"
+
+        @VisibleForTesting
+        val adGuardFamilyUri = "https://family.adguard-dns.com/dns-query"
+
+        @VisibleForTesting
+        val mullvadExtendedUri = "https://extended.dns.mullvad.net/dns-query"
+
+        @VisibleForTesting
+        val mullvadAllUri = "https://all.dns.mullvad.net/dns-query"
+
+        @VisibleForTesting
+        val cloudflareMalwareUri = "https://security.cloudflare-dns.com/dns-query"
+
+        @VisibleForTesting
+        val cloudflareMozillaUri = "https://mozilla.cloudflare-dns.com/dns-query"
 
         @VisibleForTesting
-        val nextDnsUri = "firefox.dns.nextdns.io"
+        val cloudflareFamilyUri = "https://family.cloudflare-dns.com/dns-query"
     }
 }
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsReducer.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsReducer.kt
index fcf0d2b934..23b28cf3c4 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsReducer.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsReducer.kt
@@ -2,12 +2,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-import org.mozilla.fenix.settings.doh.CustomProviderErrorState
-import org.mozilla.fenix.settings.doh.DohSettingsAction
-import org.mozilla.fenix.settings.doh.DohSettingsRootAction
-import org.mozilla.fenix.settings.doh.DohSettingsState
-import org.mozilla.fenix.settings.doh.ExceptionsAction
-import org.mozilla.fenix.settings.doh.ProtectionLevel
+package org.mozilla.fenix.settings.doh
 
 internal fun dohSettingsReducer(state: DohSettingsState, action: DohSettingsAction) =
     when (action) {
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsState.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsState.kt
index ab63438398..b0799fe4d8 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsState.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsState.kt
@@ -4,6 +4,7 @@
 
 package org.mozilla.fenix.settings.doh
 
+import mozilla.components.concept.engine.Engine
 import mozilla.components.lib.state.State
 
 /**
@@ -33,10 +34,23 @@ internal data class DohSettingsState(
  * Represents the protection level for DoH settings.
  */
 internal sealed class ProtectionLevel {
-    data object Default : ProtectionLevel()
-    data object Increased : ProtectionLevel()
-    data object Max : ProtectionLevel()
-    data object Off : ProtectionLevel()
+    abstract fun toDohSettingsMode(): Engine.DohSettingsMode
+
+    data object Default : ProtectionLevel() {
+        override fun toDohSettingsMode() = Engine.DohSettingsMode.DEFAULT
+    }
+
+    data object Increased : ProtectionLevel() {
+        override fun toDohSettingsMode() = Engine.DohSettingsMode.INCREASED
+    }
+
+    data object Max : ProtectionLevel() {
+        override fun toDohSettingsMode() = Engine.DohSettingsMode.MAX
+    }
+
+    data object Off : ProtectionLevel() {
+        override fun toDohSettingsMode() = Engine.DohSettingsMode.OFF
+    }
 }
 
 internal sealed class Provider {
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsStore.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsStore.kt
index 0c01638868..84611f7366 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsStore.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohSettingsStore.kt
@@ -5,7 +5,6 @@
 package org.mozilla.fenix.settings.doh
 
 import androidx.navigation.NavController
-import dohSettingsReducer
 import mozilla.components.lib.state.Middleware
 import mozilla.components.lib.state.Reducer
 import mozilla.components.lib.state.UiStore
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohUrlValidator.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohUrlValidator.kt
index c9497e449a..f31e0423bc 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohUrlValidator.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/DohUrlValidator.kt
@@ -28,7 +28,7 @@ object DohUrlValidator {
             throw UrlValidationException.NonHttpsUrlException
         }
         return try {
-            val uri = URI.create(url)
+            val uri = URI.create(url.trim())
             when {
                 uri.scheme != "https" -> throw UrlValidationException.NonHttpsUrlException
                 uri.host.isNullOrBlank() || !uri.isAbsolute -> throw UrlValidationException.InvalidUrlException
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/root/DohSettingsScreen.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/root/DohSettingsScreen.kt
index c53fbcbc29..eb52fd245c 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/root/DohSettingsScreen.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/doh/root/DohSettingsScreen.kt
@@ -14,6 +14,8 @@ import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.layout.width
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.verticalScroll
 import androidx.compose.material.AlertDialog
 import androidx.compose.material.Icon
 import androidx.compose.material.IconButton
@@ -89,6 +91,7 @@ internal fun DohSettingsScreen(
         Column(
             modifier = Modifier
                 .fillMaxSize()
+                .verticalScroll(rememberScrollState())
                 .padding(paddingValues),
         ) {
             DohSummary(
@@ -587,8 +590,8 @@ private fun ExceptionsRow(onExceptionsClicked: () -> Unit) {
 private fun DohScreenDefaultProviderPreview() {
     FirefoxTheme {
         val provider = Provider.BuiltIn(
-            url = "mozilla.cloudflare-dns.com",
-            name = "Cloudflare",
+            url = "https://dns.quad9.net/dns-query",
+            name = "Quad9",
             default = true,
         )
         DohSettingsScreen(
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index b800c22431..3fdd8f2d4a 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -13,8 +13,10 @@ import android.os.Build
 import android.view.accessibility.AccessibilityManager
 import androidx.annotation.VisibleForTesting
 import androidx.annotation.VisibleForTesting.Companion.PRIVATE
+import androidx.core.content.edit
 import androidx.lifecycle.LifecycleOwner
 import mozilla.components.browser.state.search.SearchEngine
+import mozilla.components.concept.engine.Engine
 import mozilla.components.concept.engine.Engine.HttpsOnlyMode
 import mozilla.components.concept.engine.EngineSession.CookieBannerHandlingMode
 import mozilla.components.feature.sitepermissions.SitePermissionsRules
@@ -136,6 +138,31 @@ class Settings(private val appContext: Context) : PreferencesHolder {
             ASK_TO_ALLOW_INT -> AutoplayAction.BLOCKED
             else -> throw InvalidParameterException("$this is not a valid SitePermissionsRules.AutoplayAction")
         }
+
+        /**
+         * DoH setting is set to "Default", corresponds to TRR_MODE_OFF (0) from GeckoView
+         */
+        private const val DOH_SETTINGS_DEFAULT = 0
+
+        /**
+         * DoH setting is set to "Increased", corresponds to TRR_MODE_FIRST (2) from GeckoView
+         */
+        private const val DOH_SETTINGS_INCREASED = 2
+
+        /**
+         * DoH setting is set to "Max", corresponds to TRR_MODE_ONLY (3) from GeckoView
+         */
+        private const val DOH_SETTINGS_MAX = 3
+
+        /**
+         * DoH is disabled, corresponds to TRR_MODE_DISABLED (5) from GeckoView
+         */
+        private const val DOH_SETTINGS_OFF = 5
+
+        /**
+         * Bug 1946867 - Currently "hardcoded" to the DoH TRR URI of Quad9
+         */
+        private const val QUAD9_URI = "https://dns.quad9.net/dns-query"
     }
 
     @VisibleForTesting
@@ -2306,6 +2333,69 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      */
     val showDohEntryPoint by booleanPreference(
         key = appContext.getPreferenceKey(R.string.pref_key_doh_settings_enabled),
-        default = false,
+        default = true,
+    )
+
+    /**
+     * Stores the current DoH mode as an integer preference.
+     * - 0: Default mode
+     * - 2: Increased protection
+     * - 3: Maximum protection
+     * - 5: DoH is disabled
+     */
+    private var trrMode by intPreference(
+        key = appContext.getPreferenceKey(R.string.pref_key_doh_settings_mode),
+        default = DOH_SETTINGS_MAX,
+    )
+
+    /**
+     * Stores the URI of the custom DoH provider selected by the user.
+     * Defaults to an empty string if no provider is set.
+     */
+    var dohProviderUrl by stringPreference(
+        key = appContext.getPreferenceKey(R.string.pref_key_doh_provider_uri),
+        default = "",
+    )
+
+    /**
+     * Stores the URI of the default DoH provider.
+     * Bug 1946867 - Currently "hardcoded" to "https://mozilla.cloudflare-dns.com/dns-query"
+     */
+    val dohDefaultProviderUrl by stringPreference(
+        key = appContext.getPreferenceKey(R.string.pref_key_doh_default_provider_uri),
+        default = QUAD9_URI,
+    )
+
+    /**
+     * Stores a set of domains that are excluded from using DNS over HTTPS.
+     */
+    var dohExceptionsList by stringSetPreference(
+        key = appContext.getPreferenceKey(R.string.pref_key_doh_exceptions_list_string),
+        default = emptySet(),
     )
+
+    /**
+     * Retrieves the current DohSettingsMode based on trrMode
+     */
+    fun getDohSettingsMode(): Engine.DohSettingsMode {
+        return when (trrMode) {
+            DOH_SETTINGS_DEFAULT -> Engine.DohSettingsMode.DEFAULT
+            DOH_SETTINGS_INCREASED -> Engine.DohSettingsMode.INCREASED
+            DOH_SETTINGS_MAX -> Engine.DohSettingsMode.MAX
+            DOH_SETTINGS_OFF -> Engine.DohSettingsMode.OFF
+            else -> Engine.DohSettingsMode.DEFAULT
+        }
+    }
+
+    /**
+     * Updates trrMode by converting the given DohSettingsMode
+     */
+    fun setDohSettingsMode(mode: Engine.DohSettingsMode) {
+        trrMode = when (mode) {
+            Engine.DohSettingsMode.DEFAULT -> DOH_SETTINGS_DEFAULT
+            Engine.DohSettingsMode.INCREASED -> DOH_SETTINGS_INCREASED
+            Engine.DohSettingsMode.MAX -> DOH_SETTINGS_MAX
+            Engine.DohSettingsMode.OFF -> DOH_SETTINGS_OFF
+        }
+    }
 }
diff --git a/mobile/android/fenix/app/src/main/res/values/preference_keys.xml b/mobile/android/fenix/app/src/main/res/values/preference_keys.xml
index a1993c808f..bea6417843 100644
--- a/mobile/android/fenix/app/src/main/res/values/preference_keys.xml
+++ b/mobile/android/fenix/app/src/main/res/values/preference_keys.xml
@@ -199,6 +199,10 @@
 
     <!-- DNS Over HTTPS Settings -->
     <string name="pref_key_doh_settings" translatable="false">pref_key_doh_settings</string>
+    <string name="pref_key_doh_settings_mode" translatable="false">pref_key_doh_settings_mode</string>
+    <string name="pref_key_doh_provider_uri" translatable="false">pref_key_doh_provider_uri</string>
+    <string name="pref_key_doh_default_provider_uri" translatable="false">pref_key_doh_default_provider_uri</string>
+    <string name="pref_key_doh_exceptions_list_string" translatable="false">pref_key_doh_exceptions_list_string</string>
 
     <!-- Tracking Protection Settings -->
     <string name="pref_key_etp_learn_more" translatable="false">pref_key_etp_learn_more</string>
diff --git a/mobile/android/fenix/app/src/main/res/xml/preferences.xml b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
--- a/mobile/android/fenix/app/src/main/res/xml/preferences.xml
+++ b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
@@ -112,7 +112,7 @@
         <androidx.preference.Preference
             android:key="@string/pref_key_doh_settings"
             app:iconSpaceReserved="false"
-            app:isPreferenceVisible="false"
+            app:isPreferenceVisible="true"
             android:title="@string/preference_doh_title" />
 
         <org.mozilla.fenix.settings.cookiebannerhandling.CustomCBHSwitchPreference
