diff --git a/mobile/android/android-components/components/browser/engine-gecko/src/main/java/mozilla/components/browser/engine/gecko/GeckoEngine.kt b/mobile/android/android-components/components/browser/engine-gecko/src/main/java/mozilla/components/browser/engine/gecko/GeckoEngine.kt
index 1612c570be..ee7992f43c 100644
--- a/mobile/android/android-components/components/browser/engine-gecko/src/main/java/mozilla/components/browser/engine/gecko/GeckoEngine.kt
+++ b/mobile/android/android-components/components/browser/engine-gecko/src/main/java/mozilla/components/browser/engine/gecko/GeckoEngine.kt
@@ -1112,6 +1112,22 @@ class GeckoEngine(
                 runtime.settings.contentBlocking.setSafeBrowsing(policy)
                 field = value
             }
+        
+        override var safeBrowsingEnabled: Boolean
+            get() = runtime.settings.safeBrowsingEnabled
+            set(value) {
+                value.let {
+                    runtime.settings.safeBrowsingEnabled = it
+                }
+            }
+        
+        override var safeBrowsingPhishingEnabled: Boolean
+            get() = runtime.settings.safeBrowsingPhishingEnabled
+            set(value) {
+                value.let {
+                    runtime.settings.safeBrowsingPhishingEnabled = it
+                }
+            }
 
         override var trackingProtectionPolicy: TrackingProtectionPolicy? = null
             set(value) {
@@ -1491,6 +1507,8 @@ class GeckoEngine(
             this.automaticLanguageAdjustment = it.automaticLanguageAdjustment
             this.trackingProtectionPolicy = it.trackingProtectionPolicy
             this.safeBrowsingPolicy = arrayOf(SafeBrowsingPolicy.RECOMMENDED)
+            this.safeBrowsingEnabled = it.safeBrowsingEnabled
+            this.safeBrowsingPhishingEnabled = it.safeBrowsingPhishingEnabled
             this.remoteDebuggingEnabled = it.remoteDebuggingEnabled
             this.testingModeEnabled = it.testingModeEnabled
             this.userAgentString = it.userAgentString
diff --git a/mobile/android/android-components/components/concept/engine/src/main/java/mozilla/components/concept/engine/Settings.kt b/mobile/android/android-components/components/concept/engine/src/main/java/mozilla/components/concept/engine/Settings.kt
index 24e8f76532..1e5fe8f3d3 100644
--- a/mobile/android/android-components/components/concept/engine/src/main/java/mozilla/components/concept/engine/Settings.kt
+++ b/mobile/android/android-components/components/concept/engine/src/main/java/mozilla/components/concept/engine/Settings.kt
@@ -66,6 +66,16 @@ abstract class Settings {
      */
     open var safeBrowsingPolicy: Array<SafeBrowsingPolicy> by UnsupportedSetting()
 
+    /**
+     * Setting to control Safe Browsing (for malware).
+     */
+    open var safeBrowsingEnabled: Boolean by UnsupportedSetting()
+
+    /**
+     * Setting to control Safe Browsing (for phishing).
+     */
+    open var safeBrowsingPhishingEnabled: Boolean by UnsupportedSetting()
+
     /**
      * Setting to control the cookie banner handling feature detect only mode.
      */
@@ -400,6 +410,8 @@ data class DefaultSettings(
     override var cookieBannerHandlingMode: CookieBannerHandlingMode = CookieBannerHandlingMode.DISABLED,
     override var cookieBannerHandlingModePrivateBrowsing: CookieBannerHandlingMode =
         CookieBannerHandlingMode.DISABLED,
+    override var safeBrowsingEnabled: Boolean = true,
+    override var safeBrowsingPhishingEnabled: Boolean = true,
     override var cookieBannerHandlingDetectOnlyMode: Boolean = false,
     override var cookieBannerHandlingGlobalRules: Boolean = false,
     override var cookieBannerHandlingGlobalRulesSubFrames: Boolean = false,
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
index cfbdaba62c..04c57c624e 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/components/Core.kt
@@ -181,6 +181,8 @@ class Core(
             fdlibmMathEnabled = FxNimbus.features.fingerprintingProtection.value().fdlibmMath,
             cookieBannerHandlingMode = context.settings().getCookieBannerHandling(),
             cookieBannerHandlingModePrivateBrowsing = context.settings().getCookieBannerHandlingPrivateMode(),
+            safeBrowsingEnabled = context.settings().safeBrowsingEnabled,
+            safeBrowsingPhishingEnabled = context.settings().safeBrowsingEnabled,
             cookieBannerHandlingDetectOnlyMode = context.settings().shouldEnableCookieBannerDetectOnly,
             cookieBannerHandlingGlobalRules = context.settings().shouldEnableCookieBannerGlobalRules,
             cookieBannerHandlingGlobalRulesSubFrames = context.settings().shouldEnableCookieBannerGlobalRulesSubFrame,
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt
index 325e5d2141..832d740660 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt
@@ -563,6 +563,7 @@ class SettingsFragment : PreferenceFragmentCompat() {
                 (requireContext().components.core.engine.profiler?.isProfilerActive() != null)
         }
         setupCookieBannerPreference()
+        setupSafeBrowsingPreference()
         setupInstallAddonFromFilePreference(requireContext().settings())
         setLinkSharingPreference()
         setupAmoCollectionOverridePreference(requireContext().settings())
@@ -741,6 +742,36 @@ class SettingsFragment : PreferenceFragmentCompat() {
         }
     }
 
+    @VisibleForTesting
+    internal fun setupSafeBrowsingPreference() {
+        val safeBrowsingEnabledPreference = requirePreference<SwitchPreference>(
+            R.string.pref_key_safe_browsing_enabled,
+        )
+
+        safeBrowsingEnabledPreference.setOnPreferenceChangeListener<Boolean> { preference, safeBrowsingEnabled ->
+            val settings = preference.context.settings()
+            val components = preference.context.components
+
+            settings.safeBrowsingEnabled = safeBrowsingEnabled
+            
+            components.core.engine.settings.safeBrowsingEnabled = safeBrowsingEnabled
+            components.core.engine.settings.safeBrowsingPhishingEnabled = safeBrowsingEnabled
+
+            Toast.makeText(
+                context,
+                getString(R.string.quit_application),
+                Toast.LENGTH_LONG,
+            ).show()
+            Handler(Looper.getMainLooper()).postDelayed(
+                {
+                    exitProcess(0)
+                },
+                FXA_SYNC_OVERRIDE_EXIT_DELAY,
+            )
+            true
+        }
+    }
+
     @VisibleForTesting
     internal fun setupInstallAddonFromFilePreference(settings: Settings) {
         with(requirePreference<Preference>(R.string.pref_key_install_local_addon)) {
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 7f19ba4304..cbfa894b4b 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -776,6 +776,11 @@ class Settings(private val appContext: Context) : PreferencesHolder {
     val queryParameterStrippingStripList: String
         get() = queryParameterStrippingSection[QUERY_PARAMETER_STRIPPING_STRIP_LIST].orEmpty()
 
+    var safeBrowsingEnabled by booleanPreference(
+        appContext.getPreferenceKey(R.string.pref_key_safe_browsing_enabled),
+        default = true,
+    )
+
     /**
      * Declared as a function for performance purposes. This could be declared as a variable using
      * booleanPreference like other members of this class. However, doing so will make it so it will
diff --git a/mobile/android/fenix/app/src/main/res/values/preference_keys.xml b/mobile/android/fenix/app/src/main/res/values/preference_keys.xml
index a55bf0589b..5f0a075ef6 100644
--- a/mobile/android/fenix/app/src/main/res/values/preference_keys.xml
+++ b/mobile/android/fenix/app/src/main/res/values/preference_keys.xml
@@ -220,6 +220,9 @@
     <string name="pref_key_tracking_protection_suspected_fingerprinters" translatable="false">pref_key_tracking_protection_suspected_fingerprinters</string>
     <string name="pref_key_tracking_protection_suspected_fingerprinters_select" translatable="false">pref_key_tracking_protection_suspected_fingerprinters_select</string>
 
+    <!-- Safe Browsing -->
+    <string name="pref_key_safe_browsing_enabled" translatable="false">pref_key_safe_browsing_enabled</string>
+
     <!-- Logins Settings -->
     <string name="pref_key_save_logins_settings" translatable="false">pref_key_save_logins_settings</string>
     <string name="pref_key_save_logins" translatable="false">pref_key_save_logins</string>
diff --git a/mobile/android/fenix/app/src/main/res/xml/preferences.xml b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
index 4c6b14bf87..47c904b384 100644
--- a/mobile/android/fenix/app/src/main/res/xml/preferences.xml
+++ b/mobile/android/fenix/app/src/main/res/xml/preferences.xml
@@ -115,6 +115,13 @@
             app:iconSpaceReserved="false"
             app:isPreferenceVisible="false"
             android:title="@string/preferences_cookie_banner_reduction_private_mode" />
+        
+        <androidx.preference.SwitchPreference
+            android:defaultValue="true"
+            android:key="@string/pref_key_safe_browsing_enabled"
+            android:summary="@string/restart_required_summary"
+            app:iconSpaceReserved="false"
+            android:title="@string/preference_safe_browsing_enabled" />
 
         <androidx.preference.Preference
             android:key="@string/pref_key_tracking_protection_settings"
diff --git a/mobile/android/geckoview/api.txt b/mobile/android/geckoview/api.txt
index a410550e60..32c79bbe3c 100644
--- a/mobile/android/geckoview/api.txt
+++ b/mobile/android/geckoview/api.txt
@@ -931,6 +931,8 @@ package org.mozilla.geckoview {
     method @Nullable public String getConfigFilePath();
     method public boolean getConsoleOutputEnabled();
     method @NonNull public ContentBlocking.Settings getContentBlocking();
+    method public boolean getSafeBrowsingEnabled();
+    method public boolean getSafeBrowsingPhishingEnabled();
     method public boolean getCookieBehaviorOptInPartitioning();
     method public boolean getCookieBehaviorOptInPartitioningPBM();
     method @Nullable public Class<? extends android.app.Service> getCrashHandler();
@@ -990,6 +992,8 @@ package org.mozilla.geckoview {
     method @NonNull public GeckoRuntimeSettings setBannedPorts(@NonNull String);
     method @NonNull public GeckoRuntimeSettings setCertificateTransparencyMode(int);
     method @NonNull public GeckoRuntimeSettings setConsoleOutputEnabled(boolean);
+    method @NonNull public GeckoRuntimeSettings setSafeBrowsingEnabled(boolean);
+    method @NonNull public GeckoRuntimeSettings setSafeBrowsingPhishingEnabled(boolean);
     method @NonNull public GeckoRuntimeSettings setCookieBehaviorOptInPartitioning(boolean);
     method @NonNull public GeckoRuntimeSettings setCookieBehaviorOptInPartitioningPBM(boolean);
     method @NonNull public GeckoRuntimeSettings setDefaultRecursiveResolverUri(@NonNull String);
@@ -1055,6 +1059,8 @@ package org.mozilla.geckoview {
     method @NonNull public GeckoRuntimeSettings.Builder configFilePath(@Nullable String);
     method @NonNull public GeckoRuntimeSettings.Builder consoleOutput(boolean);
     method @NonNull public GeckoRuntimeSettings.Builder contentBlocking(@NonNull ContentBlocking.Settings);
+    method @NonNull public GeckoRuntimeSettings.Builder safeBrowsingEnabled(boolean);
+    method @NonNull public GeckoRuntimeSettings.Builder safeBrowsingPhishingEnabled(boolean);
     method @NonNull public GeckoRuntimeSettings.Builder crashHandler(@Nullable Class<? extends android.app.Service>);
     method @NonNull public GeckoRuntimeSettings.Builder debugLogging(boolean);
     method @NonNull public GeckoRuntimeSettings.Builder defaultRecursiveResolverUri(@NonNull String);
diff --git a/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/GeckoRuntimeSettings.java b/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/GeckoRuntimeSettings.java
index 25ea09c3f6..a4c689a0d8 100644
--- a/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/GeckoRuntimeSettings.java
+++ b/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/GeckoRuntimeSettings.java
@@ -448,6 +448,28 @@ public final class GeckoRuntimeSettings extends RuntimeSettings {
       return this;
     }
 
+    /**
+     * Sets whether we should enable Safe Browsing (for malware).
+     *
+     * @param flag True if we should enable Safe Browsing (for malware), false otherwise.
+     * @return This Builder instance.
+     */
+    public @NonNull Builder safeBrowsingEnabled(final boolean flag) {
+      getSettings().mSafeBrowsingEnabled.set(flag);
+      return this;
+    }
+
+    /**
+     * Sets whether we should enable Safe Browsing (for phishing).
+     *
+     * @param flag True if we should enable Safe Browsing (for phishing), false otherwise.
+     * @return This Builder instance.
+     */
+    public @NonNull Builder safeBrowsingPhishingEnabled(final boolean flag) {
+      getSettings().mSafeBrowsingPhishingEnabled.set(flag);
+      return this;
+    }
+
     /**
      * Set whether auto-zoom to editable fields should be enabled.
      *
@@ -733,6 +755,8 @@ public final class GeckoRuntimeSettings extends RuntimeSettings {
       new Pref<Boolean>("network.fetchpriority.enabled", false);
   /* package */ final Pref<Boolean> mParallelMarkingEnabled =
       new Pref<Boolean>("javascript.options.mem.gc_parallel_marking", false);
+  /* package */ final Pref<Boolean> mSafeBrowsingEnabled = new Pref<>("browser.safebrowsing.malware.enabled", true);
+  /* package */ final Pref<Boolean> mSafeBrowsingPhishingEnabled = new Pref<>("browser.safebrowsing.phishing.enabled", true);
   /* package */ final Pref<Boolean> mCookieBehaviorOptInPartitioning =
       new Pref<Boolean>("network.cookie.cookieBehavior.optInPartitioning", false);
   /* package */ final Pref<Boolean> mCookieBehaviorOptInPartitioningPBM =
@@ -976,6 +1000,46 @@ public final class GeckoRuntimeSettings extends RuntimeSettings {
     return mFdlibmMathEnabled.get();
   }
 
+  /**
+   * Get whether we should enable Safe Browsing (for malware).
+   *
+   * @return Whether we should enable Safe Browsing (for malware).
+   */
+  public boolean getSafeBrowsingEnabled() {
+    return mSafeBrowsingEnabled.get();
+  }
+  
+  /**
+   * Set whether we should enable Safe Browsing (for malware).
+   *
+   * @param flag A flag determining whether we should enable Safe Browsing (for malware).
+   * @return This GeckoRuntimeSettings instance.
+   */
+  public @NonNull GeckoRuntimeSettings setSafeBrowsingEnabled(final boolean flag) {
+    mSafeBrowsingEnabled.commit(flag);
+    return this;
+  }
+
+  /**
+   * Get whether we should enable Safe Browsing (for phishing).
+   *
+   * @return Whether we should enable Safe Browsing (for phishing).
+   */
+  public boolean getSafeBrowsingPhishingEnabled() {
+    return mSafeBrowsingPhishingEnabled.get();
+  }
+  
+  /**
+   * Set whether we should enable Safe Browsing (for phishing).
+   *
+   * @param flag A flag determining whether we should enable Safe Browsing (for phishing).
+   * @return This GeckoRuntimeSettings instance.
+   */
+  public @NonNull GeckoRuntimeSettings setSafeBrowsingPhishingEnabled(final boolean flag) {
+    mSafeBrowsingPhishingEnabled.commit(flag);
+    return this;
+  }
+
   /**
    * Set the pref to control the cookie behavior opt-in partitioning.
    *
