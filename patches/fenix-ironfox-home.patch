diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
index a88ff8d3ac..5110c0706f 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
@@ -338,7 +338,7 @@ open class FenixApplication : LocaleAwareApplication(), Provider {
                         // we can prevent with this.
                         components.core.topSitesStorage.getTopSites(
                             totalSites = components.settings.topSitesMaxLimit,
-                            frecencyConfig = if (FxNimbus.features.homepageHideFrecentTopSites.value().enabled) {
+                            frecencyConfig = if (true) {
                                 null
                             } else {
                                 TopSitesFrecencyConfig(
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/home/topsites/TopSitesConfigCreator.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/home/topsites/TopSitesConfigCreator.kt
index 48b312d257..92b3b71f71 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/home/topsites/TopSitesConfigCreator.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/home/topsites/TopSitesConfigCreator.kt
@@ -36,7 +36,7 @@ internal fun getTopSitesConfig(
     return {
         TopSitesConfig(
             totalSites = settings.topSitesMaxLimit,
-            frecencyConfig = if (FxNimbus.features.homepageHideFrecentTopSites.value().enabled) {
+            frecencyConfig = if (true) {
                 null
             } else {
                 TopSitesFrecencyConfig(
diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 774d43efab..6cb43a7e3f 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -182,7 +182,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         } else {
             preferences.getBoolean(
                 appContext.getPreferenceKey(R.string.pref_key_customization_bookmarks),
-                homescreenSections[HomeScreenSection.BOOKMARKS] == true,
+                false,
             )
         }
 
@@ -195,7 +195,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         } else {
             preferences.getBoolean(
                 appContext.getPreferenceKey(R.string.pref_key_recent_tabs),
-                homescreenSections[HomeScreenSection.JUMP_BACK_IN] == true,
+                false,
             )
         }
         set(value) {
@@ -231,7 +231,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         } else {
             preferences.getBoolean(
                 appContext.getPreferenceKey(R.string.pref_key_history_metadata_feature),
-                homescreenSections[HomeScreenSection.RECENT_EXPLORATIONS] == true,
+                false,
             )
         }
         set(value) {
@@ -244,13 +244,13 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      * Indicates whether or not the "Synced Tabs" section should be shown on the home screen.
      */
     val showSyncedTabs: Boolean
-        get() = FxNimbus.features.homescreen.value().sectionsEnabled[HomeScreenSection.SYNCED_TABS] == true
+        get() = false
 
     /**
      * Indicates whether or not the "Collections" section should be shown on the home screen.
      */
     val collections: Boolean
-        get() = FxNimbus.features.homescreen.value().sectionsEnabled[HomeScreenSection.COLLECTIONS] == true
+        get() = false
 
     /**
      * Indicates whether or not top sites should be shown on the home screen.
@@ -261,7 +261,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
         } else {
             preferences.getBoolean(
                 appContext.getPreferenceKey(R.string.pref_key_show_top_sites),
-                homescreenSections[HomeScreenSection.TOP_SITES] == true,
+                true,
             )
         }
 
@@ -279,7 +279,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      */
     val overrideUserSpecifiedHomepageSections by lazyFeatureFlagPreference(
         appContext.getPreferenceKey(R.string.pref_key_override_user_specified_homepage_sections),
-        featureFlag = true,
+        featureFlag = false,
         default = { FxNimbus.features.overrideUserSpecifiedHomepageSections.value().enabled },
     )
 
@@ -472,7 +472,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
 
     var showCollectionsPlaceholderOnHome by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_show_collections_placeholder_home),
-        default = true,
+        default = false,
     )
 
     val isCrashReportingEnabled: Boolean
@@ -1255,7 +1255,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
 
     var defaultTopSitesAdded by booleanPreference(
         appContext.getPreferenceKey(R.string.default_top_sites_added),
-        default = false,
+        default = true,
     )
 
     var shouldShowSearchSuggestionsInPrivate by booleanPreference(
