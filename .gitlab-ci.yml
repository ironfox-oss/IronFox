stages:
  - build_fdroid
  - build_docker
  - build_apk

update-fdroid-repo:
  image: alpine:latest
  stage: build_fdroid
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    TARGET_REPO_PATH: ironfox-oss/fdroid
    TARGET_REPO_BRANCH: dev
    META_FILE: './fdroid/metadata/org.ironfoxoss.ironfox.yml'
    REPO_DIR: './fdroid/repo'
  before_script:
    - apk add --no-cache git curl openssh-client jq
    - git config --global user.email "ci@ironfoxoss.org"
    - git config --global user.name "IronFox CI"
  script:
    - git clone "https://oauth2:$GITLAB_CI_PUSH_TOKEN@gitlab.com/$TARGET_REPO_PATH.git" target-repo
    - cd target-repo
    - mkdir -p $REPO_DIR

    # Download all assets from the release
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_CI_API_TOKEN" \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/${CI_COMMIT_TAG}/assets/links" \
        | jq -c '.[] | select(.name | endswith(".apk"))' \
        | while read -r asset; do
          name=$(echo $asset | jq -r '.name')
          url=$(echo $asset | jq -r '.direct_asset_url')
          echo "Downloading $name from $url"
          curl -L --header "PRIVATE-TOKEN: $GITLAB_CI_API_TOKEN" "$url" -o "$REPO_DIR/$name"
        done

    - |
      IFS=":" read vercode vername << EOF
      $($CI_PROJECT_DIR/scripts/get_latest_version.py $(find "$REPO_DIR" -name "*.apk"))
      EOF
      sed -i \
        -e "s/CurrentVersion: .*/CurrentVersion: \"$vername\"/" \
        -e "s/CurrentVersionCode: .*/CurrentVersionCode: $vercode/" $META_FILE

    - git add $REPO_DIR $META_FILE
    - 'git commit -m "feat: update for release ${CI_COMMIT_TAG}"'
    - git push origin HEAD:$TARGET_REPO_BRANCH

build-docker:
  image: docker:cli
  stage: build_docker
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
      changes:
        - Dockerfile

build-apk:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  stage: build_apk
  needs:
    - job: "build-docker"
      optional: true
  tags:
    - saas-linux-xlarge-amd64
  parallel:
    matrix:
      - VERSION_NAME: "134.0"
        VERSION_CODE: ["31340100", "31340120"]
  variables:
    # The name of this variable must match with the one in scripts/prebuild.sh
    SB_GAPI_KEY_FILE: /opt/IronFox/sb-gapi.data
  before_script:
    - mkdir -p $(dirname "$SB_GAPI_KEY_FILE") && echo "$SB_GAPI_KEY" > "$SB_GAPI_KEY_FILE"
    - |
      bash -c "\

      # See Dockerfile
      source /opt/env_docker.sh

      # Set ANDROID_NDK
      echo "export ANDROID_NDK=$ANDROID_HOME/ndk/27.2.12479018" >> scripts/env_local.sh
      [ -d "$ANDROID_NDK" ] || { echo "ANDROID_NDK($ANDROID_NDK) does not exist!"; exit 1; };

      # Get sources
      ./scripts/get_sources.sh

      # Update environment variables
      source scripts/env_local.sh

      # Patch source
      ./scripts/prebuild.sh "$VERSION_NAME" "$VERSION_CODE"
      "
  script:
    - |
      # Update environment variables
      source scripts/env_local.sh

      # Build
      bash scripts/build.sh
  artifacts:
    untracked: false
    when: on_success
    access: all
    expire_in: "30 days"
    paths:
      - gecko/mobile/android/fenix/app/build/outputs/apk/fenix/release/*.apk