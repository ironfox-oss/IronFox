.build_setup_steps: &build_setup_steps
  before_script:
    - mkdir -p /opt/IronFox
    - echo "$SB_GAPI_KEY" > "$SB_GAPI_KEY_FILE"
    - |
      curl \
        --request GET \
        --header "JOB-TOKEN: $CI_JOB_TOKEN" \
        "${CI_API_V4_URL}/projects/$CI_PROJECT_ID/secure_files/$KEYSTORE_SECFILEID/download" \
        --output "$KEYSTORE"

variables: &build_variables
  PRODUCTION_BRANCH: main
  VERSION_NAME: "134.0.1"
  SB_GAPI_KEY_FILE: /opt/IronFox/sb-gapi.data
  KEYSTORE: /opt/IronFox/signing-key.jks
  BUNDLETOOL: 1.18.0

stages:
  - build_fdroid
  - build_docker
  - build_ironfox
  - release

update-fdroid-repo:
  image: alpine:latest
  stage: build_fdroid
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    TARGET_REPO_PATH: ironfox-oss/fdroid
    TARGET_REPO_BRANCH: dev
    META_FILE: "./fdroid/metadata/org.ironfoxoss.ironfox.yml"
    REPO_DIR: "./fdroid/repo"
    <<: *build_variables
  before_script:
    - apk add --no-cache git curl openssh-client jq
    - git config --global user.email "ci@ironfoxoss.org"
    - git config --global user.name "IronFox CI"
  script:
    - git clone "https://oauth2:$GITLAB_CI_PUSH_TOKEN@gitlab.com/$TARGET_REPO_PATH.git" target-repo
    - cd target-repo
    - mkdir -p $REPO_DIR

    # Download all assets from the release
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_CI_API_TOKEN" \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/${CI_COMMIT_TAG}/assets/links" \
        | jq -c '.[] | select(.name | endswith(".apk"))' \
        | while read -r asset; do
          name=$(echo $asset | jq -r '.name')
          url=$(echo $asset | jq -r '.direct_asset_url')
          echo "Downloading $name from $url"
          curl -L --header "PRIVATE-TOKEN: $GITLAB_CI_API_TOKEN" "$url" -o "$REPO_DIR/$name"
        done

    - |
      IFS=":" read vercode vername << EOF
      $($CI_PROJECT_DIR/scripts/get_latest_version.py $(find "$REPO_DIR" -name "*.apk"))
      EOF
      sed -i \
        -e "s/CurrentVersion: .*/CurrentVersion: \"$vername\"/" \
        -e "s/CurrentVersionCode: .*/CurrentVersionCode: $vercode/" $META_FILE

    - git add $REPO_DIR $META_FILE
    - 'git commit -m "feat: update for release ${CI_COMMIT_TAG}"'
    - git push origin HEAD:$TARGET_REPO_BRANCH

build-docker:
  image: docker:cli
  stage: build_docker
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
      changes:
        - Dockerfile
    - if: $CI_COMMIT_BRANCH == $PRODUCTION_BRANCH

build-apk:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  stage: build_ironfox
  timeout: 2h
  needs:
    - job: "build-docker"
      optional: true
  tags:
    - saas-linux-xlarge-amd64
  parallel:
    matrix:
      - VERSION_CODE: ["31340100", "31340110", "31340120"]
  variables:
    <<: *build_variables
  <<: *build_setup_steps
  script:
    - bash -x scripts/ci-build.sh
  artifacts:
    untracked: false
    when: on_success
    access: all
    expire_in: "30 days"
    paths:
      - $CI_PROJECT_DIR/artifacts/apk/**/*
      - $CI_PROJECT_DIR/artifacts/aar/**/*
  rules:
    - when: never
      changes:
      - "*.md"
      - assets/*
      - .gitignore
      - LICENSE
    - when: always

build-apk-set:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  stage: build_ironfox
  timeout: 2h
  needs:
    - job: "build-docker"
      optional: true
    - job: "build-apk"
      artifacts: true
      optional: false
  tags:
    - saas-linux-xlarge-amd64
  variables:
    VERSION_CODE: "31340130"
    <<: *build_variables
  <<: *build_setup_steps
  script:
    - bash -x scripts/ci-build.sh
  artifacts:
    untracked: false
    when: on_success
    access: all
    expire_in: "30 days"
    paths:
      - $CI_PROJECT_DIR/artifacts/apks/**/*
  rules:
    - when: never
      changes:
      - "*.md"
      - assets/*
      - .gitignore
      - LICENSE
    - when: always

publish-release:
  image: alpine:latest
  stage: release
  interruptible: true
  needs:
    - job: "build-apk"
      artifacts: true
      optional: true
    - job: "build-apk-set"
      artifacts: true
      optional: true
  rules:
    - if: $CI_COMMIT_BRANCH == $PRODUCTION_BRANCH
  variables:
    <<: *build_variables
    RELEASE_CLI_VERSION: v0.20.0
  <<: *build_setup_steps
  script:
    - apk add --update --no-cache curl jq python3
    - wget https://gitlab.com/gitlab-org/release-cli/-/releases/${RELEASE_CLI_VERSION}/downloads/bin/release-cli-linux-amd64 -O /root/bin/release-cli
    - chmod +x /root/bin/release-cli
    - bash -x scripts/ci-publish.sh
