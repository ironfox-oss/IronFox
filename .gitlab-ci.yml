stages:
  - build_fdroid
  - build_docker

update-fdroid-repo:
  image: alpine:latest
  stage: build_fdroid
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    TARGET_REPO_PATH: ironfox-oss/fdroid
    TARGET_REPO_BRANCH: dev
    REPO_DIR: './repo'
  before_script:
    - apk add --no-cache git curl openssh-client jq
    - git config --global user.email "ci@ironfoxoss.org"
    - git config --global user.name "IronFox CI"
  script:
    - git clone "https://oauth2:$GITLAB_CI_PUSH_TOKEN@gitlab.com/$TARGET_REPO_PATH.git" target-repo
    - cd target-repo
    - mkdir -p $REPO_DIR

    # Download all assets from the release
    - |
      curl --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/${CI_COMMIT_TAG}/assets/links" \
        | jq -c '.[] | select(.name | endswith(".apk"))' \
        | while read -r asset; do
          name=$(echo $asset | jq -r '.name')
          url=$(echo $asset | jq -r '.direct_asset_url')
          echo "Downloading $name from $url"
          curl -L --header "JOB-TOKEN: $CI_JOB_TOKEN" "$url" -o "$REPO_DIR/$name"
        done

    - git add $REPO_DIR
    - 'git commit -m "feat: update for release ${CI_COMMIT_TAG}"'
    - git push origin HEAD:$TARGET_REPO_BRANCH

docker-build:
  image: docker:cli
  stage: build_docker
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
      changes:
        - Dockerfile
